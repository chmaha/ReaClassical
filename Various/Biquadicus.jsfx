Version: 1.0
desc:Biquadicus Biquad Filters (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Biquad", "BiquadDouble" & "BiquadTriple" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Biquad (MIT License)
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Biquad(MIT License)
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/BiquadTriple (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,2,1{Single,Double,Triple}>Biquad
slider2:3<0,3,1{Low Pass,High Pass,Band Pass,Notch}>Type
slider3:0.125<0,1,0.001:log=0.125>Freq
slider4:3.75<0.01,30,0.01:log=3.75>Q
slider5:1<-1,1,0.01>Inv/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
biquadA = freemem; freemem+=11;
biquadB = freemem; freemem+=11;
biquadC = freemem; freemem+=11;

@slider

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

biquadA[0] = slider3*0.499;
(biquadA[0] < 0.0001) ? biquadA[0] = 0.0001;

biquadA[1] = slider4;
(biquadA[1] < 0.0001) ? biquadA[1] = 0.0001;

wet = slider5;

(slider2 == 0) ? ( 
  K = tan($pi * biquad[0]);
  norm = 1.0 / (1.0 + K / biquad[1] + K * K);
  biquad[2] = K * K * norm;
  biquad[3] = 2.0 * biquad[2];
  biquad[4] = biquad[2];
  biquad[5] = 2.0 * (K * K - 1.0) * norm;
  biquad[6] = (1.0 - K / biquad[1] + K * K) * norm;
);

(slider2 == 1) ? (
  K = tan($pi * biquad[0]);
  norm = 1.0 / (1.0 + K / biquad[1] + K * K);
  biquad[2] = norm;
  biquad[3] = -2.0 * biquad[2];
  biquad[4] = biquad[2];
  biquad[5] = 2.0 * (K * K - 1.0) * norm;
  biquad[6] = (1.0 - K / biquad[1] + K * K) * norm;
);

(slider2 == 2) ? (
  K = tan($pi * biquad[0]);
  norm = 1.0 / (1.0 + K / biquad[1] + K * K);
  biquad[2] = K / biquad[1] * norm;
  biquad[3] = 0.0;
  biquad[4] = -biquad[2];
  biquad[5] = 2.0 * (K * K - 1.0) * norm;
  biquad[6] = (1.0 - K / biquad[1] + K * K) * norm;
);

(slider2 == 3) ? (
  K = tan($pi * biquad[0]);
  norm = 1.0 / (1.0 + K / biquad[1] + K * K);
  biquad[2] = (1.0 + K * K) * norm;
  biquad[3] = 2.0 * (K * K - 1) * norm;
  biquad[4] = biquad[2];
  biquad[5] = biquad[3];
  biquad[6] = (1.0 - K / biquad[1] + K * K) * norm;
);

(slider1 == 1) ? (
x = 0; while(x < 7) (biquadB[x] = biquadA[x];x+=1;);
);

(slider1 == 2) ? (
x = 0; while(x < 7) (biquadC[x] = biquadB[x] = biquadA[x];x+=1; );
);

@sample
inputSampleL = spl0;
inputSampleR = spl1;

drySampleL = inputSampleL;
drySampleR = inputSampleR;

inputSampleL = sin(inputSampleL);
inputSampleR = sin(inputSampleR);
    
tempSampleL = (inputSampleL * biquadA[2]) + biquadA[7];
biquadA[7] = (inputSampleL * biquadA[3]) - (tempSampleL * biquadA[5]) + biquadA[8];
biquadA[8] = (inputSampleL * biquadA[4]) - (tempSampleL * biquadA[6]);
inputSampleL = tempSampleL;

tempSampleR = (inputSampleR * biquadA[2]) + biquadA[9];
biquadA[9] = (inputSampleR * biquadA[3]) - (tempSampleR * biquadA[5]) + biquadA[10];
biquadA[10] = (inputSampleR * biquadA[4]) - (tempSampleR * biquadA[6]);
inputSampleR = tempSampleR;

(slider1 == 1 || slider1 == 2) ? (
tempSampleL = (inputSampleL * biquadB[2]) + biquadB[7];
biquadB[7] = (inputSampleL * biquadB[3]) - (tempSampleL * biquadB[5]) + biquadB[8];
biquadB[8] = (inputSampleL * biquadB[4]) - (tempSampleL * biquadB[6]);
inputSampleL = tempSampleL;

tempSampleR = (inputSampleR * biquadB[2]) + biquadB[9];
biquadB[9] = (inputSampleR * biquadB[3]) - (tempSampleR * biquadB[5]) + biquadB[10];
biquadB[10] = (inputSampleR * biquadB[4]) - (tempSampleR * biquadB[6]);
inputSampleR = tempSampleR; 
);

(slider1 == 2) ? (
tempSampleL = (inputSampleL * biquadC[2]) + biquadC[7];
biquadC[7] = (inputSampleL * biquadC[3]) - (tempSampleL * biquadC[5]) + biquadC[8];
biquadC[8] = (inputSampleL * biquadC[4]) - (tempSampleL * biquadC[6]);
inputSampleL = tempSampleL;

tempSampleR = (inputSampleR * biquadC[2]) + biquadC[9];
biquadC[9] = (inputSampleR * biquadC[3]) - (tempSampleR * biquadC[5]) + biquadC[10];
biquadC[10] = (inputSampleR * biquadC[4]) - (tempSampleR * biquadC[6]);
inputSampleR = tempSampleR;
);

(inputSampleL > 1.0) ? inputSampleL = 1.0;
(inputSampleL < -1.0) ? inputSampleL = -1.0;
(inputSampleR > 1.0) ? inputSampleR = 1.0;
(inputSampleR < -1.0) ? inputSampleR = -1.0;
inputSampleL = asin(inputSampleL);
inputSampleR = asin(inputSampleR);

(wet < 1.0) ? (
  inputSampleL = (inputSampleL*wet) + (drySampleL*(1.0-abs(wet)));
  inputSampleR = (inputSampleR*wet) + (drySampleR*(1.0-abs(wet)));
);

spl0 = inputSampleL;
spl1 = inputSampleR;
