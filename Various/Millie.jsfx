Version: 1.0
desc:Millie Brightness EQ (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "PurestAir" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/PurestAir (MIT License)
  JSFX version released under GPLv3 license

slider1:0<-1,1,0.01>Air Boost
slider2:0<0,1,0.01>Air Limit
slider3:1<0,1,0.01>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

@slider

@block

applyTarget = slider1;
threshold = pow((1-abs(applyTarget)),3);
(applyTarget > 0) ? applyTarget *= 3;

intensity = pow(slider2,2)*5.0;
wet = slider3;



@sample
inputSampleL = spl0;
inputSampleR = spl1;

drySampleL = inputSampleL;
drySampleR = inputSampleR;

halfDrySampleL = halfwaySampleL = (inputSampleL + last1SampleL) / 2.0;
last1SampleL = inputSampleL;
s3L = s2L;
s2L = s1L;
s1L = inputSampleL;
m1 = (s1L-s2L)*((s1L-s2L)/1.3);
m2 = (s2L-s3L)*((s1L-s2L)/1.3);
sense = abs((m1-m2)*((m1-m2)/1.3))*intensity;
applyL += applyTarget - sense;
applyL *= 0.5;
(applyL < -1.0) ? applyL = -1.0;

clamp = halfwaySampleL - halfDrySampleL;
(clamp > threshold) ? halfwaySampleL = lastSampleL + threshold;
(-clamp > threshold) ? halfwaySampleL = lastSampleL - threshold;
lastSampleL = halfwaySampleL;

clamp = inputSampleL - lastSampleL;
(clamp > threshold) ? inputSampleL = lastSampleL + threshold;
(-clamp > threshold) ? inputSampleL = lastSampleL - threshold;
lastSampleL = inputSampleL;

diffSampleL = spl0 - inputSampleL;
halfDiffSampleL = halfDrySampleL - halfwaySampleL;

inputSampleL = spl0 + ((diffSampleL + halfDiffSampleL)*applyL);


halfDrySampleR = halfwaySampleR = (inputSampleR + last1SampleR) / 2.0;
last1SampleR = inputSampleR;
s3R = s2R;
s2R = s1R;
s1R = inputSampleR;
m1 = (s1R-s2R)*((s1R-s2R)/1.3);
m2 = (s2R-s3R)*((s1R-s2R)/1.3);
sense = abs((m1-m2)*((m1-m2)/1.3))*intensity;
applyR += applyTarget - sense;
applyR *= 0.5;
(applyR < -1.0) ? applyR = -1.0;

clamp = halfwaySampleR - halfDrySampleR;
(clamp > threshold) ? halfwaySampleR = lastSampleR + threshold;
(-clamp > threshold) ? halfwaySampleR = lastSampleR - threshold;
lastSampleR = halfwaySampleR;

clamp = inputSampleR - lastSampleR;
(clamp > threshold) ? inputSampleR = lastSampleR + threshold;
(-clamp > threshold) ? inputSampleR = lastSampleR - threshold;
lastSampleR = inputSampleR;

diffSampleR = spl1 - inputSampleR;
halfDiffSampleR = halfDrySampleR - halfwaySampleR;

inputSampleR = spl1 + ((diffSampleR + halfDiffSampleR)*applyR);

(wet !=1.0) ? (
  inputSampleL = (inputSampleL * wet) + (drySampleL * (1.0-wet));
  inputSampleR = (inputSampleR * wet) + (drySampleR * (1.0-wet));
);

spl0 = inputSampleL;
spl1 = inputSampleR;
