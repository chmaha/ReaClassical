Version: 1.2
desc: Amphitrite Compressor (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "PurestSquish" and "SurgeTide" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/PurestSquish (MIT License)
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/SurgeTide (MIT License)
  JSFX version released under GPLv3 license

slider1:1<0,1,1{No,Yes}>Enable Squish?
slider2:0.25<0,0.5,0.01>Squish
slider3:0.25<0,0.5,0.01>Bass Bloom
slider4:1<0,1,0.01>Squish Output
// slider4:1<0,1,0.01>PurestSquish Dry/Wet
slider5:1<0,1,1{No,Yes}>Enable Surge?
slider6:0.25<0,0.5,0.01>SurgeNode
slider7:0.25<0,0.5,0.01>SurgeRate
slider8:1<0,1,0.01>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

A = 0.3;
B = 0.3;
C = 1.0;
D = 1.0;

muSpeedAL = 10000;
muSpeedBL = 10000;
muSpeedCL = 10000;
muSpeedDL = 10000;
muSpeedEL = 10000;
muCoefficientAL = 1;
muCoefficientBL = 1;
muCoefficientCL = 1;
muCoefficientDL = 1;
muCoefficientEL = 1;
iirSampleAL = 0.0;
iirSampleBL = 0.0;
iirSampleCL = 0.0;
iirSampleDL = 0.0;
iirSampleEL = 0.0;
lastCoefficientAL = 1;
lastCoefficientBL = 1;
lastCoefficientCL = 1;
lastCoefficientDL = 1;
mergedCoefficientsL = 1;
muVaryL = 1;

muSpeedAR = 10000;
muSpeedBR = 10000;
muSpeedCR = 10000;
muSpeedDR = 10000;
muSpeedER = 10000;
muCoefficientAR = 1;
muCoefficientBR = 1;
muCoefficientCR = 1;
muCoefficientDR = 1;
muCoefficientER = 1;
iirSampleAR = 0.0;
iirSampleBR = 0.0;
iirSampleCR = 0.0;
iirSampleDR = 0.0;
iirSampleER = 0.0;
lastCoefficientAR = 1;
lastCoefficientBR = 1;
lastCoefficientCR = 1;
lastCoefficientDR = 1;
mergedCoefficientsR = 1;
muVaryR = 1;

count = 1;
fpFlip = 1;

E = 0.3;
F = 0.3;
G = 1.0;

flip = 1;
chaseA = 0.0;
chaseB = 0.0;
chaseC = 0.0;  

UINT32_MAX = 4294967295; 
M_PI = 3.1415926535897932384626433;

@slider

squish_enable = slider1; 
A = slider2;
B = slider3;   
C = slider4;
// D = slider6;
surge_enable = slider5;
E = slider6;
F = slider7;
G = slider8;


@block

overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

threshold = 1.01 - (1.0-pow(1.0-(A*0.5),4));
iirAmount = pow(B,4)/overallscale;
output = C;
wet = G;

intensity = E;
attack = ((F+0.1)*0.0005)/overallscale;
decay = ((F+0.001)*0.00005)/overallscale;
wet2 = G;



@sample

(squish_enable == 1) ? (
inputSampleL = spl0;
inputSampleR = spl1;


drySampleL = inputSampleL;
drySampleR = inputSampleR;

muMakeupGainL = 1.0 / threshold;
outMakeupGainL = sqrt(muMakeupGainL);
muMakeupGainL += outMakeupGainL;
muMakeupGainL *= 0.5;
outMakeupGainL *= 0.5;
//gain settings around threshold
releaseL = mergedCoefficientsL * 32768.0;
releaseL /= overallscale;
fastestL = sqrt(releaseL);
//speed settings around release
lastCorrectionL = mergedCoefficientsL;

muMakeupGainR = 1.0 / threshold;
outMakeupGainR = sqrt(muMakeupGainR);
muMakeupGainR += outMakeupGainR;
muMakeupGainR *= 0.5;
outMakeupGainR *= 0.5;
//gain settings around threshold
releaseR = mergedCoefficientsR * 32768.0;
releaseR /= overallscale;
fastestR = sqrt(releaseR);
//speed settings around release
lastCorrectionR = mergedCoefficientsR;

(muMakeupGainL != 1.0) ? inputSampleL = inputSampleL * muMakeupGainL;
(muMakeupGainR != 1.0) ? inputSampleR = inputSampleR * muMakeupGainR;

highpassSampleBL = highpassSampleL = inputSampleL;
highpassSampleBR = highpassSampleR = inputSampleR;

(count < 1 || count > 3) ? count = 1;
  (count == 1) ?
  (
    //begin L
    iirSampleAL = (iirSampleAL * (1 - iirAmount)) + (highpassSampleL * iirAmount);
    highpassSampleL -= iirSampleAL;
    (abs(highpassSampleL) > threshold) ?
    (
      muVaryL = threshold / abs(highpassSampleL);
      muAttackL = sqrt(abs(muSpeedAL));
      muCoefficientAL = muCoefficientAL * (muAttackL-1.0);
      (muVaryL < threshold) ? muCoefficientAL = muCoefficientAL + threshold
      : muCoefficientAL = muCoefficientAL + muVaryL;
      muCoefficientAL = muCoefficientAL / muAttackL;
    )
    :
    (
      muCoefficientAL = muCoefficientAL * ((muSpeedAL * muSpeedAL)-1.0);
      muCoefficientAL = muCoefficientAL + 1.0;
      muCoefficientAL = muCoefficientAL / (muSpeedAL * muSpeedAL);
    );
    muNewSpeedL = muSpeedAL * (muSpeedAL-1);
    muNewSpeedL = muNewSpeedL + abs(highpassSampleL*releaseL)+fastestL;
    muSpeedAL = muNewSpeedL / muSpeedAL;
    lastCoefficientAL = pow(muCoefficientAL,2);
    mergedCoefficientsL = lastCoefficientBL;
    mergedCoefficientsL += lastCoefficientAL;
    lastCoefficientAL *= (1.0-lastCorrectionL);
    lastCoefficientAL += (muCoefficientAL * lastCorrectionL);
    lastCoefficientBL = lastCoefficientAL;
    //end L
    
    //begin R
    iirSampleAR = (iirSampleAR * (1 - iirAmount)) + (highpassSampleR * iirAmount);
    highpassSampleR -= iirSampleAR;
    (abs(highpassSampleR) > threshold) ?
    (
      muVaryR = threshold / abs(highpassSampleR);
      muAttackR = sqrt(abs(muSpeedAR));
      muCoefficientAR = muCoefficientAR * (muAttackR-1.0);
      (muVaryR < threshold) ? muCoefficientAR = muCoefficientAR + threshold
      : muCoefficientAR = muCoefficientAR + muVaryR;
      muCoefficientAR = muCoefficientAR / muAttackR;
    )
    :
    (
      muCoefficientAR = muCoefficientAR * ((muSpeedAR * muSpeedAR)-1.0);
      muCoefficientAR = muCoefficientAR + 1.0;
      muCoefficientAR = muCoefficientAR / (muSpeedAR * muSpeedAR);
    );
    muNewSpeedR = muSpeedAR * (muSpeedAR-1);
    muNewSpeedR = muNewSpeedR + abs(highpassSampleR*releaseR)+fastestR;
    muSpeedAR = muNewSpeedR / muSpeedAR;
    lastCoefficientAR = pow(muCoefficientAR,2);
    mergedCoefficientsR = lastCoefficientBR;
    mergedCoefficientsR += lastCoefficientAR;
    lastCoefficientAR *= (1.0-lastCorrectionR);
    lastCoefficientAR += (muCoefficientAR * lastCorrectionR);
    lastCoefficientBR = lastCoefficientAR;
    //end R
    
    break;
  )
  : (count == 2) ?
  (
    //begin L
    iirSampleBL = (iirSampleBL * (1 - iirAmount)) + (highpassSampleL * iirAmount);
    highpassSampleL -= iirSampleBL;
    (abs(highpassSampleL) > threshold) ?
    (
      muVaryL = threshold / abs(highpassSampleL);
      muAttackL = sqrt(abs(muSpeedBL));
      muCoefficientBL = muCoefficientBL * (muAttackL-1);
      (muVaryL < threshold) ? muCoefficientBL = muCoefficientBL + threshold
      : muCoefficientBL = muCoefficientBL + muVaryL;
      muCoefficientBL = muCoefficientBL / muAttackL;
    )
    :
    (
      muCoefficientBL = muCoefficientBL * ((muSpeedBL * muSpeedBL)-1.0);
      muCoefficientBL = muCoefficientBL + 1.0;
      muCoefficientBL = muCoefficientBL / (muSpeedBL * muSpeedBL);
    );
    muNewSpeedL = muSpeedBL * (muSpeedBL-1);
    muNewSpeedL = muNewSpeedL + abs(highpassSampleL*releaseL)+fastestL;
    muSpeedBL = muNewSpeedL / muSpeedBL;
    lastCoefficientAL = pow(muCoefficientBL,2);
    mergedCoefficientsL = lastCoefficientBL;
    mergedCoefficientsL += lastCoefficientAL;
    lastCoefficientAL *= (1.0-lastCorrectionL);
    lastCoefficientAL += (muCoefficientBL * lastCorrectionL);
    lastCoefficientBL = lastCoefficientAL;
    //end L
    
    //begin R
    iirSampleBR = (iirSampleBR * (1 - iirAmount)) + (highpassSampleR * iirAmount);
    highpassSampleR -= iirSampleBR;
    (abs(highpassSampleR) > threshold) ?
    (
      muVaryR = threshold / abs(highpassSampleR);
      muAttackR = sqrt(abs(muSpeedBR));
      muCoefficientBR = muCoefficientBR * (muAttackR-1);
      (muVaryR < threshold) ? muCoefficientBR = muCoefficientBR + threshold
      : muCoefficientBR = muCoefficientBR + muVaryR;
      muCoefficientBR = muCoefficientBR / muAttackR;
    )
    :
    (
      muCoefficientBR = muCoefficientBR * ((muSpeedBR * muSpeedBR)-1.0);
      muCoefficientBR = muCoefficientBR + 1.0;
      muCoefficientBR = muCoefficientBR / (muSpeedBR * muSpeedBR);
    );
    muNewSpeedR = muSpeedBR * (muSpeedBR-1);
    muNewSpeedR = muNewSpeedR + abs(highpassSampleR*releaseR)+fastestR;
    muSpeedBR = muNewSpeedR / muSpeedBR;
    lastCoefficientAR = pow(muCoefficientBR,2);
    mergedCoefficientsR = lastCoefficientBR;
    mergedCoefficientsR += lastCoefficientAR;
    lastCoefficientAR *= (1.0-lastCorrectionR);
    lastCoefficientAR += (muCoefficientBR * lastCorrectionR);
    lastCoefficientBR = lastCoefficientAR;
    //end R
    
    break;
    )
    :(count == 3) ?
    (
    //begin L
    iirSampleCL = (iirSampleCL * (1 - iirAmount)) + (highpassSampleL * iirAmount);
    highpassSampleL -= iirSampleCL;
    (abs(highpassSampleL) > threshold) ?
    (
      muVaryL = threshold / abs(highpassSampleL);
      muAttackL = sqrt(abs(muSpeedCL));
      muCoefficientCL = muCoefficientCL * (muAttackL-1);
      (muVaryL < threshold) ? muCoefficientCL = muCoefficientCL + threshold
      : muCoefficientCL = muCoefficientCL + muVaryL;
      muCoefficientCL = muCoefficientCL / muAttackL;
    )
    :
    (
      muCoefficientCL = muCoefficientCL * ((muSpeedCL * muSpeedCL)-1.0);
      muCoefficientCL = muCoefficientCL + 1.0;
      muCoefficientCL = muCoefficientCL / (muSpeedCL * muSpeedCL);
    );
    muNewSpeedL = muSpeedCL * (muSpeedCL-1);
    muNewSpeedL = muNewSpeedL + abs(highpassSampleL*releaseL)+fastestL;
    muSpeedCL = muNewSpeedL / muSpeedCL;
    lastCoefficientAL = pow(muCoefficientCL,2);
    mergedCoefficientsL = lastCoefficientBL;
    mergedCoefficientsL += lastCoefficientAL;
    lastCoefficientAL *= (1.0-lastCorrectionL);
    lastCoefficientAL += (muCoefficientCL * lastCorrectionL);
    lastCoefficientBL = lastCoefficientAL;
    //end L
    
    //begin R
    iirSampleCR = (iirSampleCR * (1 - iirAmount)) + (highpassSampleR * iirAmount);
    highpassSampleR -= iirSampleCR;
    (abs(highpassSampleR) > threshold) ?
    (
      muVaryR = threshold / abs(highpassSampleR);
      muAttackR = sqrt(abs(muSpeedCR));
      muCoefficientCR = muCoefficientCR * (muAttackR-1);
      (muVaryR < threshold) ? muCoefficientCR = muCoefficientCR + threshold
      : muCoefficientCR = muCoefficientCR + muVaryR;
      muCoefficientCR = muCoefficientCR / muAttackR;
    )
    :
    (
      muCoefficientCR = muCoefficientCR * ((muSpeedCR * muSpeedCR)-1.0);
      muCoefficientCR = muCoefficientCR + 1.0;
      muCoefficientCR = muCoefficientCR / (muSpeedCR * muSpeedCR);
    );
    muNewSpeedR = muSpeedCR * (muSpeedCR-1);
    muNewSpeedR = muNewSpeedR + abs(highpassSampleR*releaseR)+fastestR;
    muSpeedCR = muNewSpeedR / muSpeedCR;
    lastCoefficientAR = pow(muCoefficientCR,2);
    mergedCoefficientsR = lastCoefficientBR;
    mergedCoefficientsR += lastCoefficientAR;
    lastCoefficientAR *= (1.0-lastCorrectionR);
    lastCoefficientAR += (muCoefficientCR * lastCorrectionR);
    lastCoefficientBR = lastCoefficientAR;
    //end R
    break;
  );
    count+=1;

//applied compression with vari-vari-µ-µ-µ-µ-µ-µ-is-the-kitten-song o/~
//applied gain correction to control output level- tends to constrain sound rather than inflate it

(fpFlip) ? (
  //begin L
  iirSampleDL = (iirSampleDL * (1 - iirAmount)) + (highpassSampleBL * iirAmount);
  highpassSampleBL -= iirSampleDL;
  (abs(highpassSampleBL) > threshold) ?
  (
    muVaryL = threshold / abs(highpassSampleBL);
    muAttackL = sqrt(abs(muSpeedDL));
    muCoefficientDL = muCoefficientDL * (muAttackL-1.0);
    (muVaryL < threshold) ? muCoefficientDL = muCoefficientDL + threshold
    : muCoefficientDL = muCoefficientDL + muVaryL;
    muCoefficientDL = muCoefficientDL / muAttackL;
  )
  :
  (
    muCoefficientDL = muCoefficientDL * ((muSpeedDL * muSpeedDL)-1.0);
    muCoefficientDL = muCoefficientDL + 1.0;
    muCoefficientDL = muCoefficientDL / (muSpeedDL * muSpeedDL);
  );
  muNewSpeedL = muSpeedDL * (muSpeedDL-1);
  muNewSpeedL = muNewSpeedL + abs(highpassSampleBL*releaseL)+fastestL;
  muSpeedDL = muNewSpeedL / muSpeedDL;
  lastCoefficientCL = pow(muCoefficientEL,2);
  mergedCoefficientsL += lastCoefficientDL;
  mergedCoefficientsL += lastCoefficientCL;
  lastCoefficientCL *= (1.0-lastCorrectionL);
  lastCoefficientCL += (muCoefficientDL * lastCorrectionL);
  lastCoefficientDL = lastCoefficientCL;
  //end L
  
  //begin R
  iirSampleDR = (iirSampleDR * (1 - iirAmount)) + (highpassSampleBR * iirAmount);
  highpassSampleBR -= iirSampleDR;
  (abs(highpassSampleBR) > threshold) ?
  (
    muVaryR = threshold / abs(highpassSampleBR);
    muAttackR = sqrt(abs(muSpeedDR));
    muCoefficientDR = muCoefficientDR * (muAttackR-1.0);
    (muVaryR < threshold) ? muCoefficientDR = muCoefficientDR + threshold
    : muCoefficientDR = muCoefficientDR + muVaryR;
    muCoefficientDR = muCoefficientDR / muAttackR;
  )
  :
  (
    muCoefficientDR = muCoefficientDR * ((muSpeedDR * muSpeedDR)-1.0);
    muCoefficientDR = muCoefficientDR + 1.0;
    muCoefficientDR = muCoefficientDR / (muSpeedDR * muSpeedDR);
  );
  muNewSpeedR = muSpeedDR * (muSpeedDR-1);
  muNewSpeedR = muNewSpeedR + abs(highpassSampleBR*releaseR)+fastestR;
  muSpeedDR = muNewSpeedR / muSpeedDR;
  lastCoefficientCR = pow(muCoefficientER,2);
  mergedCoefficientsR += lastCoefficientDR;
  mergedCoefficientsR += lastCoefficientCR;
  lastCoefficientCR *= (1.0-lastCorrectionR);
  lastCoefficientCR += (muCoefficientDR * lastCorrectionR);
  lastCoefficientDR = lastCoefficientCR;
  //end R
  
) : (
  //begin L
  iirSampleEL = (iirSampleEL * (1 - iirAmount)) + (highpassSampleBL * iirAmount);
  highpassSampleBL -= iirSampleEL;
  (abs(highpassSampleBL) > threshold) ?
  (
    muVaryL = threshold / abs(highpassSampleBL);
    muAttackL = sqrt(abs(muSpeedEL));
    muCoefficientEL = muCoefficientEL * (muAttackL-1.0);
    (muVaryL < threshold) ? muCoefficientEL = muCoefficientEL + threshold
    : muCoefficientEL = muCoefficientEL + muVaryL;
    muCoefficientEL = muCoefficientEL / muAttackL;
  )
  :
  (
    muCoefficientEL = muCoefficientEL * ((muSpeedEL * muSpeedEL)-1.0);
    muCoefficientEL = muCoefficientEL + 1.0;
    muCoefficientEL = muCoefficientEL / (muSpeedEL * muSpeedEL);
  );
  muNewSpeedL = muSpeedEL * (muSpeedEL-1);
  muNewSpeedL = muNewSpeedL + abs(highpassSampleBL*releaseL)+fastestL;
  muSpeedEL = muNewSpeedL / muSpeedEL;
  lastCoefficientCL = pow(muCoefficientEL,2);
  mergedCoefficientsL += lastCoefficientDL;
  mergedCoefficientsL += lastCoefficientCL;
  lastCoefficientCL *= (1.0-lastCorrectionL);
  lastCoefficientCL += (muCoefficientEL * lastCorrectionL);
  lastCoefficientDL = lastCoefficientCL;
  //end L
  
  //begin R
  iirSampleER = (iirSampleER * (1 - iirAmount)) + (highpassSampleBR * iirAmount);
  highpassSampleBR -= iirSampleER;
  (abs(highpassSampleBR) > threshold) ?
  (
    muVaryR = threshold / abs(highpassSampleBR);
    muAttackR = sqrt(abs(muSpeedER));
    muCoefficientER = muCoefficientER * (muAttackR-1.0);
    (muVaryR < threshold) ? muCoefficientER = muCoefficientER + threshold
    :
    muCoefficientER = muCoefficientER + muVaryR;
    muCoefficientER = muCoefficientER / muAttackR;
  )
  :
  (
    muCoefficientER = muCoefficientER * ((muSpeedER * muSpeedER)-1.0);
    muCoefficientER = muCoefficientER + 1.0;
    muCoefficientER = muCoefficientER / (muSpeedER * muSpeedER);
  );
  muNewSpeedR = muSpeedER * (muSpeedER-1);
  muNewSpeedR = muNewSpeedR + abs(highpassSampleBR*releaseR)+fastestR;
  muSpeedER = muNewSpeedR / muSpeedER;
  lastCoefficientCR = pow(muCoefficientER,2);
  mergedCoefficientsR += lastCoefficientDR;
  mergedCoefficientsR += lastCoefficientCR;
  lastCoefficientCR *= (1.0-lastCorrectionR);
  lastCoefficientCR += (muCoefficientER * lastCorrectionR);
  lastCoefficientDR = lastCoefficientCR;
  //end R
  
);
mergedCoefficientsL *= 0.25;
inputSampleL *= mergedCoefficientsL;

mergedCoefficientsR *= 0.25;
inputSampleR *= mergedCoefficientsR;

(outMakeupGainL != 1.0) ? inputSampleL = inputSampleL * outMakeupGainL;
(outMakeupGainR != 1.0) ? inputSampleR = inputSampleR * outMakeupGainR;

fpFlip = !fpFlip;

(output < 1.0) ? (
  inputSampleL *= output;
  inputSampleR *= output;
);

(wet < 1.0) ? (
  inputSampleL = (inputSampleL * wet) + (drySampleL * (1.0-wet));
  inputSampleR = (inputSampleR * wet) + (drySampleR * (1.0-wet));
);


spl0 = inputSampleL;
spl1 = inputSampleR;

);


//=====================================//

(surge_enable == 1 ) ? (

inputSampleL = spl0;
inputSampleR = spl1;



drySampleL = inputSampleL;
drySampleR = inputSampleR;

inputSampleL *= 8.0;
inputSampleR *= 8.0;
inputSampleL *= intensity;
inputSampleR *= intensity;

inputSense = abs(inputSampleL);
(abs(inputSampleR) > inputSense) ? inputSense = abs(inputSampleR);

(chaseC < inputSense) ? chaseA += attack;
(chaseC > inputSense) ? chaseA -= decay;

(chaseA > decay) ? chaseA = decay;
(chaseA < -attack) ? chaseA = -attack;

chaseB += (chaseA/overallscale);

(chaseB > decay) ? chaseB = decay;
(chaseB < -attack) ? chaseB = -attack;

chaseC += (chaseB/overallscale);
(chaseC > 1.0) ? chaseC = 1.0;
(chaseC < 0.0) ? chaseC = 0.0;

inputSampleL *= chaseC;
inputSampleL = drySampleL - (inputSampleL * intensity);
inputSampleL = (drySampleL * (1.0-wet2)) + (inputSampleL * wet2);

inputSampleR *= chaseC;
inputSampleR = drySampleR - (inputSampleR * intensity);
inputSampleR = (drySampleR * (1.0-wet2)) + (inputSampleR * wet2);    



spl0 = inputSampleL;
spl1 = inputSampleR;

);