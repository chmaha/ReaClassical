Version: 1.2
desc:Discordia Distortion (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Distorion" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Distorion (MIT License)
  JSFX version released under GPLv3 license

slider1:0<-12,12,0.01>Input
slider2:2<0,4,1{Density,Drive,Spiral,Mojo,Dyno>Mode
slider3:0<-12,12,0.01>Output
slider4:1<0,1,0.01>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
previousInL = freemem; freemem +=9;
previousOutL = freemem; freemem +=9;
previousInR = freemem; freemem +=9;
previousOutR = freemem; freemem +=9;

UINT32_MAX = 4294967295;



@slider

A = slider1/24 + 0.5;
B = slider2;
C = slider3/24 + 0.5;
D = slider4;

@block

stages = (floor(srate)/25000.0) | 0;
(stages > 8) ? stages = 8;
input = pow(10.0,((A-0.5)*24.0)/20.0);
mode = ( B * 4.999 ) | 0;
output = pow(10.0,((C-0.5)*24.0)/20.0);
wet = D;

@sample
inputSampleL = spl0;
inputSampleR = spl1;



drySampleL = inputSampleL;
drySampleR = inputSampleR;

inputSampleL *= input;
inputSampleR *= input;

x = 0; while(x < stages) (
  temp = (inputSampleL+previousInL[x])*0.5;
  previousInL[x] = inputSampleL;
  inputSampleL = temp;
  temp = (inputSampleR+previousInR[x])*0.5;
  previousInR[x] = inputSampleR;
  inputSampleR = temp;
  x += 1;
);

(slider2 == 0) ?
(
    (inputSampleL > 1.570796326794897) ? inputSampleL = 1.570796326794897;
    (inputSampleL < -1.570796326794897) ? inputSampleL = -1.570796326794897;
    (inputSampleR > 1.570796326794897) ? inputSampleR = 1.570796326794897;
    (inputSampleR < -1.570796326794897) ? inputSampleR = -1.570796326794897;
    //clip to 1.570796326794897 to reach maximum output
    inputSampleL = sin(inputSampleL);
    inputSampleR = sin(inputSampleR);
) : (slider2 == 1) ? 
(
    (inputSampleL > 1.0) ? inputSampleL = 1.0;
    (inputSampleL < -1.0) ? inputSampleL = -1.0;
    (inputSampleR > 1.0) ? inputSampleR = 1.0;
    (inputSampleR < -1.0) ? inputSampleR = -1.0;
    inputSampleL -= (inputSampleL * (abs(inputSampleL) * 0.6) * (abs(inputSampleL) * 0.6));
    inputSampleR -= (inputSampleR * (abs(inputSampleR) * 0.6) * (abs(inputSampleR) * 0.6));
    inputSampleL *= 1.5;
    inputSampleR *= 1.5;
) : (slider2 == 2) ?
(
    (inputSampleL > 1.2533141373155) ? inputSampleL = 1.2533141373155;
    (inputSampleL < -1.2533141373155) ? inputSampleL = -1.2533141373155;
    (inputSampleR > 1.2533141373155) ? inputSampleR = 1.2533141373155;
    (inputSampleR < -1.2533141373155) ? inputSampleR = -1.2533141373155;
    //clip to 1.2533141373155 to reach maximum output
    inputSampleL = sin(inputSampleL * abs(inputSampleL)) / abs(inputSampleL);
    inputSampleR = sin(inputSampleR * abs(inputSampleR)) / abs(inputSampleR);
) : (slider2 == 3) ?
(
    mojo = pow(abs(inputSampleL),0.25);
    (mojo > 0.0) ? inputSampleL = (sin(inputSampleL * mojo * $pi * 0.5) / mojo) * 0.987654321;
    mojo = pow(abs(inputSampleR),0.25);
    (mojo > 0.0) ? inputSampleR = (sin(inputSampleR * mojo * $pi * 0.5) / mojo) * 0.987654321;
    //mojo is the one that flattens WAAAAY out very softly before wavefolding        
) : (slider2 == 4) ?
(
    dyno = pow(abs(inputSampleL),4);
    (dyno > 0.0) ? inputSampleL = (sin(inputSampleL * dyno) / dyno) * 1.1654321;
    dyno = pow(abs(inputSampleR),4);
    (dyno > 0.0) ? inputSampleR = (sin(inputSampleR * dyno) / dyno) * 1.1654321;
    //dyno is the one that tries to raise peak energy        
);       

x = 1; while(x < (stages/2)) (
  temp = (inputSampleL+previousOutL[x])*0.5;
  previousOutL[x] = inputSampleL;
  inputSampleL = temp;
  temp = (inputSampleR+previousOutR[x])*0.5;
  previousOutR[x] = inputSampleR;
  inputSampleR = temp;
  x += 1;
);    

(output != 1.0) ? (
  inputSampleL *= output;
  inputSampleR *= output;
);

(wet !=1.0) ? (
  inputSampleL = (inputSampleL * wet) + (drySampleL * (1.0-wet));
  inputSampleR = (inputSampleR * wet) + (drySampleR * (1.0-wet));
);


 


spl0 = inputSampleL;
spl1 = inputSampleR;
