Version: 1.2
desc:Buttress Bass (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "BassKit" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/BassKit (MIT License)
  JSFX version released under GPLv3 license

slider1:0.5<0,1,0.01>Drive
slider2:0.5<0,1,0.01>Voicing
slider3:0<-3,1,0.01>BassOut
slider4:0<-3,1,0.01>SubOut

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

UINT32_MAX = 4294967295;
M_PI = 3.1415926535897932384626433;

oscGate = 1.0;

fpdL = 1.0; while (fpdL < 16386) (fpdL = rand()*UINT32_MAX);
fpdR = 1.0; while (fpdR < 16386) (fpdR = rand()*UINT32_MAX);

@slider

A = slider1;
B = slider2;
C = (slider3+1)/2;
D = (slider4+1)/2;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

HeadBump = 0.0;
BassGain = A * 0.1;
HeadBumpFreq = ((B*0.1)+0.02)/overallscale;
iirAmount = HeadBumpFreq/44.1;
BassOutGain = ((C*2.0)-1.0)*abs(((C*2.0)-1.0));
SubBump = 0.0;
SubOutGain = ((D*2.0)-1.0)*abs(((D*2.0)-1.0))*4.0;
clamp = 0.0;
fuzz = 0.111;

@sample
inputSampleL = spl0;
inputSampleR = spl1;



    ataLowpass = (inputSampleL + inputSampleR) / 2.0;
    iirDriveSampleA = (iirDriveSampleA * (1.0 - HeadBumpFreq)) + (ataLowpass * HeadBumpFreq); ataLowpass = iirDriveSampleA;
    iirDriveSampleB = (iirDriveSampleB * (1.0 - HeadBumpFreq)) + (ataLowpass * HeadBumpFreq); ataLowpass = iirDriveSampleB;
    
    
    oscGate += abs(ataLowpass * 10.0);
    oscGate -= 0.001;
    (oscGate > 1.0) ? oscGate = 1.0;
    (oscGate < 0) ? oscGate = 0;

    clamp = 1.0-oscGate;
    clamp *= 0.00001;
    
    (ataLowpass > 0) ?
    (
    (WasNegative) ? (SubOctave = !SubOctave; WasNegative = 0;)
    : WasNegative = 1;);
    
    randy = (fpdL/UINT32_MAX)*fuzz; 
    invrandy = (1.0-randy);
    randy /= 2.0;
    
    iirSampleA = (iirSampleA * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleA;
    iirSampleB = (iirSampleB * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleB;
    iirSampleC = (iirSampleC * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleC;
    iirSampleD = (iirSampleD * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleD;
    iirSampleE = (iirSampleE * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleE;
    iirSampleF = (iirSampleF * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleF;
    iirSampleG = (iirSampleG * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleG;
    iirSampleH = (iirSampleH * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleH;
    iirSampleI = (iirSampleI * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleI;
    iirSampleJ = (iirSampleJ * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleJ;
    iirSampleK = (iirSampleK * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleK;
    iirSampleL = (iirSampleL * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleL;
    iirSampleM = (iirSampleM * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleM;
    iirSampleN = (iirSampleN * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleN;
    iirSampleO = (iirSampleO * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleO;
    iirSampleP = (iirSampleP * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleP;
    iirSampleQ = (iirSampleQ * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleQ;
    iirSampleR = (iirSampleR * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleR;
    iirSampleS = (iirSampleS * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleS;
    iirSampleT = (iirSampleT * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleT;
    iirSampleU = (iirSampleU * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleU;
    iirSampleV = (iirSampleV * (1.0 - iirAmount)) + (ataLowpass * iirAmount); ataLowpass -= iirSampleV;
    
    (bflip == 1) ?
    (
        iirHeadBumpA += (ataLowpass * BassGain);
        iirHeadBumpA -= (iirHeadBumpA * iirHeadBumpA * iirHeadBumpA * HeadBumpFreq);
        iirHeadBumpA = (invrandy * iirHeadBumpA) + (randy * iirHeadBumpB) + (randy * iirHeadBumpC);
        (iirHeadBumpA > 0) ? iirHeadBumpA -= clamp;
        (iirHeadBumpA < 0) ? iirHeadBumpA += clamp;
        HeadBump = iirHeadBumpA;
    ) : (bflip == 2) ?
    (
        iirHeadBumpB += (ataLowpass * BassGain);
        iirHeadBumpB -= (iirHeadBumpB * iirHeadBumpB * iirHeadBumpB * HeadBumpFreq);
        iirHeadBumpB = (randy * iirHeadBumpA) + (invrandy * iirHeadBumpB) + (randy * iirHeadBumpC);
        (iirHeadBumpB > 0) ? iirHeadBumpB -= clamp;
        (iirHeadBumpB < 0) ? iirHeadBumpB += clamp;
        HeadBump = iirHeadBumpB;
    ) : (bflip == 3) ?
    (
        iirHeadBumpC += (ataLowpass * BassGain);
        iirHeadBumpC -= (iirHeadBumpC * iirHeadBumpC * iirHeadBumpC * HeadBumpFreq);
        iirHeadBumpC = (randy * iirHeadBumpA) + (randy * iirHeadBumpB) + (invrandy * iirHeadBumpC);
        (iirHeadBumpC > 0) ? iirHeadBumpC -= clamp;
        (iirHeadBumpC < 0) ? iirHeadBumpC += clamp;
        HeadBump = iirHeadBumpC;
    );
    
    iirSampleW = (iirSampleW * (1.0 - iirAmount)) + (HeadBump * iirAmount); HeadBump -= iirSampleW;
    iirSampleX = (iirSampleX * (1.0 - iirAmount)) + (HeadBump * iirAmount); HeadBump -= iirSampleX;
    
    SubBump = HeadBump;
    iirSampleY = (iirSampleY * (1.0 - iirAmount)) + (SubBump * iirAmount); SubBump -= iirSampleY;
    
    iirDriveSampleC = (iirDriveSampleC * (1.0 - HeadBumpFreq)) + (SubBump * HeadBumpFreq); SubBump = iirDriveSampleC;
    iirDriveSampleD = (iirDriveSampleD * (1.0 - HeadBumpFreq)) + (SubBump * HeadBumpFreq); SubBump = iirDriveSampleD;
    
    
    SubBump = abs(SubBump);
    (SubOctave == 0) ? SubBump = -SubBump;
    
    (bflip == 1) ?
    (
        iirSubBumpA += SubBump;// * BassGain);
        iirSubBumpA -= (iirSubBumpA * iirSubBumpA * iirSubBumpA * HeadBumpFreq);
        iirSubBumpA = (invrandy * iirSubBumpA) + (randy * iirSubBumpB) + (randy * iirSubBumpC);
        (iirSubBumpA > 0) ? iirSubBumpA -= clamp;
        (iirSubBumpA < 0) ? iirSubBumpA += clamp;
        SubBump = iirSubBumpA;
    ) : (bflip == 2) ?
    (
        iirSubBumpB += SubBump;// * BassGain);
        iirSubBumpB -= (iirSubBumpB * iirSubBumpB * iirSubBumpB * HeadBumpFreq);
        iirSubBumpB = (randy * iirSubBumpA) + (invrandy * iirSubBumpB) + (randy * iirSubBumpC);
        (iirSubBumpB > 0) ? iirSubBumpB -= clamp;
        (iirSubBumpB < 0) ? iirSubBumpB += clamp;
        SubBump = iirSubBumpB;
    ) : (bflip == 3) ?
    (
        iirSubBumpC += SubBump;// * BassGain);
        iirSubBumpC -= (iirSubBumpC * iirSubBumpC * iirSubBumpC * HeadBumpFreq);
        iirSubBumpC = (randy * iirSubBumpA) + (randy * iirSubBumpB) + (invrandy * iirSubBumpC);
        (iirSubBumpC > 0) ? iirSubBumpC -= clamp;
        (iirSubBumpC < 0) ? iirSubBumpC += clamp;
        SubBump = iirSubBumpC;
    );
    
    iirSampleZ = (iirSampleZ * (1.0 - HeadBumpFreq)) + (SubBump * HeadBumpFreq); SubBump = iirSampleZ;
    iirDriveSampleE = (iirDriveSampleE * (1.0 - iirAmount)) + (SubBump * iirAmount); SubBump = iirDriveSampleE;
    iirDriveSampleF = (iirDriveSampleF * (1.0 - iirAmount)) + (SubBump * iirAmount); SubBump = iirDriveSampleF;
    
    
    inputSampleL += (HeadBump * BassOutGain);
    inputSampleL += (SubBump * SubOutGain);
    
    inputSampleR += (HeadBump * BassOutGain);
    inputSampleR += (SubBump * SubOutGain);
    
    
    flip = !flip;
    bflip+=1;
    (bflip < 1 || bflip > 3) ? bflip = 1;


fpdL = rand(UINT32_MAX);
fpdR = rand(UINT32_MAX); 

spl0 = inputSampleL;
spl1 = inputSampleR;
