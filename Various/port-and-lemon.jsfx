Version: 1.2
desc:Port-and-Lemon Compressor / Gate (chmaha)
author: chmaha
about:
  Compressor and Gate
  Uses DSP from airwindows "Dynamics" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Dynamics (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,1,0.01>Compress
slider2:0.5<0,1,0.01>Speed
slider3:0<0,1,0.01>Gate
slider4:1<0,1,0.01>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

UINT32_MAX = 4294967295;
M_PI = 3.1415926535897932384626433;


WasNegativeL = 0;
ZeroCrossL = 0;
gaterollerL = 0.0;
gateL = 0.0;

WasNegativeR = 0;
ZeroCrossR = 0;
gaterollerR = 0.0;
gateR = 0.0;

controlAposL = 1.0;
controlAnegL = 1.0;
controlBposL = 1.0;
controlBnegL = 1.0;
targetposL = 1.0;
targetnegL = 1.0;  
avgLA = avgLB = 0.0;
nvgLA = nvgLB = 0.0;

controlAposR = 1.0;
controlAnegR = 1.0;
controlBposR = 1.0;
controlBnegR = 1.0;
targetposR = 1.0;
targetnegR = 1.0;  
avgRA = avgRB = 0.0;
nvgRA = nvgRB = 0.0;

flip = 0;



@slider

A = slider1;
B = slider2;
C = slider3;
D = slider4;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;//

inputgain = (pow(A,5)*35)+1.0;
divisor = (pow(B,4) * 0.01)+0.0005;
divisor /= overallscale;
remainder = divisor;
divisor = 1.0 - divisor;

onthreshold = (pow(C,3)/3)+0.00018;
offthreshold = onthreshold * 1.1;  
release = 0.028331119964586;
absmax = 220.9;

wet = D;


@sample
inputSampleL = spl0;
inputSampleR = spl1;



drySampleL = inputSampleL;
drySampleR = inputSampleR;

//begin compressor
//begin L
inputSampleL *= inputgain;
inputpos = inputSampleL + 1.0;    
(inputpos < 0.0) ? inputpos = 0.0;
outputpos = inputpos / 2.0;
(outputpos > 1.0) ? outputpos = 1.0;    
inputpos *= inputpos;
targetposL *= divisor;
targetposL += (inputpos * remainder);
calcpos = 1.0/targetposL;

inputneg = -inputSampleL + 1.0;    
(inputneg < 0.0) ? inputneg = 0.0;
outputneg = inputneg / 2.0;
(outputneg > 1.0) ? outputneg = 1.0;    
inputneg *= inputneg;
targetnegL *= divisor;
targetnegL += (inputneg * remainder);
 calcneg = 1.0/targetnegL;
//now we have mirrored targets for comp
//outputpos and outputneg go from 0 to 1

(inputSampleL > 0) ?
( //working on pos
  (flip == 1) ?
  (
    controlAposL *= divisor;
    controlAposL += (calcpos*remainder);
  ) : (
    controlBposL *= divisor;
    controlBposL += (calcpos*remainder);
  )  
) : ( //working on neg
  (flip == 1) ?
  (
    controlAnegL *= divisor;
    controlAnegL += (calcneg*remainder);
  ) : (
    controlBnegL *= divisor;
    controlBnegL += (calcneg*remainder);
  )
);
//this causes each of the four to update only when active and in the correct 'flip'


(flip == 1) ? totalmultiplier = (controlAposL * outputpos) + (controlAnegL * outputneg)
: totalmultiplier = (controlBposL * outputpos) + (controlBnegL * outputneg);
//this combines the sides according to flip, blending relative to the input value
inputSampleL *= totalmultiplier;
inputSampleL /= inputgain;
//end L

//begin R
inputSampleR *= inputgain;
inputpos = inputSampleR + 1.0;    
(inputpos < 0.0) ? inputpos = 0.0;
outputpos = inputpos / 2.0;
(outputpos > 1.0) ? outputpos = 1.0;    
inputpos *= inputpos;
targetposR *= divisor;
targetposR += (inputpos * remainder);
calcpos = 1.0/targetposR;

inputneg = -inputSampleR + 1.0;    
(inputneg < 0.0) ? inputneg = 0.0;
outputneg = inputneg / 2.0;
(outputneg > 1.0) ? outputneg = 1.0;    
inputneg *= inputneg;
targetnegR *= divisor;
targetnegR += (inputneg * remainder);
calcneg = 1.0/targetnegR;
//now we have mirrored targets for comp
//outputpos and outputneg go from 0 to 1

(inputSampleR > 0) ?
( //working on pos
  (flip == 1) ?
  (
    controlAposR *= divisor;
    controlAposR += (calcpos*remainder);
  ) : (
    controlBposR *= divisor;
    controlBposR += (calcpos*remainder);
  )  
) : ( //working on neg
  (flip == 1) ?
  (
    controlAnegR *= divisor;
    controlAnegR += (calcneg*remainder);
  ) : (
    controlBnegR *= divisor;
    controlBnegR += (calcneg*remainder);
  )
);
//this causes each of the four to update only when active and in the correct 'flip'

(flip == 1) ? totalmultiplier = (controlAposR * outputpos) + (controlAnegR * outputneg)
: totalmultiplier = (controlBposR * outputpos) + (controlBnegR * outputneg);
//this combines the sides according to flip, blending relative to the input value

inputSampleR *= totalmultiplier;
inputSampleR /= inputgain;
//end R
flip = !flip;
//end compressor



//begin Gate
(drySampleL > 0.0) ?
(
  (WasNegativeL == 1) ? ZeroCrossL = absmax * 0.3 | 0;
  WasNegativeL = 0;
) : (
  ZeroCrossL += 1; WasNegativeL = 1;
);

(drySampleR > 0.0) ?
(
  (WasNegativeR == 1) ? ZeroCrossR = absmax * 0.3 | 0;
  WasNegativeR = 0;
) : (
  ZeroCrossR += 1; WasNegativeR = 1;
);

(ZeroCrossL > absmax) ? ZeroCrossL = absmax | 0;
(ZeroCrossR > absmax) ? ZeroCrossR = absmax | 0;

(gateL == 0.0) ?
(
  //if gate is totally silent
  (abs(drySampleL) > onthreshold) ?
  (
    (gaterollerL == 0.0) ? gaterollerL = ZeroCrossL
    : gaterollerL -= release;
    // trigger from total silence only- if we're active then signal must clear offthreshold
  )
  : gaterollerL -= release;
) : (
  //gate is not silent but closing
  (abs(drySampleL) > offthreshold) ?
  (
    (gaterollerL < ZeroCrossL) ? gaterollerL = ZeroCrossL
    : gaterollerL -= release;
    //always trigger if gate is over offthreshold, otherwise close anyway
  )
  : gaterollerL -= release;
);

(gateR == 0.0) ?
(
  //if gate is totally silent
  (abs(drySampleR) > onthreshold) ?
  (
    (gaterollerR == 0.0) ? gaterollerR = ZeroCrossR
    : gaterollerR -= release;
    // trigger from total silence only- if we're active then signal must clear offthreshold
  )
  : gaterollerR -= release;
) : (
  //gate is not silent but closing
  (abs(drySampleR) > offthreshold) ?
  (
    (gaterollerR < ZeroCrossR) ? gaterollerR = ZeroCrossR
    : gaterollerR -= release;
    //always trigger if gate is over offthreshold, otherwise close anyway
  )
  : gaterollerR -= release;
);

(gaterollerL < 0.0) ? gaterollerL = 0.0;
(gaterollerR < 0.0) ? gaterollerR = 0.0;

(gaterollerL < 1.0) ?
(
  gateL = gaterollerL;
   bridgerectifier = 1-cos(abs(inputSampleL));      
  (inputSampleL > 0) ? inputSampleL = (inputSampleL*gateL)+(bridgerectifier*(1.0-gateL))
  : inputSampleL = (inputSampleL*gateL)-(bridgerectifier*(1.0-gateL));
  (gateL == 0.0) ? inputSampleL = 0.0;      
) : gateL = 1.0;

(gaterollerR < 1.0) ?
(
  gateR = gaterollerR;
   bridgerectifier = 1-cos(abs(inputSampleR));      
  (inputSampleR > 0) ? inputSampleR = (inputSampleR*gateR)+(bridgerectifier*(1.0-gateR))
  : inputSampleR = (inputSampleR*gateR)-(bridgerectifier*(1.0-gateR));
  (gateR == 0.0) ? inputSampleR = 0.0;      
) : gateR = 1.0;


(wet != 1.0) ? (
  inputSampleL = (inputSampleL * wet) + (drySampleL * (1.0-wet));
  inputSampleR = (inputSampleR * wet) + (drySampleR * (1.0-wet));
);



spl0 = inputSampleL;
spl1 = inputSampleR;
