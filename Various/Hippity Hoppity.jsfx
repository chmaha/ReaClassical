Version: 1.0
desc:Hippity Hoppity Lo-Fi (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Pockey2" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Pockey2 (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,1,0.01>DeFreq
slider2:12<4,16,0.01>DeRez
slider3:1<0,1,0.01>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

GR_AW = $phi - 1; // Golden Ratio - 1
 
@slider 

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

freq = floor(pow(slider1,3)*32.0*overallscale);
rez = slider2;
rezFactor = pow(2,rez) | 0;
wet = slider3;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

drySampleL = inputSampleL;
drySampleR = inputSampleR;
    
(inputSampleL > 1.0) ? inputSampleL = 1.0; (inputSampleL < -1.0) ? inputSampleL = -1.0;
(inputSampleL > 0) ? inputSampleL = log(1.0+(255*abs(inputSampleL)))/log(255);
(inputSampleL < 0) ? inputSampleL = -log(1.0+(255*abs(inputSampleL)))/log(255);

(inputSampleR > 1.0) ? inputSampleR = 1.0; (inputSampleR < -1.0) ? inputSampleR = -1.0;
(inputSampleR > 0) ? inputSampleR = log(1.0+(255*abs(inputSampleR)))/log(255);
(inputSampleR < 0) ? inputSampleR = -log(1.0+(255*abs(inputSampleR)))/log(255);

inputSampleL *= rezFactor;
inputSampleR *= rezFactor;
(inputSampleL > 0) ? inputSampleL = floor(inputSampleL);
(inputSampleL < 0) ? inputSampleL = -floor(-inputSampleL);
(inputSampleR > 0) ? inputSampleR = floor(inputSampleR);
(inputSampleR < 0) ? inputSampleR = -floor(-inputSampleR);
inputSampleL /= rezFactor;
inputSampleR /= rezFactor;
    
(inputSampleL > 1.0) ? inputSampleL = 1.0; (inputSampleL < -1.0) ? inputSampleL = -1.0;
(inputSampleL > 0) ? inputSampleL = (pow(256,abs(inputSampleL))-1.0) / 255;
(inputSampleL < 0) ? inputSampleL = -(pow(256,abs(inputSampleL))-1.0) / 255;

(inputSampleR > 1.0) ? inputSampleR = 1.0; (inputSampleR < -1.0) ? inputSampleR = -1.0;
(inputSampleR > 0) ? inputSampleR = (pow(256,abs(inputSampleR))-1.0) / 255;
(inputSampleR < 0) ? inputSampleR = -(pow(256,abs(inputSampleR))-1.0) / 255;

blurL = GR_AW-(abs(inputSampleL - lastSampleL)*overallscale);
(blurL < 0.0) ? blurL = 0.0;
blurR = GR_AW-(abs(inputSampleR - lastSampleR)*overallscale);
(blurR < 0.0) ? blurR = 0.0;

(position < 1) ? 
(
  position = freq;
  heldSampleL = inputSampleL;      
  heldSampleR = inputSampleR;      
);
inputSampleL = heldSampleL;
inputSampleR = heldSampleR;
lastSampleL = drySampleL;
lastSampleR = drySampleR;
position-=1;

inputSampleL = (inputSampleL * blurL) + (previousHeldL * (1.0-blurL));
inputSampleR = (inputSampleR * blurR) + (previousHeldR * (1.0-blurR));
previousHeldL = heldSampleL;
previousHeldR = heldSampleR;

(wet !=1.0) ? (
  inputSampleL = (inputSampleL * wet) + (drySampleL * (1.0-wet));
  inputSampleR = (inputSampleR * wet) + (drySampleR * (1.0-wet));
);

spl0 = inputSampleL;
spl1 = inputSampleR;

