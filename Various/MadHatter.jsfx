Version: 1.0
desc:Mad Hatter Compressor (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Pop2" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Pop2 (MIT License)
  JSFX version released under GPLv3 license

slider1:0.5<0,1,0.01>Compress
slider2:0.5<0,1,0.01>Attack
slider3:0.5<0,1,0.01>Release
slider4:0.5<0,1,0.01>Drive
slider5:1<0,1,0.01>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
intermediateL = freemem; freemem+=16;
intermediateR = freemem; freemem+=16;

muNewSpeedL = 1000.0;
muSpeedAL = 1000.0;
muSpeedBL = 1000.0;
muCoefficientAL = 1.0;
muCoefficientBL = 1.0;

muNewSpeedR = 1000.0;
muSpeedAR = 1000.0;
muSpeedBR = 1000.0;
muCoefficientAR = 1.0;
muCoefficientBR = 1.0;

@slider

A = slider1;
B = slider2;
C = slider3;
D = slider4;
E = slider5;


@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

spacing = floor(overallscale);
(spacing < 1) ? spacing = 1; (spacing > 16) ? spacing = 16;

threshold = 1.0 - ((1.0-pow(1.0-A,2))*0.9);
attack = ((pow(B,4)*100000.0)+10.0)*overallscale;
release = ((pow(C,5)*2000000.0)+20.0)*overallscale;
maxRelease = release * 4.0;
muPreGain = 1.0/threshold;
muMakeupGain = sqrt(1.0 / threshold)*D;
wet = E;


@sample
inputSampleL = spl0;
inputSampleR = spl1;

drySampleL = inputSampleL;
drySampleR = inputSampleR;

inputSampleL *= muPreGain;
inputSampleR *= muPreGain;

(flip) ? (
  (abs(inputSampleL) > threshold) ? (
    muVaryL = threshold / abs(inputSampleL);
    muAttackL = sqrt(abs(muSpeedAL));
    muCoefficientAL = muCoefficientAL * (muAttackL-1.0);
    (muVaryL < threshold) ? muCoefficientAL = muCoefficientAL + threshold
    : muCoefficientAL = muCoefficientAL + muVaryL;
    muCoefficientAL = muCoefficientAL / muAttackL;
    muNewSpeedL = muSpeedAL * (muSpeedAL-1.0);
    muNewSpeedL = muNewSpeedL + release;
    muSpeedAL = muNewSpeedL / muSpeedAL;
    (muSpeedAL > maxRelease) ? muSpeedAL = maxRelease;
  ) : (
    muCoefficientAL = muCoefficientAL * ((muSpeedAL * muSpeedAL)-1.0);
    muCoefficientAL = muCoefficientAL + 1.0;
    muCoefficientAL = muCoefficientAL / (muSpeedAL * muSpeedAL);
    muNewSpeedL = muSpeedAL * (muSpeedAL-1.0);
    muNewSpeedL = muNewSpeedL + attack;
    muSpeedAL = muNewSpeedL / muSpeedAL;);
) : (
  (abs(inputSampleL) > threshold) ? (
    muVaryL = threshold / abs(inputSampleL);
    muAttackL = sqrt(abs(muSpeedBL));
    muCoefficientBL = muCoefficientBL * (muAttackL-1);
    (muVaryL < threshold) ? muCoefficientBL = muCoefficientBL + threshold
    : muCoefficientBL = muCoefficientBL + muVaryL;
    muCoefficientBL = muCoefficientBL / muAttackL;
    muNewSpeedL = muSpeedBL * (muSpeedBL-1.0);
    muNewSpeedL = muNewSpeedL + release;
    muSpeedBL = muNewSpeedL / muSpeedBL;
    (muSpeedBL > maxRelease) ? muSpeedBL = maxRelease;
  ) : (
    muCoefficientBL = muCoefficientBL * ((muSpeedBL * muSpeedBL)-1.0);
    muCoefficientBL = muCoefficientBL + 1.0;
    muCoefficientBL = muCoefficientBL / (muSpeedBL * muSpeedBL);
    muNewSpeedL = muSpeedBL * (muSpeedBL-1.0);
    muNewSpeedL = muNewSpeedL + attack;
    muSpeedBL = muNewSpeedL / muSpeedBL;
  )
);

(flip) ? (
  (abs(inputSampleR) > threshold) ? (
    muVaryR = threshold / abs(inputSampleR);
    muAttackR = sqrt(abs(muSpeedAR));
    muCoefficientAR = muCoefficientAR * (muAttackR-1.0);
    (muVaryR < threshold) ? muCoefficientAR = muCoefficientAR + threshold
    : muCoefficientAR = muCoefficientAR + muVaryR;
    muCoefficientAR = muCoefficientAR / muAttackR;
    muNewSpeedR = muSpeedAR * (muSpeedAR-1.0);
    muNewSpeedR = muNewSpeedR + release;
    muSpeedAR = muNewSpeedR / muSpeedAR;
    (muSpeedAR > maxRelease) ? muSpeedAR = maxRelease;
  ) : (
    muCoefficientAR = muCoefficientAR * ((muSpeedAR * muSpeedAR)-1.0);
    muCoefficientAR = muCoefficientAR + 1.0;
    muCoefficientAR = muCoefficientAR / (muSpeedAR * muSpeedAR);
    muNewSpeedR = muSpeedAR * (muSpeedAR-1.0);
    muNewSpeedR = muNewSpeedR + attack;
    muSpeedAR = muNewSpeedR / muSpeedAR;
  )
) : (
  (abs(inputSampleR) > threshold) ? (
    muVaryR = threshold / abs(inputSampleR);
    muAttackR = sqrt(abs(muSpeedBR));
    muCoefficientBR = muCoefficientBR * (muAttackR-1);
    (muVaryR < threshold) ? muCoefficientBR = muCoefficientBR + threshold
    : muCoefficientBR = muCoefficientBR + muVaryR;
    muCoefficientBR = muCoefficientBR / muAttackR;
    muNewSpeedR = muSpeedBR * (muSpeedBR-1.0);
    muNewSpeedR = muNewSpeedR + release;
    muSpeedBR = muNewSpeedR / muSpeedBR;
    (muSpeedBR > maxRelease) ? muSpeedBR = maxRelease;
  ) : (
    muCoefficientBR = muCoefficientBR * ((muSpeedBR * muSpeedBR)-1.0);
    muCoefficientBR = muCoefficientBR + 1.0;
    muCoefficientBR = muCoefficientBR / (muSpeedBR * muSpeedBR);
    muNewSpeedR = muSpeedBR * (muSpeedBR-1.0);
    muNewSpeedR = muNewSpeedR + attack;
    muSpeedBR = muNewSpeedR / muSpeedBR;
  )
);

(flip) ? (
  inputSampleL *= pow(muCoefficientAL,2);
  inputSampleR *= pow(muCoefficientAR,2);
) : (
  inputSampleL *= pow(muCoefficientBL,2);
  inputSampleR *= pow(muCoefficientBR,2);
);
inputSampleL *= muMakeupGain;
inputSampleR *= muMakeupGain;
flip = !flip;

(inputSampleL > 4.0) ? inputSampleL = 4.0; (inputSampleL < -4.0) ? inputSampleL = -4.0;
(wasPosClipL == 1) ? (
  (inputSampleL<lastSampleL) ? lastSampleL=0.7058208+(inputSampleL*0.2609148)
  : lastSampleL = 0.2491717+(lastSampleL*0.7390851);
); wasPosClipL = 0;
(inputSampleL>0.9549925859) ? (wasPosClipL=1;inputSampleL=0.7058208+(lastSampleL*0.2609148););
(wasNegClipL == 1) ? ( 
  (inputSampleL > lastSampleL) ? lastSampleL=-0.7058208+(inputSampleL*0.2609148)
  : lastSampleL=-0.2491717+(lastSampleL*0.7390851);
); wasNegClipL = 0;
(inputSampleL<-0.9549925859) ? (wasNegClipL=1;inputSampleL=-0.7058208+(lastSampleL*0.2609148););
intermediateL[spacing] = inputSampleL;
    inputSampleL = lastSampleL; 
x = spacing; while(x > 0) (intermediateL[x-1] = intermediateL[x]; X-=1;);
lastSampleL = intermediateL[0]; 

(inputSampleR > 4.0) ? inputSampleR = 4.0; (inputSampleR < -4.0) ? inputSampleR = -4.0;
(wasPosClipR == 1) ?  ( 
  (inputSampleR<lastSampleR) ? lastSampleR=0.7058208+(inputSampleR*0.2609148)
  : lastSampleR = 0.2491717+(lastSampleR*0.7390851);
); wasPosClipR = 0;
(inputSampleR>0.9549925859) ? (wasPosClipR=1;inputSampleR=0.7058208+(lastSampleR*0.2609148););
(wasNegClipR == 1) ? ( 
  (inputSampleR > lastSampleR) ? lastSampleR=-0.7058208+(inputSampleR*0.2609148)
  : lastSampleR=-0.2491717+(lastSampleR*0.7390851);
); wasNegClipR = 0;
(inputSampleR<-0.9549925859) ? (wasNegClipR=1;inputSampleR=-0.7058208+(lastSampleR*0.2609148););
intermediateR[spacing] = inputSampleR;
    inputSampleR = lastSampleR;
x = spacing; while(x > 0) (intermediateR[x-1] = intermediateR[x];x-=1;);
lastSampleR = intermediateR[0];

(wet<1.0) ? (
  inputSampleL = (drySampleL*(1.0-wet))+(inputSampleL*wet);
  inputSampleR = (drySampleR*(1.0-wet))+(inputSampleR*wet);
);

spl0 = inputSampleL;
spl1 = inputSampleR;
