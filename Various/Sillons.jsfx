Version: 1.2
desc:Sillons Vinyl Emulation (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "ToVinyl4" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/ToVinyl4 (MIT License)
  JSFX version released under GPLv3 license

slider1:22<10,300,0.01>Mid Highpass (Hz)
slider2:44<10,300,0.01>Side Highpass (Hz)
slider3:0.32<0,1,0.01>High Freq Limiter
slider4:0.064<0,1,0.001>Groove Wear

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
aMid = freemem; freemem+=11;
bMid = freemem; freemem+=11;
fMid = freemem; freemem+=11;   
aSide = freemem; freemem+=11;
bSide = freemem; freemem+=11;
fSide = freemem; freemem+=11;  

UINT32_MAX = 4294967295;
M_PI = 3.1415926535897932384626433;

count=0; while(count < 11) (
  aMid[count] = 0.0;
  bMid[count] = 0.0;
  fMid[count] = 0.0;
  aSide[count] = 0.0;
  bSide[count] = 0.0;
  fSide[count] = 0.0;
  count+=1;
);
aMidPrev = 0.0; aSidePrev = 0.0;
bMidPrev = 0.0; bSidePrev = 0.0;
ataLastOutL = ataLastOutR = 0.0;  
midSampleA = 0.0;
midSampleB = 0.0;
midSampleC = 0.0;
midSampleD = 0.0;
midSampleE = 0.0;
midSampleF = 0.0;
midSampleG = 0.0;
midSampleH = 0.0;
midSampleI = 0.0;
midSampleJ = 0.0;
midSampleK = 0.0;
midSampleL = 0.0;
midSampleM = 0.0;
midSampleN = 0.0;
midSampleO = 0.0;
midSampleP = 0.0;
midSampleQ = 0.0;
midSampleR = 0.0;
midSampleS = 0.0;
midSampleT = 0.0;
midSampleU = 0.0;
midSampleV = 0.0;
midSampleW = 0.0;
midSampleX = 0.0;
midSampleY = 0.0;
midSampleZ = 0.0;

sideSampleA = 0.0;
sideSampleB = 0.0;
sideSampleC = 0.0;
sideSampleD = 0.0;
sideSampleE = 0.0;
sideSampleF = 0.0;
sideSampleG = 0.0;
sideSampleH = 0.0;
sideSampleI = 0.0;
sideSampleJ = 0.0;
sideSampleK = 0.0;
sideSampleL = 0.0;
sideSampleM = 0.0;
sideSampleN = 0.0;
sideSampleO = 0.0;
sideSampleP = 0.0;
sideSampleQ = 0.0;
sideSampleR = 0.0;
sideSampleS = 0.0;
sideSampleT = 0.0;
sideSampleU = 0.0;
sideSampleV = 0.0;
sideSampleW = 0.0;
sideSampleX = 0.0;
sideSampleY = 0.0;
sideSampleZ = 0.0;
s1L = s2L = s3L = 0.0;
o1L = o2L = o3L = 0.0;
m1L = m2L = desL = 0.0;
s1R = s2R = s3R = 0.0;
o1R = o2R = o3R = 0.0;
m1R = m2R = desR = 0.0;

A = 0.203419;  //22.0 hz = ((A*A)*290)+10  (A*A)*290 = 12   (A*A) = 0.0413793  sqrt() = 0.203419
B = 0.3424051; //44.0 hz = ((B*B)*290)+10  (B*B)*290 = 34   (B*B) = 0.1172413  sqrt() = 0.3424051
C = 0.32;
D = 0.064;


@slider
A = sqrt((slider1-10.0)/290.0);
B = sqrt((slider2-10.0)/290.0);
C = slider3;
D = slider4;


@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

fusswithscale = 50000; //corrected
cutofffreq = ((A*A)*290.0)+10.0;
resonance = 0.992;

midAmount = cutofffreq/fusswithscale;
midAmount /= overallscale;

midAmountA = midAmount * resonance;
midAmountB = midAmountA * resonance;
midAmountC = midAmountB * resonance;
midAmountD = midAmountC * resonance;
midAmountE = midAmountD * resonance;
midAmountF = midAmountE * resonance;
midAmountG = midAmountF * resonance;
midAmountH = midAmountG * resonance;
midAmountI = midAmountH * resonance;
midAmountJ = midAmountI * resonance;
midAmountK = midAmountJ * resonance;
midAmountL = midAmountK * resonance;
midAmountM = midAmountL * resonance;
midAmountN = midAmountM * resonance;
midAmountO = midAmountN * resonance;
midAmountP = midAmountO * resonance;
midAmountQ = midAmountP * resonance;
midAmountR = midAmountQ * resonance;
midAmountS = midAmountR * resonance;
midAmountT = midAmountS * resonance;
midAmountU = midAmountT * resonance;
midAmountV = midAmountU * resonance;
midAmountW = midAmountV * resonance;
midAmountX = midAmountW * resonance;
midAmountY = midAmountX * resonance;
midAmountZ = midAmountY * resonance;


midaltAmountA = 1.0 - midAmountA;
midaltAmountB = 1.0 - midAmountB;
midaltAmountC = 1.0 - midAmountC;
midaltAmountD = 1.0 - midAmountD;
midaltAmountE = 1.0 - midAmountE;
midaltAmountF = 1.0 - midAmountF;
midaltAmountG = 1.0 - midAmountG;
midaltAmountH = 1.0 - midAmountH;
midaltAmountI = 1.0 - midAmountI;
midaltAmountJ = 1.0 - midAmountJ;
midaltAmountK = 1.0 - midAmountK;
midaltAmountL = 1.0 - midAmountL;
midaltAmountM = 1.0 - midAmountM;
midaltAmountN = 1.0 - midAmountN;
midaltAmountO = 1.0 - midAmountO;
midaltAmountP = 1.0 - midAmountP;
midaltAmountQ = 1.0 - midAmountQ;
midaltAmountR = 1.0 - midAmountR;
midaltAmountS = 1.0 - midAmountS;
midaltAmountT = 1.0 - midAmountT;
midaltAmountU = 1.0 - midAmountU;
midaltAmountV = 1.0 - midAmountV;
midaltAmountW = 1.0 - midAmountW;
midaltAmountX = 1.0 - midAmountX;
midaltAmountY = 1.0 - midAmountY;
midaltAmountZ = 1.0 - midAmountZ;  

cutofffreq = ((B*B)*290.0)+10.0;
sideAmount = cutofffreq/fusswithscale;
sideAmount /= overallscale;
sideAmountA = sideAmount * resonance;
sideAmountB = sideAmountA * resonance;
sideAmountC = sideAmountB * resonance;
sideAmountD = sideAmountC * resonance;
sideAmountE = sideAmountD * resonance;
sideAmountF = sideAmountE * resonance;
sideAmountG = sideAmountF * resonance;
sideAmountH = sideAmountG * resonance;
sideAmountI = sideAmountH * resonance;
sideAmountJ = sideAmountI * resonance;
sideAmountK = sideAmountJ * resonance;
sideAmountL = sideAmountK * resonance;
sideAmountM = sideAmountL * resonance;
sideAmountN = sideAmountM * resonance;
sideAmountO = sideAmountN * resonance;
sideAmountP = sideAmountO * resonance;
sideAmountQ = sideAmountP * resonance;
sideAmountR = sideAmountQ * resonance;
sideAmountS = sideAmountR * resonance;
sideAmountT = sideAmountS * resonance;
sideAmountU = sideAmountT * resonance;
sideAmountV = sideAmountU * resonance;
sideAmountW = sideAmountV * resonance;
sideAmountX = sideAmountW * resonance;
sideAmountY = sideAmountX * resonance;
sideAmountZ = sideAmountY * resonance;


sidealtAmountA = 1.0 - sideAmountA;
sidealtAmountB = 1.0 - sideAmountB;
sidealtAmountC = 1.0 - sideAmountC;
sidealtAmountD = 1.0 - sideAmountD;
sidealtAmountE = 1.0 - sideAmountE;
sidealtAmountF = 1.0 - sideAmountF;
sidealtAmountG = 1.0 - sideAmountG;
sidealtAmountH = 1.0 - sideAmountH;
sidealtAmountI = 1.0 - sideAmountI;
sidealtAmountJ = 1.0 - sideAmountJ;
sidealtAmountK = 1.0 - sideAmountK;
sidealtAmountL = 1.0 - sideAmountL;
sidealtAmountM = 1.0 - sideAmountM;
sidealtAmountN = 1.0 - sideAmountN;
sidealtAmountO = 1.0 - sideAmountO;
sidealtAmountP = 1.0 - sideAmountP;
sidealtAmountQ = 1.0 - sideAmountQ;
sidealtAmountR = 1.0 - sideAmountR;
sidealtAmountS = 1.0 - sideAmountS;
sidealtAmountT = 1.0 - sideAmountT;
sidealtAmountU = 1.0 - sideAmountU;
sidealtAmountV = 1.0 - sideAmountV;
sidealtAmountW = 1.0 - sideAmountW;
sidealtAmountX = 1.0 - sideAmountX;
sidealtAmountY = 1.0 - sideAmountY;
sidealtAmountZ = 1.0 - sideAmountZ;
tempMid;
tempSide;

intensity = pow(C,3)*(32/overallscale);
inputSampleL;
inputSampleR;
senseL;
senseR;
smoothL;
smoothR;
mid;
side;

overallscale = (D*9.0)+1.0;
gain = overallscale;
//mid groove wear
(gain > 1.0) ? (fMid[0] = 1.0; gain -= 1.0;) : (fMid[0] = gain; gain = 0.0;);
(gain > 1.0) ? (fMid[1] = 1.0; gain -= 1.0;) : (fMid[1] = gain; gain = 0.0;);
(gain > 1.0) ? (fMid[2] = 1.0; gain -= 1.0;) : (fMid[2] = gain; gain = 0.0;);
(gain > 1.0) ? (fMid[3] = 1.0; gain -= 1.0;) : (fMid[3] = gain; gain = 0.0;);
(gain > 1.0) ? (fMid[4] = 1.0; gain -= 1.0;) : (fMid[4] = gain; gain = 0.0;);
(gain > 1.0) ? (fMid[5] = 1.0; gain -= 1.0;) : (fMid[5] = gain; gain = 0.0;);
(gain > 1.0) ? (fMid[6] = 1.0; gain -= 1.0;) : (fMid[6] = gain; gain = 0.0;);
(gain > 1.0) ? (fMid[7] = 1.0; gain -= 1.0;) : (fMid[7] = gain; gain = 0.0;);
(gain > 1.0) ? (fMid[8] = 1.0; gain -= 1.0;) : (fMid[8] = gain; gain = 0.0;);
(gain > 1.0) ? (fMid[9] = 1.0; gain -= 1.0;) : (fMid[9] = gain; gain = 0.0;);
//there, now we have a neat little moving average with remainders

(overallscale < 1.0) ? overallscale = 1.0;
fMid[0] /= overallscale;
fMid[1] /= overallscale;
fMid[2] /= overallscale;
fMid[3] /= overallscale;
fMid[4] /= overallscale;
fMid[5] /= overallscale;
fMid[6] /= overallscale;
fMid[7] /= overallscale;
fMid[8] /= overallscale;
fMid[9] /= overallscale;
//and now it's neatly scaled, too

overallscale = (D*4.5)+1.0;
gain = overallscale;
//side groove wear
(gain > 1.0) ? (fSide[0] = 1.0; gain -= 1.0;) : (fSide[0] = gain; gain = 0.0;);
(gain > 1.0) ? (fSide[1] = 1.0; gain -= 1.0;) : (fSide[1] = gain; gain = 0.0;);
(gain > 1.0) ? (fSide[2] = 1.0; gain -= 1.0;) : (fSide[2] = gain; gain = 0.0;);
(gain > 1.0) ? (fSide[3] = 1.0; gain -= 1.0;) : (fSide[3] = gain; gain = 0.0;);
(gain > 1.0) ? (fSide[4] = 1.0; gain -= 1.0;) : (fSide[4] = gain; gain = 0.0;);
(gain > 1.0) ? (fSide[5] = 1.0; gain -= 1.0;) : (fSide[5] = gain; gain = 0.0;);
(gain > 1.0) ? (fSide[6] = 1.0; gain -= 1.0;) : (fSide[6] = gain; gain = 0.0;);
(gain > 1.0) ? (fSide[7] = 1.0; gain -= 1.0;) : (fSide[7] = gain; gain = 0.0;);
(gain > 1.0) ? (fSide[8] = 1.0; gain -= 1.0;) : (fSide[8] = gain; gain = 0.0;);
(gain > 1.0) ? (fSide[9] = 1.0; gain -= 1.0;) : (fSide[9] = gain; gain = 0.0;);
//there, now we have a neat little moving average with remainders

(overallscale < 1.0) ? overallscale = 1.0;
fSide[0] /= overallscale;
fSide[1] /= overallscale;
fSide[2] /= overallscale;
fSide[3] /= overallscale;
fSide[4] /= overallscale;
fSide[5] /= overallscale;
fSide[6] /= overallscale;
fSide[7] /= overallscale;
fSide[8] /= overallscale;
fSide[9] /= overallscale;
//and now it's neatly scaled, too

@sample
inputSampleL = spl0;
inputSampleR = spl1;


s3L = s2L;
s2L = s1L;
s1L = inputSampleL;
smoothL = (s3L + s2L + s1L) / 3.0;
m1L = (s1L-s2L)*((s1L-s2L)/1.3);
m2L = (s2L-s3L)*((s1L-s2L)/1.3);
senseL = abs(m1L-m2L);
senseL = (intensity*intensity*senseL);
o3L = o2L;
o2L = o1L;
o1L = senseL;
(o2L > senseL) ? senseL = o2L;
(o3L > senseL) ? senseL = o3L;
//sense on the most intense

s3R = s2R;
s2R = s1R;
s1R = inputSampleR;
smoothR = (s3R + s2R + s1R) / 3.0;
m1R = (s1R-s2R)*((s1R-s2R)/1.3);
m2R = (s2R-s3R)*((s1R-s2R)/1.3);
senseR = abs(m1R-m2R);
senseR = (intensity*intensity*senseR);
o3R = o2R;
o2R = o1R;
o1R = senseR;
(o2R > senseR) ? senseR = o2R;
(o3R > senseR) ? senseR = o3R;
//sense on the most intense


(senseL > 1.0) ? senseL = 1.0;
(senseR > 1.0) ? senseR = 1.0;

inputSampleL *= (1.0-senseL);
inputSampleR *= (1.0-senseR);

inputSampleL += (smoothL*senseL);
inputSampleR += (smoothR*senseR);
//we need to do the de-ess before anything else, and feed the result into the antialiasing-
//but the trigger runs off just the input samples

tempMid = mid = inputSampleL + inputSampleR;
tempSide = side = inputSampleL - inputSampleR;
//assign mid and side.

tempSample = mid;
midSampleA = (midSampleA * midaltAmountA) + (tempSample * midAmountA); tempSample -= midSampleA; 
midSampleB = (midSampleB * midaltAmountB) + (tempSample * midAmountB); tempSample -= midSampleB; 
midSampleC = (midSampleC * midaltAmountC) + (tempSample * midAmountC); tempSample -= midSampleC; 
midSampleD = (midSampleD * midaltAmountD) + (tempSample * midAmountD); tempSample -= midSampleD; 
midSampleE = (midSampleE * midaltAmountE) + (tempSample * midAmountE); tempSample -= midSampleE; 
midSampleF = (midSampleF * midaltAmountF) + (tempSample * midAmountF); tempSample -= midSampleF; 
midSampleG = (midSampleG * midaltAmountG) + (tempSample * midAmountG); tempSample -= midSampleG; 
midSampleH = (midSampleH * midaltAmountH) + (tempSample * midAmountH); tempSample -= midSampleH; 
midSampleI = (midSampleI * midaltAmountI) + (tempSample * midAmountI); tempSample -= midSampleI; 
midSampleJ = (midSampleJ * midaltAmountJ) + (tempSample * midAmountJ); tempSample -= midSampleJ; 
midSampleK = (midSampleK * midaltAmountK) + (tempSample * midAmountK); tempSample -= midSampleK; 
midSampleL = (midSampleL * midaltAmountL) + (tempSample * midAmountL); tempSample -= midSampleL; 
midSampleM = (midSampleM * midaltAmountM) + (tempSample * midAmountM); tempSample -= midSampleM; 
midSampleN = (midSampleN * midaltAmountN) + (tempSample * midAmountN); tempSample -= midSampleN; 
midSampleO = (midSampleO * midaltAmountO) + (tempSample * midAmountO); tempSample -= midSampleO; 
midSampleP = (midSampleP * midaltAmountP) + (tempSample * midAmountP); tempSample -= midSampleP; 
midSampleQ = (midSampleQ * midaltAmountQ) + (tempSample * midAmountQ); tempSample -= midSampleQ; 
midSampleR = (midSampleR * midaltAmountR) + (tempSample * midAmountR); tempSample -= midSampleR; 
midSampleS = (midSampleS * midaltAmountS) + (tempSample * midAmountS); tempSample -= midSampleS; 
midSampleT = (midSampleT * midaltAmountT) + (tempSample * midAmountT); tempSample -= midSampleT; 
midSampleU = (midSampleU * midaltAmountU) + (tempSample * midAmountU); tempSample -= midSampleU; 
midSampleV = (midSampleV * midaltAmountV) + (tempSample * midAmountV); tempSample -= midSampleV; 
midSampleW = (midSampleW * midaltAmountW) + (tempSample * midAmountW); tempSample -= midSampleW; 
midSampleX = (midSampleX * midaltAmountX) + (tempSample * midAmountX); tempSample -= midSampleX; 
midSampleY = (midSampleY * midaltAmountY) + (tempSample * midAmountY); tempSample -= midSampleY; 
midSampleZ = (midSampleZ * midaltAmountZ) + (tempSample * midAmountZ); tempSample -= midSampleZ; 
correction = midCorrection = mid - tempSample;
mid -= correction;

tempSample = side;
sideSampleA = (sideSampleA * sidealtAmountA) + (tempSample * sideAmountA); tempSample -= sideSampleA; 
sideSampleB = (sideSampleB * sidealtAmountB) + (tempSample * sideAmountB); tempSample -= sideSampleB; 
sideSampleC = (sideSampleC * sidealtAmountC) + (tempSample * sideAmountC); tempSample -= sideSampleC; 
sideSampleD = (sideSampleD * sidealtAmountD) + (tempSample * sideAmountD); tempSample -= sideSampleD; 
sideSampleE = (sideSampleE * sidealtAmountE) + (tempSample * sideAmountE); tempSample -= sideSampleE; 
sideSampleF = (sideSampleF * sidealtAmountF) + (tempSample * sideAmountF); tempSample -= sideSampleF; 
sideSampleG = (sideSampleG * sidealtAmountG) + (tempSample * sideAmountG); tempSample -= sideSampleG; 
sideSampleH = (sideSampleH * sidealtAmountH) + (tempSample * sideAmountH); tempSample -= sideSampleH; 
sideSampleI = (sideSampleI * sidealtAmountI) + (tempSample * sideAmountI); tempSample -= sideSampleI; 
sideSampleJ = (sideSampleJ * sidealtAmountJ) + (tempSample * sideAmountJ); tempSample -= sideSampleJ; 
sideSampleK = (sideSampleK * sidealtAmountK) + (tempSample * sideAmountK); tempSample -= sideSampleK; 
sideSampleL = (sideSampleL * sidealtAmountL) + (tempSample * sideAmountL); tempSample -= sideSampleL; 
sideSampleM = (sideSampleM * sidealtAmountM) + (tempSample * sideAmountM); tempSample -= sideSampleM; 
sideSampleN = (sideSampleN * sidealtAmountN) + (tempSample * sideAmountN); tempSample -= sideSampleN; 
sideSampleO = (sideSampleO * sidealtAmountO) + (tempSample * sideAmountO); tempSample -= sideSampleO; 
sideSampleP = (sideSampleP * sidealtAmountP) + (tempSample * sideAmountP); tempSample -= sideSampleP; 
sideSampleQ = (sideSampleQ * sidealtAmountQ) + (tempSample * sideAmountQ); tempSample -= sideSampleQ; 
sideSampleR = (sideSampleR * sidealtAmountR) + (tempSample * sideAmountR); tempSample -= sideSampleR; 
sideSampleS = (sideSampleS * sidealtAmountS) + (tempSample * sideAmountS); tempSample -= sideSampleS; 
sideSampleT = (sideSampleT * sidealtAmountT) + (tempSample * sideAmountT); tempSample -= sideSampleT; 
sideSampleU = (sideSampleU * sidealtAmountU) + (tempSample * sideAmountU); tempSample -= sideSampleU; 
sideSampleV = (sideSampleV * sidealtAmountV) + (tempSample * sideAmountV); tempSample -= sideSampleV; 
sideSampleW = (sideSampleW * sidealtAmountW) + (tempSample * sideAmountW); tempSample -= sideSampleW; 
sideSampleX = (sideSampleX * sidealtAmountX) + (tempSample * sideAmountX); tempSample -= sideSampleX; 
sideSampleY = (sideSampleY * sidealtAmountY) + (tempSample * sideAmountY); tempSample -= sideSampleY; 
sideSampleZ = (sideSampleZ * sidealtAmountZ) + (tempSample * sideAmountZ); tempSample -= sideSampleZ; 
correction = sideCorrection = side - tempSample;
side -= correction;


aMid[9] = aMid[8]; aMid[8] = aMid[7]; aMid[7] = aMid[6]; aMid[6] = aMid[5];
aMid[5] = aMid[4]; aMid[4] = aMid[3]; aMid[3] = aMid[2]; aMid[2] = aMid[1];
aMid[1] = aMid[0]; aMid[0] = accumulatorSample = (mid-aMidPrev);

accumulatorSample *= fMid[0];
accumulatorSample += (aMid[1] * fMid[1]);
accumulatorSample += (aMid[2] * fMid[2]);
accumulatorSample += (aMid[3] * fMid[3]);
accumulatorSample += (aMid[4] * fMid[4]);
accumulatorSample += (aMid[5] * fMid[5]);
accumulatorSample += (aMid[6] * fMid[6]);
accumulatorSample += (aMid[7] * fMid[7]);
accumulatorSample += (aMid[8] * fMid[8]);
accumulatorSample += (aMid[9] * fMid[9]);
//we are doing our repetitive calculations on a separate value
correction = (mid-aMidPrev) - accumulatorSample;
midCorrection += correction;
aMidPrev = mid;    
mid -= correction;

aSide[9] = aSide[8]; aSide[8] = aSide[7]; aSide[7] = aSide[6]; aSide[6] = aSide[5];
aSide[5] = aSide[4]; aSide[4] = aSide[3]; aSide[3] = aSide[2]; aSide[2] = aSide[1];
aSide[1] = aSide[0]; aSide[0] = accumulatorSample = (side-aSidePrev);

accumulatorSample *= fSide[0];
accumulatorSample += (aSide[1] * fSide[1]);
accumulatorSample += (aSide[2] * fSide[2]);
accumulatorSample += (aSide[3] * fSide[3]);
accumulatorSample += (aSide[4] * fSide[4]);
accumulatorSample += (aSide[5] * fSide[5]);
accumulatorSample += (aSide[6] * fSide[6]);
accumulatorSample += (aSide[7] * fSide[7]);
accumulatorSample += (aSide[8] * fSide[8]);
accumulatorSample += (aSide[9] * fSide[9]);
//we are doing our repetitive calculations on a separate value    
correction = (side-aSidePrev) - accumulatorSample;
sideCorrection += correction;
aSidePrev = side;    
side -= correction;


bMid[9] = bMid[8]; bMid[8] = bMid[7]; bMid[7] = bMid[6]; bMid[6] = bMid[5];
bMid[5] = bMid[4]; bMid[4] = bMid[3]; bMid[3] = bMid[2]; bMid[2] = bMid[1];
bMid[1] = bMid[0]; bMid[0] = accumulatorSample = (mid-bMidPrev);

accumulatorSample *= fMid[0];
accumulatorSample += (bMid[1] * fMid[1]);
accumulatorSample += (bMid[2] * fMid[2]);
accumulatorSample += (bMid[3] * fMid[3]);
accumulatorSample += (bMid[4] * fMid[4]);
accumulatorSample += (bMid[5] * fMid[5]);
accumulatorSample += (bMid[6] * fMid[6]);
accumulatorSample += (bMid[7] * fMid[7]);
accumulatorSample += (bMid[8] * fMid[8]);
accumulatorSample += (bMid[9] * fMid[9]);
//we are doing our repetitive calculations on a separate value
correction = (mid-bMidPrev) - accumulatorSample;
midCorrection += correction;
bMidPrev = mid;    

bSide[9] = bSide[8]; bSide[8] = bSide[7]; bSide[7] = bSide[6]; bSide[6] = bSide[5];
bSide[5] = bSide[4]; bSide[4] = bSide[3]; bSide[3] = bSide[2]; bSide[2] = bSide[1];
bSide[1] = bSide[0]; bSide[0] = accumulatorSample = (side-bSidePrev);

accumulatorSample *= fSide[0];
accumulatorSample += (bSide[1] * fSide[1]);
accumulatorSample += (bSide[2] * fSide[2]);
accumulatorSample += (bSide[3] * fSide[3]);
accumulatorSample += (bSide[4] * fSide[4]);
accumulatorSample += (bSide[5] * fSide[5]);
accumulatorSample += (bSide[6] * fSide[6]);
accumulatorSample += (bSide[7] * fSide[7]);
accumulatorSample += (bSide[8] * fSide[8]);
accumulatorSample += (bSide[9] * fSide[9]);
//we are doing our repetitive calculations on a separate value    
correction = (side-bSidePrev) - accumulatorSample;
sideCorrection += correction;
bSidePrev = side;    


mid = tempMid - midCorrection;
side = tempSide - sideCorrection;
inputSampleL = (mid+side)/2.0;
inputSampleR = (mid-side)/2.0;

senseL /= 2.0;
senseR /= 2.0;


accumulatorSample = (ataLastOutL*senseL)+(inputSampleL*(1.0-senseL));
ataLastOutL = inputSampleL;
inputSampleL = accumulatorSample;

accumulatorSample = (ataLastOutR*senseR)+(inputSampleR*(1.0-senseR));
ataLastOutR = inputSampleR;
inputSampleR = accumulatorSample;




spl0 = inputSampleL;
spl1 = inputSampleR;

