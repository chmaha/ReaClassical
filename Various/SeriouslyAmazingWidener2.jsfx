Version: 1.3
desc:SAW2 â€” Seriously Amazing Widener 2 (chmaha)
author: chmaha
about:
  SAW2 - Seriously Amazing Widener 2. Uses DSP from airwindows "Srsly2" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Srsly2 (MIT License)
  JSFX version released under GPLv3 license

slider1:0.5<0,1,0.01>Center
slider2:0.5<0,1,0.01>Space
slider3:1<0,1,0.01>Level
slider4:0.5<0,1,0.01>Q
slider5:1<0,1,0.01>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
biquadM2 = freemem; freemem +=11;
biquadM7 = freemem; freemem +=11;
biquadM10 = freemem; freemem +=11;

biquadL3 = freemem; freemem +=11;
biquadL7 = freemem; freemem +=11;
biquadR3 = freemem; freemem +=11;
biquadR7 = freemem; freemem +=11;

biquadS3 = freemem; freemem +=11;
biquadS5 = freemem; freemem +=11;

UINT32_MAX = 4294967295;

@slider

A = slider1;
B = slider2;
C = slider3;
D = slider4;
E = slider5;

@block

sampleRate = srate;
(sampleRate < 22000) ? sampleRate = 22000; 

biquadM2[0] = 2000 / sampleRate; 
biquadM7[0] = 7000 / sampleRate; 
biquadM10[0] = 10000 / sampleRate; 

biquadL3[0] = 3000 / sampleRate; 
biquadL7[0] = 7000 / sampleRate; 
biquadR3[0] = 3000 / sampleRate; 
biquadR7[0] = 7000 / sampleRate; 

biquadS3[0] = 3000 / sampleRate; 
biquadS5[0] = 5000 / sampleRate; 

focusM = 15.0-(A*10.0);
focusS = 21.0-(B*15.0);
Q = D+0.25; //add Q control: from half to intensity
gainM = A*2.0;
gainS = B*2.0;
(gainS > 1.0) ? gainM /= gainS;
(gainM > 1.0) ? gainM = 1.0;

  biquadM2[1] = focusM*0.25*Q; //Q, mid 2K boost is much broader
  biquadM7[1] = focusM*Q; //Q
  biquadM10[1] = focusM*Q; //Q
  biquadS3[1] = focusM*Q; //Q
  biquadS5[1] = focusM*Q; //Q

  biquadL3[1] = focusS*Q; //Q
  biquadL7[1] = focusS*Q; //Q
  biquadR3[1] = focusS*Q; //Q
  biquadR7[1] = focusS*Q; //Q

K = tan($pi * biquadM2[0]);
norm = 1.0 / (1.0 + K / biquadM2[1] + K * K);
biquadM2[2] = K / biquadM2[1] * norm;
biquadM2[4] = -biquadM2[2];
biquadM2[5] = 2.0 * (K * K - 1.0) * norm;
biquadM2[6] = (1.0 - K / biquadM2[1] + K * K) * norm;

K = tan($pi * biquadM7[0]);
norm = 1.0 / (1.0 + K / biquadM7[1] + K * K);
biquadM7[2] = K / biquadM7[1] * norm;
biquadM7[4] = -biquadM7[2];
biquadM7[5] = 2.0 * (K * K - 1.0) * norm;
biquadM7[6] = (1.0 - K / biquadM7[1] + K * K) * norm;

K = tan($pi * biquadM10[0]);
norm = 1.0 / (1.0 + K / biquadM10[1] + K * K);
biquadM10[2] = K / biquadM10[1] * norm;
biquadM10[4] = -biquadM10[2];
biquadM10[5] = 2.0 * (K * K - 1.0) * norm;
biquadM10[6] = (1.0 - K / biquadM10[1] + K * K) * norm;

K = tan($pi * biquadL3[0]);
norm = 1.0 / (1.0 + K / biquadL3[1] + K * K);
biquadL3[2] = K / biquadL3[1] * norm;
biquadL3[4] = -biquadL3[2];
biquadL3[5] = 2.0 * (K * K - 1.0) * norm;
biquadL3[6] = (1.0 - K / biquadL3[1] + K * K) * norm;

K = tan($pi * biquadL7[0]);
norm = 1.0 / (1.0 + K / biquadL7[1] + K * K);
biquadL7[2] = K / biquadL7[1] * norm;
biquadL7[4] = -biquadL7[2];
biquadL7[5] = 2.0 * (K * K - 1.0) * norm;
biquadL7[6] = (1.0 - K / biquadL7[1] + K * K) * norm;

K = tan($pi * biquadR3[0]);
norm = 1.0 / (1.0 + K / biquadR3[1] + K * K);
biquadR3[2] = K / biquadR3[1] * norm;
biquadR3[4] = -biquadR3[2];
biquadR3[5] = 2.0 * (K * K - 1.0) * norm;
biquadR3[6] = (1.0 - K / biquadR3[1] + K * K) * norm;

K = tan($pi * biquadR7[0]);
norm = 1.0 / (1.0 + K / biquadR7[1] + K * K);
biquadR7[2] = K / biquadR7[1] * norm;
biquadR7[4] = -biquadR7[2];
biquadR7[5] = 2.0 * (K * K - 1.0) * norm;
biquadR7[6] = (1.0 - K / biquadR7[1] + K * K) * norm;

K = tan($pi * biquadS3[0]);
norm = 1.0 / (1.0 + K / biquadS3[1] + K * K);
biquadS3[2] = K / biquadS3[1] * norm;
biquadS3[4] = -biquadS3[2];
biquadS3[5] = 2.0 * (K * K - 1.0) * norm;
biquadS3[6] = (1.0 - K / biquadS3[1] + K * K) * norm;

K = tan($pi * biquadS5[0]);
norm = 1.0 / (1.0 + K / biquadS5[1] + K * K);
biquadS5[2] = K / biquadS5[1] * norm;
biquadS5[4] = -biquadS5[2];
biquadS5[5] = 2.0 * (K * K - 1.0) * norm;
biquadS5[6] = (1.0 - K / biquadS5[1] + K * K) * norm;

depthM = pow(A,2)*2.0;; //proportion to mix in the filtered stuff
depthS = pow(B,2)*2.0;; //proportion to mix in the filtered stuff
level = C; //output pad
wet = E; //dry/wet

@sample
inputSampleL = spl0;
inputSampleR = spl1;


drySampleL = inputSampleL;
drySampleR = inputSampleR;

inputSampleL = sin(inputSampleL);
inputSampleR = sin(inputSampleR);
//encode Console5: good cleanness

mid = inputSampleL + inputSampleR;
rawmid = mid * 0.5; //we'll use this to isolate L&R a little
side = inputSampleL - inputSampleR;
boostside = side * depthS;
//assign mid and side.Between these sections, you can do mid/side processing

tempSample = (mid * biquadM2[2]) + biquadM2[7];
biquadM2[7] = (-tempSample * biquadM2[5]) + biquadM2[8];
biquadM2[8] = (mid * biquadM2[4]) - (tempSample * biquadM2[6]);
M2Sample = tempSample; //like mono AU, 7 and 8 store L channel

tempSample = (mid * biquadM7[2]) + biquadM7[7];
biquadM7[7] = (-tempSample * biquadM7[5]) + biquadM7[8];
biquadM7[8] = (mid * biquadM7[4]) - (tempSample * biquadM7[6]);
M7Sample = -tempSample*2.0; //like mono AU, 7 and 8 store L channel

tempSample = (mid * biquadM10[2]) + biquadM10[7];
biquadM10[7] = (-tempSample * biquadM10[5]) + biquadM10[8];
biquadM10[8] = (mid * biquadM10[4]) - (tempSample * biquadM10[6]);
M10Sample = -tempSample*2.0; //like mono AU, 7 and 8 store L channel
//mid

tempSample = (side * biquadS3[2]) + biquadS3[7];
biquadS3[7] = (-tempSample * biquadS3[5]) + biquadS3[8];
biquadS3[8] = (side * biquadS3[4]) - (tempSample * biquadS3[6]);
S3Sample = tempSample*2.0; //like mono AU, 7 and 8 store L channel

tempSample = (side * biquadS5[2]) + biquadS5[7];
biquadS5[7] = (-tempSample * biquadS5[5]) + biquadS5[8];
biquadS5[8] = (side * biquadS5[4]) - (tempSample * biquadS5[6]);
S5Sample = -tempSample*5.0; //like mono AU, 7 and 8 store L channel

mid = (M2Sample + M7Sample + M10Sample)*depthM;
side = (S3Sample + S5Sample + boostside)*depthS;

msOutSampleL = (mid+side)/2.0;
msOutSampleR = (mid-side)/2.0;
//unassign mid and side

isoSampleL = inputSampleL-rawmid;
isoSampleR = inputSampleR-rawmid; //trying to isolate L and R a little

tempSample = (isoSampleL * biquadL3[2]) + biquadL3[7];
biquadL3[7] = (-tempSample * biquadL3[5]) + biquadL3[8];
biquadL3[8] = (isoSampleL * biquadL3[4]) - (tempSample * biquadL3[6]);
L3Sample = tempSample; //like mono AU, 7 and 8 store L channel

tempSample = (isoSampleR * biquadR3[2]) + biquadR3[9];
biquadR3[9] = (-tempSample * biquadR3[5]) + biquadR3[10];
biquadR3[10] = (isoSampleR * biquadR3[4]) - (tempSample * biquadR3[6]);
R3Sample = tempSample; //note: 9 and 10 store the R channel

tempSample = (isoSampleL * biquadL7[2]) + biquadL7[7];
biquadL7[7] = (-tempSample * biquadL7[5]) + biquadL7[8];
biquadL7[8] = (isoSampleL * biquadL7[4]) - (tempSample * biquadL7[6]);
L7Sample = tempSample*3.0; //like mono AU, 7 and 8 store L channel

tempSample = (isoSampleR * biquadR7[2]) + biquadR7[9];
biquadR7[9] = (-tempSample * biquadR7[5]) + biquadR7[10];
biquadR7[10] = (isoSampleR * biquadR7[4]) - (tempSample * biquadR7[6]);
R7Sample = tempSample*3.0; //note: 9 and 10 store the R channel

processingL = msOutSampleL + ((L3Sample + L7Sample)*depthS);
processingR = msOutSampleR + ((R3Sample + R7Sample)*depthS);
//done with making filters, now we apply them

mid = inputSampleL + inputSampleR;
side = inputSampleL - inputSampleR;
//re-assign mid and side.Between these sections, you can do mid/side processing

mid *= gainM;
side *= gainS;
//we crank things up more than a bit, or cut them in line with how the hardware box works
(side > 1.57079633) ? side = 1.57079633;
(side < -1.57079633) ? side = -1.57079633;
side = sin(side);
side *= gainS;


inputSampleL = ((mid+side)/2.0)+processingL;
inputSampleR = ((mid-side)/2.0)+processingR;
//unassign mid and side

(level < 1.0) ? (
  inputSampleL *= level;
  inputSampleR *= level;
);

(inputSampleL > 1.0) ? inputSampleL = 1.0;
(inputSampleL < -1.0) ? inputSampleL = -1.0;
(inputSampleR > 1.0) ? inputSampleR = 1.0;
(inputSampleR < -1.0) ? inputSampleR = -1.0;
//without this, you can get a NaN condition where it spits out DC offset at full blast!
inputSampleL = asin(inputSampleL);
inputSampleR = asin(inputSampleR);
//amplitude aspect

(wet < 1.0) ? (
  inputSampleL = (inputSampleL * wet)+(drySampleL * (1.0-wet));
  inputSampleR = (inputSampleR * wet)+(drySampleR * (1.0-wet));
);



spl0 = inputSampleL;
spl1 = inputSampleR;
