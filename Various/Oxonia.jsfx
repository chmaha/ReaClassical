Version: 1.2
desc: Oxonia Compressor (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Logical4" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Logical4 (MIT License)
  JSFX version released under GPLv3 license

slider1:0<-20,20,0.01>Threshold (dB)
slider2:1.6<1,16,0.01>Ratio
slider3:5<1,100,0.01>Reaction Speed (ms)
slider4:0<-20,20,0.01>Makeup Gain (dB)
slider5:1<0,1,0.01>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
dL = freemem; freemem +=1000;
bL = freemem; freemem +=1000;
cL = freemem; freemem +=1000;
dR = freemem; freemem +=1000;
bR = freemem; freemem +=1000;
cR = freemem; freemem +=1000;

UINT32_MAX = 4294967295;

controlAposL = 1.0;
controlAnegL = 1.0;
controlBposL = 1.0;
controlBnegL = 1.0;
targetposL = 1.0;
targetnegL = 1.0;

controlAposBL = 1.0;
controlAnegBL = 1.0;
controlBposBL = 1.0;
controlBnegBL = 1.0;
targetposBL = 1.0;
targetnegBL = 1.0;

controlAposCL = 1.0;
controlAnegCL = 1.0;
controlBposCL = 1.0;
controlBnegCL = 1.0;
targetposCL = 1.0;
targetnegCL = 1.0;

controlAposR = 1.0;
controlAnegR = 1.0;
controlBposR = 1.0;
controlBnegR = 1.0;
targetposR = 1.0;
targetnegR = 1.0;

controlAposBR = 1.0;
controlAnegBR = 1.0;
controlBposBR = 1.0;
controlBnegBR = 1.0;
targetposBR = 1.0;
targetnegBR = 1.0;

controlAposCR = 1.0;
controlAnegCR = 1.0;
controlBposCR = 1.0;
controlBnegCR = 1.0;
targetposCR = 1.0;
targetnegCR = 1.0;

fpFlip = 1;



@slider

A = (slider1+20)/40;
B = sqrt((slider2-1)/15);
C = sqrt((slider3-1)/99);
D = (slider4+20)/40;
E = slider5;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

fpOld = $phi;
fpNew = 1.0 - fpOld;

inputgain = pow(10.0,(-((A*40.0)-20.0))/20.0);
compoutgain = inputgain; 
attackspeed = ((C*C)*99.0)+1.0;
attackspeed = 10.0 / sqrt(attackspeed);
divisor = 0.000782*attackspeed;
divisor /= overallscale;
remainder = divisor;
divisor = 1.0 - divisor;
divisorB = 0.000819*attackspeed;
divisorB /= overallscale;
remainderB = divisorB;
divisorB = 1.0 - divisorB;

divisorC = 0.000857;
divisorC /= overallscale;
remainderC = divisorC*attackspeed;
divisorC = 1.0 - divisorC;

intensity = 0.0445556;
depthA = 2.42;
offsetA = (depthA * overallscale) | 0;
(offsetA < 1) ? offsetA = 1;
(offsetA > 498) ? offsetA = 498;

depthB = 2.42; 
offsetB = (depthB * overallscale) | 0;
(offsetB < 1) ? offsetB = 1;
(offsetB > 498) ? offsetB = 498;

depthC = 2.42; 
offsetC = (depthC * overallscale) | 0;
(offsetC < 1) ? offsetC = 1;
(offsetC > 498) ? offsetC = 498;

powerSag = 0.003300223685324102874217; 

ratio = sqrt(((B*B)*15.0)+1.0)-1.0;
(ratio > 2.99999) ? ratio = 2.99999;
(ratio < 0.0) ? ratio = 0.0;

ratioselector = floor( ratio ) | 0;

ratio -= ratioselector;
invRatio = 1.0 - ratio;

outSampleAL = 0.0;
outSampleBL = 0.0;
outSampleCL = 0.0;
outSampleAR = 0.0;
outSampleBR = 0.0;
outSampleCR = 0.0;

outputgain = pow(10.0,((D*40.0)-20.0)/20.0);
wet = E;

@sample
inputSampleL = spl0;
inputSampleR = spl1;


drySampleL = inputSampleL;
drySampleR = inputSampleR;

gcount-=1;
(gcount < 0 || gcount > 499) ? (gcount = 499;);

dL[gcount+499] = dL[gcount] = abs(inputSampleL)*(intensity-((controlAposL+controlBposL+controlAnegL+controlBnegL)*powerSag));
controlL += (dL[gcount] / offsetA);
controlL -= (dL[gcount+offsetA] / offsetA);
controlL -= 0.000001;
clamp = 1;
(controlL < 0) ? controlL = 0;
(controlL > 1) ? (clamp -= (controlL - 1); controlL = 1;);
(clamp < 0.5) ? clamp = 0.5;

thickness = ((1.0 - controlL) * 2.0) - 1.0;
out = abs(thickness);    
bridgerectifier = abs(inputSampleL);
(bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;

(thickness > 0) ?  bridgerectifier = sin(bridgerectifier)
: bridgerectifier = 1-cos(bridgerectifier);

(inputSampleL > 0) ? inputSampleL = (inputSampleL*(1-out))+(bridgerectifier*out)
: inputSampleL = (inputSampleL*(1-out))-(bridgerectifier*out);

(clamp != 1.0) ? inputSampleL *= clamp;

dR[gcount+499] = dR[gcount] = abs(inputSampleR)*(intensity-((controlAposR+controlBposR+controlAnegR+controlBnegR)*powerSag));
controlR += (dR[gcount] / offsetA);
controlR -= (dR[gcount+offsetA] / offsetA);
controlR -= 0.000001;
clamp = 1;
(controlR < 0) ? controlR = 0;
(controlR > 1) ? (clamp -= (controlR - 1); controlR = 1;);
(clamp < 0.5) ? clamp = 0.5;

thickness = ((1.0 - controlR) * 2.0) - 1.0;
out = abs(thickness);    
bridgerectifier = abs(inputSampleR);
(bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;

(thickness > 0) ? bridgerectifier = sin(bridgerectifier)
: bridgerectifier = 1-cos(bridgerectifier);

(inputSampleR > 0) ? inputSampleR = (inputSampleR*(1-out))+(bridgerectifier*out)
: inputSampleR = (inputSampleR*(1-out))-(bridgerectifier*out);

(clamp != 1.0) ? inputSampleR *= clamp;

(inputgain != 1.0) ? inputSampleL *= inputgain;
inputpos = (inputSampleL * fpOld) + (avgAL * fpNew) + 1.0;
avgAL = inputSampleL;

(inputpos < 0.001) ? inputpos = 0.001;
outputpos = inputpos / 2.0;
(outputpos > 1.0) ? outputpos = 1.0;    
inputpos *= inputpos;

dynamicRemainder = remainder * (inputpos + 1.0);
(dynamicRemainder > 1.0) ? dynamicRemainder = 1.0;
dynamicDivisor = 1.0 - dynamicRemainder;

targetposL *= dynamicDivisor;
targetposL += (inputpos * dynamicRemainder);
calcpos = pow((1.0/targetposL),2);

inputneg = (-inputSampleL * fpOld) + (nvgAL * fpNew) + 1.0;
nvgAL = -inputSampleL;

(inputneg < 0.001) ? inputneg = 0.001;
outputneg = inputneg / 2.0;
(outputneg > 1.0) ? outputneg = 1.0;    
inputneg *= inputneg;

dynamicRemainder = remainder * (inputneg + 1.0);
(dynamicRemainder > 1.0) ? dynamicRemainder = 1.0;
dynamicDivisor = 1.0 - dynamicRemainder;

targetnegL *= dynamicDivisor;
targetnegL += (inputneg * dynamicRemainder);
calcneg = pow((1.0/targetnegL),2);

(inputSampleL > 0) ?
(
  (1 == fpFlip) ?
  (
    controlAposL *= divisor;
    controlAposL += (calcpos*remainder);
    (controlAposR > controlAposL) ?  controlAposR = (controlAposR + controlAposL) * 0.5;
  )
  :
  (
    controlBposL *= divisor;
    controlBposL += (calcpos*remainder);
    (controlBposR > controlBposL) ? controlBposR = (controlBposR + controlBposL) * 0.5;
  );  
)
:
( 
  (1 == fpFlip) ?
  (
    controlAnegL *= divisor;
    controlAnegL += (calcneg*remainder);
    (controlAnegR > controlAnegL) ? controlAnegR = (controlAnegR + controlAnegL) * 0.5;
  )
  :
  (
    controlBnegL *= divisor;
    controlBnegL += (calcneg*remainder);
    (controlBnegR > controlBnegL) ? controlBnegR = (controlBnegR + controlBnegL) * 0.5;
  );
);

(1 == fpFlip) ?
(totalmultiplier = (controlAposL * outputpos) + (controlAnegL * outputneg);)
:
(totalmultiplier = (controlBposL * outputpos) + (controlBnegL * outputneg));

(totalmultiplier != 1.0) ? inputSampleL *= totalmultiplier;

(inputSampleL > 36.0) ? inputSampleL = 36.0;
(inputSampleL < -36.0) ? inputSampleL = -36.0;

outSampleAL = inputSampleL / compoutgain;

(inputgain != 1.0) ? inputSampleR *= inputgain;
inputpos = (inputSampleR * fpOld) + (avgAR * fpNew) + 1.0;
avgAR = inputSampleR;

(inputpos < 0.001) ? inputpos = 0.001;
outputpos = inputpos / 2.0;
(outputpos > 1.0) ? outputpos = 1.0;    
inputpos *= inputpos;

dynamicRemainder = remainder * (inputpos + 1.0);
(dynamicRemainder > 1.0) ? dynamicRemainder = 1.0;
dynamicDivisor = 1.0 - dynamicRemainder;

targetposR *= dynamicDivisor;
targetposR += (inputpos * dynamicRemainder);
calcpos = pow((1.0/targetposR),2);

inputneg = (-inputSampleR * fpOld) + (nvgAR * fpNew) + 1.0;
nvgAR = -inputSampleR;

(inputneg < 0.001) ? inputneg = 0.001;
outputneg = inputneg / 2.0;
(outputneg > 1.0) ? outputneg = 1.0;    
inputneg *= inputneg;

dynamicRemainder = remainder * (inputneg + 1.0);
(dynamicRemainder > 1.0) ? dynamicRemainder = 1.0;
dynamicDivisor = 1.0 - dynamicRemainder;

targetnegR *= dynamicDivisor;
targetnegR += (inputneg * dynamicRemainder);
calcneg = pow((1.0/targetnegR),2);

(inputSampleR > 0) ?
(
  (1 == fpFlip) ?
  (
    controlAposR *= divisor;
    controlAposR += (calcpos*remainder);
    (controlAposL > controlAposR) ? controlAposL = (controlAposR + controlAposL) * 0.5;
  )
  :
  (
    controlBposR *= divisor;
    controlBposR += (calcpos*remainder);
    (controlBposL > controlBposR) ? controlBposL = (controlBposR + controlBposL) * 0.5;
  );  
)
:
(
  (1 == fpFlip) ?
  (
    controlAnegR *= divisor;
    controlAnegR += (calcneg*remainder);
    (controlAnegL > controlAnegR) ? controlAnegL = (controlAnegR + controlAnegL) * 0.5;
  )
  :
  (
    controlBnegR *= divisor;
    controlBnegR += (calcneg*remainder);
    (controlBnegL > controlBnegR) ? controlBnegL = (controlBnegR + controlBnegL) * 0.5;
  );
);

(1 == fpFlip) ? 
(totalmultiplier = (controlAposR * outputpos) + (controlAnegR * outputneg))
:
(totalmultiplier = (controlBposR * outputpos) + (controlBnegR * outputneg));

(totalmultiplier != 1.0) ? inputSampleR *= totalmultiplier;

(inputSampleR > 36.0) ? inputSampleR = 36.0;
(inputSampleR < -36.0) ? inputSampleR = -36.0;

outSampleAR = inputSampleR / compoutgain;

(ratioselector > 0) ? (
  
  bL[gcount+499] = bL[gcount] = abs(inputSampleL)*(intensity-((controlAposBL+controlBposBL+controlAnegBL+controlBnegBL)*powerSag));
  controlBL += (bL[gcount] / offsetB);
  controlBL -= (bL[gcount+offsetB] / offsetB);
  controlBL -= 0.000001;
  clamp = 1;
  (controlBL < 0) ? controlBL = 0;
  (controlBL > 1) ? (clamp -= (controlBL - 1); controlBL = 1;);
  (clamp < 0.5) ? clamp = 0.5;

  thickness = ((1.0 - controlBL) * 2.0) - 1.0;
  out = abs(thickness);    
  bridgerectifier = abs(inputSampleL);
  (bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;

  (thickness > 0) ? bridgerectifier = sin(bridgerectifier)
  : bridgerectifier = 1-cos(bridgerectifier);
  (inputSampleL > 0) ? inputSampleL = (inputSampleL*(1-out))+(bridgerectifier*out)
  : inputSampleL = (inputSampleL*(1-out))-(bridgerectifier*out);

  (clamp != 1.0) ? inputSampleL *= clamp;
  
  bR[gcount+499] = bR[gcount] = abs(inputSampleR)*(intensity-((controlAposBR+controlBposBR+controlAnegBR+controlBnegBR)*powerSag));
  controlBR += (bR[gcount] / offsetB);
  controlBR -= (bR[gcount+offsetB] / offsetB);
  controlBR -= 0.000001;
  clamp = 1;
  (controlBR < 0) ? controlBR = 0;
  (controlBR > 1) ? (clamp -= (controlBR - 1); controlBR = 1;);
  (clamp < 0.5) ? clamp = 0.5;

  thickness = ((1.0 - controlBR) * 2.0) - 1.0;
  out = abs(thickness);    
  bridgerectifier = abs(inputSampleR);
  (bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;
  (thickness > 0) ? bridgerectifier = sin(bridgerectifier)
  : bridgerectifier = 1-cos(bridgerectifier);
  (inputSampleR > 0) ? inputSampleR = (inputSampleR*(1-out))+(bridgerectifier*out)
  : inputSampleR = (inputSampleR*(1-out))-(bridgerectifier*out);

  (clamp != 1.0) ? inputSampleR *= clamp;

  inputpos = (inputSampleL * fpOld) + (avgBL * fpNew) + 1.0;
  avgBL = inputSampleL;
  
  (inputpos < 0.001) ? inputpos = 0.001;
  outputpos = inputpos / 2.0;
  (outputpos > 1.0) ? outputpos = 1.0;    
  inputpos *= inputpos;
  
  dynamicRemainder = remainderB * (inputpos + 1.0);
  (dynamicRemainder > 1.0) ? dynamicRemainder = 1.0;
  dynamicDivisor = 1.0 - dynamicRemainder;
  
  targetposBL *= dynamicDivisor;
  targetposBL += (inputpos * dynamicRemainder);
  calcpos = pow((1.0/targetposBL),2);
  
  inputneg = (-inputSampleL * fpOld) + (nvgBL * fpNew) + 1.0;
  nvgBL = -inputSampleL;
  
  (inputneg < 0.001) ? inputneg = 0.001;
  outputneg = inputneg / 2.0;
  (outputneg > 1.0) ? outputneg = 1.0;    
  inputneg *= inputneg;
  
  dynamicRemainder = remainderB * (inputneg + 1.0);
  (dynamicRemainder > 1.0) ? dynamicRemainder = 1.0;
  dynamicDivisor = 1.0 - dynamicRemainder;
  
  targetnegBL *= dynamicDivisor;
  targetnegBL += (inputneg * dynamicRemainder);
  calcneg = pow((1.0/targetnegBL),2);

  (inputSampleL > 0) ?
  ( 
    (1 == fpFlip) ?
    (
      controlAposBL *= divisorB;
      controlAposBL += (calcpos*remainderB);
      (controlAposBR > controlAposBL) ? controlAposBR = (controlAposBR + controlAposBL) * 0.5;
    )
    :
    (
      controlBposBL *= divisorB;
      controlBposBL += (calcpos*remainderB);
      (controlBposBR > controlBposBL) ? controlBposBR = (controlBposBR + controlBposBL) * 0.5;
    ); 
  )
  :
  ( 
    (1 == fpFlip) ?
    (
      controlAnegBL *= divisorB;
      controlAnegBL += (calcneg*remainderB);
      (controlAnegBR > controlAnegBL) ? controlAnegBR = (controlAnegBR + controlAnegBL) * 0.5;
    )
    :
    (
      controlBnegBL *= divisorB;
      controlBnegBL += (calcneg*remainderB);
      (controlBnegBR > controlBnegBL) ? controlBnegBR = (controlBnegBR + controlBnegBL) * 0.5;
    );
  );
  
  (1 == fpFlip) ?
  (totalmultiplier = (controlAposBL * outputpos) + (controlAnegBL * outputneg);)
  :
  (totalmultiplier = (controlBposBL * outputpos) + (controlBnegBL * outputneg););
  
  (totalmultiplier != 1.0) ? inputSampleL *= totalmultiplier;
  (inputSampleL > 36.0) ? inputSampleL = 36.0;
  (inputSampleL < -36.0) ? inputSampleL = -36.0;
  outSampleBL = inputSampleL / compoutgain;
  
  inputpos = (inputSampleR * fpOld) + (avgBR * fpNew) + 1.0;
  avgBR = inputSampleR;
  
  (inputpos < 0.001) ? inputpos = 0.001;
  outputpos = inputpos / 2.0;
  (outputpos > 1.0) ? outputpos = 1.0;    
  inputpos *= inputpos;
  
  dynamicRemainder = remainderB * (inputpos + 1.0);
  (dynamicRemainder > 1.0) ? dynamicRemainder = 1.0;
  dynamicDivisor = 1.0 - dynamicRemainder;
  
  targetposBR *= dynamicDivisor;
  targetposBR += (inputpos * dynamicRemainder);
  calcpos = pow((1.0/targetposBR),2);
  
  inputneg = (-inputSampleR * fpOld) + (nvgBR * fpNew) + 1.0;
  nvgBR = -inputSampleR;
  
  (inputneg < 0.001) ? inputneg = 0.001;
  outputneg = inputneg / 2.0;
  (outputneg > 1.0) ? outputneg = 1.0;    
  inputneg *= inputneg;
  
  dynamicRemainder = remainderB * (inputneg + 1.0);
  (dynamicRemainder > 1.0) ? dynamicRemainder = 1.0;
  dynamicDivisor = 1.0 - dynamicRemainder;
  
  targetnegBR *= dynamicDivisor;
  targetnegBR += (inputneg * dynamicRemainder);
  calcneg = pow((1.0/targetnegBR),2);
  );

  (inputSampleR > 0) ?
  ( 
    (1 == fpFlip) ?
    (
      controlAposBR *= divisorB;
      controlAposBR += (calcpos*remainderB);
      (controlAposBL > controlAposBR) ? controlAposBL = (controlAposBR + controlAposBL) * 0.5;
    )
    :
    (
      controlBposBR *= divisorB;
      controlBposBR += (calcpos*remainderB);
      (controlBposBL > controlBposBR) ? controlBposBL = (controlBposBR + controlBposBL) * 0.5;
    );  
  )
  :
  (
    (1 == fpFlip) ? 
    (
      controlAnegBR *= divisorB;
      controlAnegBR += (calcneg*remainderB);
      (controlAnegBL > controlAnegBR) ? controlAnegBL = (controlAnegBR + controlAnegBL) * 0.5;
    )
    :
    (
      controlBnegBR *= divisorB;
      controlBnegBR += (calcneg*remainderB);
      (controlBnegBL > controlBnegBR) ? controlBnegBL = (controlBnegBR + controlBnegBL) * 0.5;
    );
  );
  
  (1 == fpFlip) ?
  (totalmultiplier = (controlAposBR * outputpos) + (controlAnegBR * outputneg);)
  :
  (totalmultiplier = (controlBposBR * outputpos) + (controlBnegBR * outputneg););
  
  (totalmultiplier != 1.0) ? inputSampleR *= totalmultiplier;
  (inputSampleR > 36.0) ? inputSampleR = 36.0;
  (inputSampleR < -36.0) ? inputSampleR = -36.0;
  outSampleBR = inputSampleR / compoutgain;
  
  (ratioselector > 1) ? (
  
    cL[gcount+499] = cL[gcount] = abs(inputSampleL)*(intensity-((controlAposCL+controlBposCL+controlAnegCL+controlBnegCL)*powerSag));
    controlCL += (cL[gcount] / offsetC);
    controlCL -= (cL[gcount+offsetB] / offsetC);
    controlCL -= 0.000001;
    clamp = 1;
    (controlCL < 0) ? controlCL = 0;
    (controlCL > 1) ? (clamp -= (controlCL - 1); controlCL = 1;);
    (clamp < 0.5) ? clamp = 0.5;

    thickness = ((1.0 - controlCL) * 2.0) - 1.0;
    out = abs(thickness);    
    bridgerectifier = abs(inputSampleL);
    (bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;

    (thickness > 0) ? bridgerectifier = sin(bridgerectifier)
    : bridgerectifier = 1-cos(bridgerectifier);

    (inputSampleL > 0) ? inputSampleL = (inputSampleL*(1-out))+(bridgerectifier*out)
    : inputSampleL = (inputSampleL*(1-out))-(bridgerectifier*out);

    (clamp != 1.0) ? inputSampleL *= clamp;
    
    cR[gcount+499] = cR[gcount] = abs(inputSampleR)*(intensity-((controlAposCR+controlBposCR+controlAnegCR+controlBnegCR)*powerSag));
    controlCR += (cR[gcount] / offsetC);
    controlCR -= (cR[gcount+offsetB] / offsetC);
    controlCR -= 0.000001;
    clamp = 1;
    (controlCR < 0) ? controlCR = 0;
    (controlCR > 1) ? (clamp -= (controlCR - 1); controlCR = 1;);
    (clamp < 0.5) ? clamp = 0.5;

    thickness = ((1.0 - controlCR) * 2.0) - 1.0;
    out = abs(thickness);    
    bridgerectifier = abs(inputSampleR);
    (bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;
    
    (thickness > 0) ? bridgerectifier = sin(bridgerectifier)
    : bridgerectifier = 1-cos(bridgerectifier);

    (inputSampleR > 0) ? inputSampleR = (inputSampleR*(1-out))+(bridgerectifier*out)
    : inputSampleR = (inputSampleR*(1-out))-(bridgerectifier*out);

    (clamp != 1.0) ? inputSampleR *= clamp;
    
    inputpos = (inputSampleL * fpOld) + (avgCL * fpNew) + 1.0;
    avgCL = inputSampleL;
    
    (inputpos < 0.001) ? inputpos = 0.001;
    outputpos = inputpos / 2.0;
    (outputpos > 1.0) ? outputpos = 1.0;    
    inputpos *= inputpos;
    
    dynamicRemainder = remainderC * (inputpos + 1.0);
    (dynamicRemainder > 1.0) ? dynamicRemainder = 1.0;
    dynamicDivisor = 1.0 - dynamicRemainder;
    
    targetposCL *= dynamicDivisor;
    targetposCL += (inputpos * dynamicRemainder);
    calcpos = pow((1.0/targetposCL),2);
    
    inputneg = (-inputSampleL * fpOld) + (nvgCL * fpNew) + 1.0;
    nvgCL = -inputSampleL;
    
    (inputneg < 0.001) ? inputneg = 0.001;
    outputneg = inputneg / 2.0;
    (outputneg > 1.0) ? outputneg = 1.0;    
    inputneg *= inputneg;
    
    dynamicRemainder = remainderC * (inputneg + 1.0);
    (dynamicRemainder > 1.0) ? dynamicRemainder = 1.0;
    dynamicDivisor = 1.0 - dynamicRemainder;
    
    targetnegCL *= dynamicDivisor;
    targetnegCL += (inputneg * dynamicRemainder);
    calcneg = pow((1.0/targetnegCL),2);
    
    (inputSampleL > 0) ?
    ( 
      (1 == fpFlip) ?
      (
        controlAposCL *= divisorC;
        controlAposCL += (calcpos*remainderC);
        (controlAposCR > controlAposCL) ? controlAposCR = (controlAposCR + controlAposCL) * 0.5;
      )
      :
      (
        controlBposCL *= divisorC;
        controlBposCL += (calcpos*remainderC);
        (controlBposCR > controlBposCL) ? controlBposCR = (controlBposCR + controlBposCL) * 0.5;
      );  
    )
    :
    ( 
      (1 == fpFlip) ?
      (
        controlAnegCL *= divisorC;
        controlAnegCL += (calcneg*remainderC);
        (controlAnegCR > controlAnegCL) ? controlAnegCR = (controlAnegCR + controlAnegCL) * 0.5;
      )
      :
      (
        controlBnegCL *= divisorC;
        controlBnegCL += (calcneg*remainderC);
        (controlBnegCR > controlBnegCL) ? controlBnegCR = (controlBnegCR + controlBnegCL) * 0.5;
      );
    );
    
    (1 == fpFlip) ?
    (totalmultiplier = (controlAposCL * outputpos) + (controlAnegCL * outputneg);)
    :
    (totalmultiplier = (controlBposCL * outputpos) + (controlBnegCL * outputneg);
    
    (totalmultiplier != 1.0) ? inputSampleL *= totalmultiplier;
    (inputSampleL > 36.0) ? inputSampleL = 36.0;
    (inputSampleL < -36.0) ? inputSampleL = -36.0;
    outSampleCL = inputSampleL / compoutgain;
    inputpos = (inputSampleR * fpOld) + (avgCR * fpNew) + 1.0;
    avgCR = inputSampleR;
    
    (inputpos < 0.001) ? inputpos = 0.001;
    outputpos = inputpos / 2.0;
    (outputpos > 1.0) ? outputpos = 1.0;    
    inputpos *= inputpos;
    
    dynamicRemainder = remainderC * (inputpos + 1.0);
    (dynamicRemainder > 1.0) ? dynamicRemainder = 1.0;
    dynamicDivisor = 1.0 - dynamicRemainder;
    
    targetposCL *= dynamicDivisor;
    targetposCL += (inputpos * dynamicRemainder);
    calcpos = pow((1.0/targetposCR),2);
    
    inputneg = (-inputSampleR * fpOld) + (nvgCR * fpNew) + 1.0;
    nvgCR = -inputSampleR;
    
    (inputneg < 0.001) ? inputneg = 0.001;
    outputneg = inputneg / 2.0;
    (outputneg > 1.0) ? outputneg = 1.0;    
    inputneg *= inputneg;
    
    dynamicRemainder = remainderC * (inputneg + 1.0);
    (dynamicRemainder > 1.0) ? dynamicRemainder = 1.0;
    dynamicDivisor = 1.0 - dynamicRemainder;
    
    targetnegCR *= dynamicDivisor;
    targetnegCR += (inputneg * dynamicRemainder);
    calcneg = pow((1.0/targetnegCR),2);
    
    (inputSampleR > 0) ?
    ( 
      (1 == fpFlip) ?
      (
        controlAposCR *= divisorC;
        controlAposCR += (calcpos*remainderC);
        (controlAposCL > controlAposCR) ? controlAposCL = (controlAposCR + controlAposCL) * 0.5;
      )
      :
      (
        controlBposCR *= divisorC;
        controlBposCR += (calcpos*remainderC);
        (controlBposCL > controlBposCR) ? controlBposCL = (controlBposCR + controlBposCL) * 0.5;
      );  
    )
    :
    (
      (1 == fpFlip) ?
      (
        controlAnegCR *= divisorC;
        controlAnegCR += (calcneg*remainderC);
        (controlAnegCL > controlAnegCR) ? controlAnegCL = (controlAnegCR + controlAnegCL) * 0.5;
      )
      :
      (
        controlBnegCR *= divisorC;
        controlBnegCR += (calcneg*remainderC);
        (controlBnegCL > controlBnegCR) ? controlBnegCL = (controlBnegCR + controlBnegCL) * 0.5;
      );
    );
    
    (1 == fpFlip) ? 
    (totalmultiplier = (controlAposCR * outputpos) + (controlAnegCR * outputneg);)
    :
    (totalmultiplier = (controlBposCR * outputpos) + (controlBnegCR * outputneg);
    
    (totalmultiplier != 1.0) ? inputSampleR *= totalmultiplier;
    (inputSampleR > 36.0) ? inputSampleR = 36.0;
    (inputSampleR < -36.0) ? inputSampleR = -36.0;

    outSampleCR = inputSampleR / compoutgain;
    );
  );
);

(ratioselector == 0) ? (
    inputSampleL = (drySampleL * invRatio) + (outSampleAL * ratio);
    inputSampleR = (drySampleR * invRatio) + (outSampleAR * ratio);
) : (ratioselector == 1) ? (
    inputSampleL = (outSampleAL * invRatio) + (outSampleBL * ratio);
    inputSampleR = (outSampleAR * invRatio) + (outSampleBR * ratio);
) : (
    inputSampleL = (outSampleBL * invRatio) + (outSampleCL * ratio);
    inputSampleR = (outSampleBR * invRatio) + (outSampleCR * ratio);
);


(outputgain != 1.0) ? (
  inputSampleL *= outputgain;
  inputSampleR *= outputgain;
);

(wet != 1.0) ? (
  inputSampleL = (inputSampleL * wet) + (drySampleL * (1.0-wet));
  inputSampleR = (inputSampleR * wet) + (drySampleR * (1.0-wet));
);

fpFlip = !fpFlip;




spl0 = inputSampleL;
spl1 = inputSampleR;
