Version: 1.2
desc:Pascal Compressor (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Pressure5" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Pressure5 (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,1,0.01>Pressure
slider2:0.25<0,1,0.01>Speed
slider3:1<0,1,0.01>Mewiness
slider4:0.5<0,1,0.01>PawClaw
slider5:0.5<0,1,0.01>Output
slider6:1<0,1,0.01>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
fixA = freemem; freemem +=13;
fixB = freemem; freemem +=13;
intermediateL = freemem; freemem +=16;
intermediateR = freemem; freemem +=16;

UINT32_MAX = 4294967295;

muSpeedA = 10000;
muSpeedB = 10000;
muCoefficientA = 1;
muCoefficientB = 1;
muVary = 1;
flip = 0;
wasPosClipL = 0;
wasNegClipL = 0;
wasPosClipR = 0;
wasNegClipR = 0;
slewMax = 0.0;



@slider

A = slider1;
B = slider2;
C = slider3;
D = slider4;
E = slider5;
F = slider6;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

spacing = floor(overallscale) | 0; //should give us working basic scaling, usually 2 or 4
(spacing < 1) ? spacing = 1; (spacing > 16) ? spacing = 16;

threshold = 1.0 - (A * 0.95);
muMakeupGain = 1.0 / threshold;

release = pow((1.28-B),5)*32768.0;
fastest = sqrt(release);
release /= overallscale;
fastest /= overallscale;

mewinessRef = C;
pawsClaws = -(D-0.5)*1.618033988749894848204586;

outputGain = pow(E*2.0,2); 
wet = F;

fixA[0] = 24000.0 / srate;
fixA[1] = 0.7071; 
K = tan($pi * fixA[0]);
norm = 1.0 / (1.0 + K / fixA[1] + K * K);
fixA[2] = K * K * norm;
fixA[3] = 2.0 * fixA[2];
fixA[4] = fixA[2];
fixA[5] = 2.0 * (K * K - 1.0) * norm;
fixA[6] = (1.0 - K / fixA[1] + K * K) * norm;

x = 0; while(x < 7) (fixB[x] = fixA[x];x+=1;);

@sample
inputSampleL = spl0;
inputSampleR = spl1;


drySampleL = inputSampleL;
drySampleR = inputSampleR;

inputSampleL = inputSampleL * muMakeupGain;
inputSampleR = inputSampleR * muMakeupGain;

(fixA[0] < 0.4999) ? (
  temp = (inputSampleL * fixA[2]) + fixA[7];
  fixA[7] = (inputSampleL * fixA[3]) - (temp * fixA[5]) + fixA[8];
  fixA[8] = (inputSampleL * fixA[4]) - (temp * fixA[6]);
  inputSampleL = temp;
  temp = (inputSampleR * fixA[2]) + fixA[9];
  fixA[9] = (inputSampleR * fixA[3]) - (temp * fixA[5]) + fixA[10];
  fixA[10] = (inputSampleR * fixA[4]) - (temp * fixA[6]);
  inputSampleR = temp; //fixed biquad filtering ultrasonics before Pressure
);

inputSense = abs(inputSampleL);
(abs(inputSampleR) > inputSense) ? inputSense = abs(inputSampleR);

mewiness = sin(mewinessRef + (slewMax * pawsClaws));
positivemu = 1; (mewiness < 0) ? (positivemu = 0; mewiness = -mewiness;);

(flip) ?
(
  (inputSense > threshold) ?
  (
    muVary = threshold / inputSense;
    muAttack = sqrt(abs(muSpeedA));
    muCoefficientA = muCoefficientA * (muAttack-1.0);
    (muVary < threshold) ?
    (
      muCoefficientA = muCoefficientA + threshold;
    )
    :
    (
      muCoefficientA = muCoefficientA + muVary;
    );
    muCoefficientA = muCoefficientA / muAttack;
  )
  :
  (
    muCoefficientA = muCoefficientA * ((muSpeedA * muSpeedA)-1.0);
    muCoefficientA = muCoefficientA + 1.0;
    muCoefficientA = muCoefficientA / (muSpeedA * muSpeedA);
  );
  muNewSpeed = muSpeedA * (muSpeedA-1);
  muNewSpeed = muNewSpeed + abs(inputSense*release)+fastest;
  muSpeedA = muNewSpeed / muSpeedA;
)
:
(
  (inputSense > threshold) ?
  (
    muVary = threshold / inputSense;
    muAttack = sqrt(abs(muSpeedB));
    muCoefficientB = muCoefficientB * (muAttack-1);
    (muVary < threshold) ?
    (
      muCoefficientB = muCoefficientB + threshold;
    )
    :
    (
      muCoefficientB = muCoefficientB + muVary;
    );
    muCoefficientB = muCoefficientB / muAttack;
  )
  :
  (
    muCoefficientB = muCoefficientB * ((muSpeedB * muSpeedB)-1.0);
    muCoefficientB = muCoefficientB + 1.0;
    muCoefficientB = muCoefficientB / (muSpeedB * muSpeedB);
  );
  muNewSpeed = muSpeedB * (muSpeedB-1);
  muNewSpeed = muNewSpeed + abs(inputSense*release)+fastest;
  muSpeedB = muNewSpeed / muSpeedB;
);
//got coefficients, adjusted speeds

(flip) ? (
  (positivemu) ? coefficient = pow(muCoefficientA,2)
  : coefficient = sqrt(muCoefficientA);
  coefficient = (coefficient*mewiness)+(muCoefficientA*(1.0-mewiness));
  inputSampleL *= coefficient;
  inputSampleR *= coefficient;
) : (
  (positivemu) ? coefficient = pow(muCoefficientB,2)
  : coefficient = sqrt(muCoefficientB);
  coefficient = (coefficient*mewiness)+(muCoefficientB*(1.0-mewiness));
  inputSampleL *= coefficient;
  inputSampleR *= coefficient;
);

(outputGain != 1.0) ? (
  inputSampleL *= outputGain;
  inputSampleR *= outputGain;
);   

flip = !flip;

(fixB[0] < 0.49999) ? (
  temp = (inputSampleL * fixB[2]) + fixB[7];
  fixB[7] = (inputSampleL * fixB[3]) - (temp * fixB[5]) + fixB[8];
  fixB[8] = (inputSampleL * fixB[4]) - (temp * fixB[6]);
  inputSampleL = temp;
  temp = (inputSampleR * fixB[2]) + fixB[9];
  fixB[9] = (inputSampleR * fixB[3]) - (temp * fixB[5]) + fixB[10];
  fixB[10] = (inputSampleR * fixB[4]) - (temp * fixB[6]);
  inputSampleR = temp;
);

(wet != 1.0) ? (
  inputSampleL = (inputSampleL * wet) + (drySampleL * (1.0-wet));
  inputSampleR = (inputSampleR * wet) + (drySampleR * (1.0-wet));
);
//Dry/Wet control, BEFORE ClipOnly

slewMax = abs(inputSampleL - lastSampleL);
(slewMax < abs(inputSampleR - lastSampleR)) ? slewMax = abs(inputSampleR - lastSampleR);
//set up for fiddling with mewiness. Largest amount of slew in any direction

//begin ClipOnly2 stereo as a little, compressed chunk that can be dropped into code
(inputSampleL > 4.0) ? inputSampleL = 4.0; (inputSampleL < -4.0) ? inputSampleL = -4.0;
(wasPosClipL == 1) ? ( //current will be over
  (inputSampleL<lastSampleL) ? lastSampleL=0.7058208+(inputSampleL*0.2609148)
  : lastSampleL = 0.2491717+(lastSampleL*0.7390851);
); wasPosClipL = 0;
(inputSampleL>0.9549925859) ? (wasPosClipL=1;inputSampleL=0.7058208+(lastSampleL*0.2609148););
(wasNegClipL == 1) ? ( //current will be -over
  (inputSampleL > lastSampleL) ? lastSampleL=-0.7058208+(inputSampleL*0.2609148)
  : lastSampleL=-0.2491717+(lastSampleL*0.7390851);
); wasNegClipL = 0;
(inputSampleL<-0.9549925859) ? (wasNegClipL=1;inputSampleL=-0.7058208+(lastSampleL*0.2609148););
intermediateL[spacing] = inputSampleL;
    inputSampleL = lastSampleL; //Latency is however many samples equals one 44.1k sample
x = spacing | 0; while(x > 0) (intermediateL[x-1] = intermediateL[x]; X-=1;);
lastSampleL = intermediateL[0]; //run a little buffer to handle this

(inputSampleR > 4.0) ? inputSampleR = 4.0; (inputSampleR < -4.0) ? inputSampleR = -4.0;
(wasPosClipR == 1) ?  ( //current will be over
  (inputSampleR<lastSampleR) ? lastSampleR=0.7058208+(inputSampleR*0.2609148)
  : lastSampleR = 0.2491717+(lastSampleR*0.7390851);
); wasPosClipR = 0;
(inputSampleR>0.9549925859) ? (wasPosClipR=1;inputSampleR=0.7058208+(lastSampleR*0.2609148););
(wasNegClipR == 1) ? ( //current will be -over
  (inputSampleR > lastSampleR) ? lastSampleR=-0.7058208+(inputSampleR*0.2609148)
  : lastSampleR=-0.2491717+(lastSampleR*0.7390851);
); wasNegClipR = 0;
(inputSampleR<-0.9549925859) ? (wasNegClipR=1;inputSampleR=-0.7058208+(lastSampleR*0.2609148););
intermediateR[spacing] = inputSampleR;
    inputSampleR = lastSampleR; //Latency is however many samples equals one 44.1k sample
x = spacing | 0; while(x > 0) (intermediateR[x-1] = intermediateR[x];x-=1;);
lastSampleR = intermediateR[0];





spl0 = inputSampleL;
spl1 = inputSampleR;
