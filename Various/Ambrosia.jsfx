Version: 1.0
desc:Ambrosia Tape Emulation (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Tape" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Tape (MIT License)
  JSFX version released under GPLv3 license

slider1:0<-12,12,0.01>Slam (dB)
slider2:0.5<0,1,0.01>Bump
slider3:0<-20,20,0.1>Output Gain (dB)

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

freemem = 0;
biquadAL = freemem; freemem+=9;
biquadBL = freemem; freemem+=9;
biquadCL = freemem; freemem+=9;
biquadDL = freemem; freemem+=9;

biquadAR = freemem; freemem+=9;
biquadBR = freemem; freemem+=9;
biquadCR = freemem; freemem+=9;
biquadDR = freemem; freemem+=9;

@slider

@block

overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

inputgain = pow(10.0,slider1/20.0);
bumpgain = slider2*0.1;
HeadBumpFreq = 0.12/overallscale;
softness = 0.618033988749894848204586;
RollAmount = (1.0 - softness) / overallscale;
biquadAL[0] = biquadBL[0] = biquadAR[0] = biquadBR[0] = 0.0072/overallscale;
biquadAL[1] = biquadBL[1] = biquadAR[1] = biquadBR[1] = 0.0009;
K = tan($pi * biquadBR[0]);
norm = 1.0 / (1.0 + K / biquadBR[1] + K * K);
biquadAL[2] = biquadBL[2] = biquadAR[2] = biquadBR[2] = K / biquadBR[1] * norm;
biquadAL[4] = biquadBL[4] = biquadAR[4] = biquadBR[4] = -biquadBR[2];
biquadAL[5] = biquadBL[5] = biquadAR[5] = biquadBR[5] = 2.0 * (K * K - 1.0) * norm;
biquadAL[6] = biquadBL[6] = biquadAR[6] = biquadBR[6] = (1.0 - K / biquadBR[1] + K * K) * norm;

biquadCL[0] = biquadDL[0] = biquadCR[0] = biquadDR[0] = 0.032/overallscale;
biquadCL[1] = biquadDL[1] = biquadCR[1] = biquadDR[1] = 0.0007;
K = tan($pi * biquadDR[0]);
norm = 1.0 / (1.0 + K / biquadDR[1] + K * K);
biquadCL[2] = biquadDL[2] = biquadCR[2] = biquadDR[2] = K / biquadDR[1] * norm;
biquadCL[4] = biquadDL[4] = biquadCR[4] = biquadDR[4] = -biquadDR[2];
biquadCL[5] = biquadDL[5] = biquadCR[5] = biquadDR[5] = 2.0 * (K * K - 1.0) * norm;
biquadCL[6] = biquadDL[6] = biquadCR[6] = biquadDR[6] = (1.0 - K / biquadDR[1] + K * K) * norm;

@sample

inputSampleL = spl0;
inputSampleR = spl1;

(inputgain < 1.0) ? (
  inputSampleL *= inputgain;
  inputSampleR *= inputgain;
);

outputgain = pow(10.0,slider3/20.0);

drySampleL = inputSampleL;
drySampleR = inputSampleR;

HighsSampleL = 0.0;
HighsSampleR = 0.0;
NonHighsSampleL = 0.0;
NonHighsSampleR = 0.0;
tempSample;

(flip) ? 
(
  iirMidRollerAL = (iirMidRollerAL * (1.0 - RollAmount)) + (inputSampleL * RollAmount);
  iirMidRollerAR = (iirMidRollerAR * (1.0 - RollAmount)) + (inputSampleR * RollAmount);
  HighsSampleL = inputSampleL - iirMidRollerAL;
  HighsSampleR = inputSampleR - iirMidRollerAR;
  NonHighsSampleL = iirMidRollerAL;
  NonHighsSampleR = iirMidRollerAR;
  
  iirHeadBumpAL += (inputSampleL * 0.05);
  iirHeadBumpAR += (inputSampleR * 0.05);
  iirHeadBumpAL -= (iirHeadBumpAL * iirHeadBumpAL * iirHeadBumpAL * HeadBumpFreq);
  iirHeadBumpAR -= (iirHeadBumpAR * iirHeadBumpAR * iirHeadBumpAR * HeadBumpFreq);
  iirHeadBumpAL = sin(iirHeadBumpAL);
  iirHeadBumpAR = sin(iirHeadBumpAR);
  
  tempSample = (iirHeadBumpAL * biquadAL[2]) + biquadAL[7];
  biquadAL[7] = (iirHeadBumpAL * biquadAL[3]) - (tempSample * biquadAL[5]) + biquadAL[8];
  biquadAL[8] = (iirHeadBumpAL * biquadAL[4]) - (tempSample * biquadAL[6]);
  iirHeadBumpAL = tempSample; 
  (iirHeadBumpAL > 1.0) ? iirHeadBumpAL = 1.0;
  (iirHeadBumpAL < -1.0) ? iirHeadBumpAL = -1.0;
  iirHeadBumpAL = asin(iirHeadBumpAL);
  
  tempSample = (iirHeadBumpAR * biquadAR[2]) + biquadAR[7];
  biquadAR[7] = (iirHeadBumpAR * biquadAR[3]) - (tempSample * biquadAR[5]) + biquadAR[8];
  biquadAR[8] = (iirHeadBumpAR * biquadAR[4]) - (tempSample * biquadAR[6]);
  iirHeadBumpAR = tempSample; 
  (iirHeadBumpAR > 1.0) ? iirHeadBumpAR = 1.0;
  (iirHeadBumpAR < -1.0) ? iirHeadBumpAR = -1.0;
  iirHeadBumpAR = asin(iirHeadBumpAR);
  
  inputSampleL = sin(inputSampleL);
  tempSample = (inputSampleL * biquadCL[2]) + biquadCL[7];
  biquadCL[7] = (inputSampleL * biquadCL[3]) - (tempSample * biquadCL[5]) + biquadCL[8];
  biquadCL[8] = (inputSampleL * biquadCL[4]) - (tempSample * biquadCL[6]);
  inputSampleL = tempSample; 
  (inputSampleL > 1.0) ? inputSampleL = 1.0;
  (inputSampleL < -1.0) ? inputSampleL = -1.0;
  inputSampleL = asin(inputSampleL);
  
  inputSampleR = sin(inputSampleR);
  tempSample = (inputSampleR * biquadCR[2]) + biquadCR[7];
  biquadCR[7] = (inputSampleR * biquadCR[3]) - (tempSample * biquadCR[5]) + biquadCR[8];
  biquadCR[8] = (inputSampleR * biquadCR[4]) - (tempSample * biquadCR[6]);
  inputSampleR = tempSample;
  (inputSampleR > 1.0) ? inputSampleR = 1.0;
  (inputSampleR < -1.0) ? inputSampleR = -1.0;
  inputSampleR = asin(inputSampleR);
) : (
  iirMidRollerBL = (iirMidRollerBL * (1.0 - RollAmount)) + (inputSampleL * RollAmount);
  iirMidRollerBR = (iirMidRollerBR * (1.0 - RollAmount)) + (inputSampleR * RollAmount);
  HighsSampleL = inputSampleL - iirMidRollerBL;
  HighsSampleR = inputSampleR - iirMidRollerBR;
  NonHighsSampleL = iirMidRollerBL;
  NonHighsSampleR = iirMidRollerBR;
  
  iirHeadBumpBL += (inputSampleL * 0.05);
  iirHeadBumpBR += (inputSampleR * 0.05);
  iirHeadBumpBL -= (iirHeadBumpBL * iirHeadBumpBL * iirHeadBumpBL * HeadBumpFreq);
  iirHeadBumpBR -= (iirHeadBumpBR * iirHeadBumpBR * iirHeadBumpBR * HeadBumpFreq);
  iirHeadBumpBL = sin(iirHeadBumpBL);
  iirHeadBumpBR = sin(iirHeadBumpBR);
  
  tempSample = (iirHeadBumpBL * biquadBL[2]) + biquadBL[7];
  biquadBL[7] = (iirHeadBumpBL * biquadBL[3]) - (tempSample * biquadBL[5]) + biquadBL[8];
  biquadBL[8] = (iirHeadBumpBL * biquadBL[4]) - (tempSample * biquadBL[6]);
  iirHeadBumpBL = tempSample;
  (iirHeadBumpBL > 1.0) ? iirHeadBumpBL = 1.0;
  (iirHeadBumpBL < -1.0) ? iirHeadBumpBL = -1.0;
  iirHeadBumpBL = asin(iirHeadBumpBL);
  
  tempSample = (iirHeadBumpBR * biquadBR[2]) + biquadBR[7];
  biquadBR[7] = (iirHeadBumpBR * biquadBR[3]) - (tempSample * biquadBR[5]) + biquadBR[8];
  biquadBR[8] = (iirHeadBumpBR * biquadBR[4]) - (tempSample * biquadBR[6]);
  iirHeadBumpBR = tempSample; 
  (iirHeadBumpBR > 1.0) ? iirHeadBumpBR = 1.0;
  (iirHeadBumpBR < -1.0) ? iirHeadBumpBR = -1.0;
  iirHeadBumpBR = asin(iirHeadBumpBR);
  
  inputSampleL = sin(inputSampleL);
  tempSample = (inputSampleL * biquadDL[2]) + biquadDL[7];
  biquadDL[7] = (inputSampleL * biquadDL[3]) - (tempSample * biquadDL[5]) + biquadDL[8];
  biquadDL[8] = (inputSampleL * biquadDL[4]) - (tempSample * biquadDL[6]);
  inputSampleL = tempSample;
  (inputSampleL > 1.0) ? inputSampleL = 1.0;
  (inputSampleL < -1.0) ? inputSampleL = -1.0;
  inputSampleL = asin(inputSampleL);
  
  inputSampleR = sin(inputSampleR);
  tempSample = (inputSampleR * biquadDR[2]) + biquadDR[7];
  biquadDR[7] = (inputSampleR * biquadDR[3]) - (tempSample * biquadDR[5]) + biquadDR[8];
  biquadDR[8] = (inputSampleR * biquadDR[4]) - (tempSample * biquadDR[6]);
  inputSampleR = tempSample;
  (inputSampleR > 1.0) ? inputSampleR = 1.0;
  (inputSampleR < -1.0) ? inputSampleR = -1.0;
  inputSampleR = asin(inputSampleR);
);
flip = !flip;

groundSampleL = drySampleL - inputSampleL; 
groundSampleR = drySampleR - inputSampleR; 

(inputgain > 1.0) ? (
  inputSampleL *= inputgain;
  inputSampleR *= inputgain;
);

applySoften = abs(HighsSampleL)*1.57079633;
(applySoften > 1.57079633) ? applySoften = 1.57079633;
applySoften = 1-cos(applySoften);
(HighsSampleL > 0) ? inputSampleL -= applySoften;
(HighsSampleL < 0) ? inputSampleL += applySoften;
applySoften = abs(HighsSampleR)*1.57079633;
(applySoften > 1.57079633) ? applySoften = 1.57079633;
applySoften = 1-cos(applySoften);
(HighsSampleR > 0) ? inputSampleR -= applySoften;
(HighsSampleR < 0) ? inputSampleR += applySoften;

(inputSampleL > 1.2533141373155) ? inputSampleL = 1.2533141373155;
(inputSampleL < -1.2533141373155) ? inputSampleL = -1.2533141373155;
inputSampleL = sin(inputSampleL * abs(inputSampleL)) / ((abs(inputSampleL) == 0.0) ?1:abs(inputSampleL));
(inputSampleR > 1.2533141373155) ? inputSampleR = 1.2533141373155;
(inputSampleR < -1.2533141373155) ? inputSampleR = -1.2533141373155;
inputSampleR = sin(inputSampleR * abs(inputSampleR)) / ((abs(inputSampleR) == 0.0) ?1:abs(inputSampleR));

suppress = (1.0-abs(inputSampleL)) * 0.00013;
(iirHeadBumpAL > suppress) ? iirHeadBumpAL -= suppress;
(iirHeadBumpAL < -suppress) ? iirHeadBumpAL += suppress;
(iirHeadBumpBL > suppress) ? iirHeadBumpBL -= suppress;
(iirHeadBumpBL < -suppress) ? iirHeadBumpBL += suppress;

suppress = (1.0-abs(inputSampleR)) * 0.00013;
(iirHeadBumpAR > suppress) ? iirHeadBumpAR -= suppress;
(iirHeadBumpAR < -suppress) ? iirHeadBumpAR += suppress;
(iirHeadBumpBR > suppress) ? iirHeadBumpBR -= suppress;
(iirHeadBumpBR < -suppress) ? iirHeadBumpBR += suppress;

inputSampleL += groundSampleL;
inputSampleR += groundSampleR;

inputSampleL += ((iirHeadBumpAL + iirHeadBumpBL) * bumpgain);
inputSampleR += ((iirHeadBumpAR + iirHeadBumpBR) * bumpgain);

(lastSampleL >= 0.99) ?
(
  (inputSampleL < 0.99) ? lastSampleL = ((0.99*softness) + (inputSampleL * (1.0-softness)))
  : lastSampleL = 0.99;
);

(lastSampleL <= -0.99) ?
(
  (inputSampleL > -0.99) ? lastSampleL = ((-0.99*softness) + (inputSampleL * (1.0-softness)))
  : lastSampleL = -0.99;
);

(inputSampleL > 0.99) ?
(
  (lastSampleL < 0.99) ? inputSampleL = ((0.99*softness) + (lastSampleL * (1.0-softness)))
  : inputSampleL = 0.99;
);

(inputSampleL < -0.99) ?
(
  (lastSampleL > -0.99) ? inputSampleL = ((-0.99*softness) + (lastSampleL * (1.0-softness)))
  : inputSampleL = -0.99;
);
lastSampleL = inputSampleL;


(lastSampleR >= 0.99) ?
(
  (inputSampleR < 0.99) ? lastSampleR = ((0.99*softness) + (inputSampleR * (1.0-softness)))
  : lastSampleR = 0.99;
);

(lastSampleR <= -0.99) ?
(
  (inputSampleR > -0.99) ? lastSampleR = ((-0.99*softness) + (inputSampleR * (1.0-softness)))
  : lastSampleR = -0.99;
);

(inputSampleR > 0.99) ?
(
  (lastSampleR < 0.99) ? inputSampleR = ((0.99*softness) + (lastSampleR * (1.0-softness)))
  : inputSampleR = 0.99;
);

(inputSampleR < -0.99) ?
(
  (lastSampleR > -0.99) ? inputSampleR = ((-0.99*softness) + (lastSampleR * (1.0-softness)))
  : inputSampleR = -0.99;
);
lastSampleR = inputSampleR;  

(inputSampleL > 0.99) ? inputSampleL = 0.99;
(inputSampleL < -0.99) ? inputSampleL = -0.99;

(inputSampleR > 0.99) ? inputSampleR = 0.99;
(inputSampleR < -0.99) ? inputSampleR = -0.99;

(outputgain != 1.0) ?
(
  inputSampleL *= outputgain;
  inputSampleR *= outputgain;
);

spl0 = inputSampleL;
spl1 = inputSampleR;
