Version: 1.0
desc:Evolution Channel Strip (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "CStrip2" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/CStrip2 (MIT License)
  JSFX version released under GPLv3 license

slider1:0<-12,12,0.01>Treble (dB)
slider2:0<-12,12,0.01>Mid (dB)
slider3:0<-12,12,0.01>Bass (dB)
slider4:6<1,16,0.01:log=6>Treble Frequency (kHz)
slider5:100<30,1600,0.01:log=100>Bass Frequency (Hz)
slider6:1<0,1,0.01>Low Cap
slider7:0<0,1,0.01>High Cap
slider8:0<0,1,0.01>Compress
slider9:0<0,1,0.01>Compress Speed
slider10:0.33<0,1,0.01>Output / Drive

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

controlAposL = 1.0;
controlAnegL = 1.0;
controlBposL = 1.0;
controlBnegL = 1.0;
targetposL = 1.0;
targetnegL = 1.0;  

controlAposR = 1.0;
controlAnegR = 1.0;
controlBposR = 1.0;
controlBnegR = 1.0;
targetposR = 1.0;
targetnegR = 1.0;  

@slider

A = (slider1+12)/24;
B = (slider2+12)/24;
C = (slider3+12)/24;

@block
overallscale = 1.0;
overallscale /= 44100.0;
compscale = overallscale;
overallscale = srate;
compscale = compscale * overallscale;
fpOld = $phi - 1;
fpNew = 1.0 - fpOld;

highSampleL = 0.0;
midSampleL = 0.0;
bassSampleL = 0.0;

highSampleR = 0.0;
midSampleR = 0.0;
bassSampleR = 0.0;

densityA = (A*12.0)-6.0;
densityB = (B*12.0)-6.0;
densityC = (C*12.0)-6.0;
engageEQ = 1;
( (0.0 == densityA) && (0.0 == densityB) && (0.0 == densityC) ) ? engageEQ = 0;

densityA = pow(10.0,densityA/20.0)-1.0;
densityB = pow(10.0,densityB/20.0)-1.0;
densityC = pow(10.0,densityC/20.0)-1.0;

tripletIntensity = -densityA;
iirAmountA = (slider4*1000)/overallscale;
iirAmountB = (slider5*10)/overallscale;
bridgerectifier;
outA = abs(densityA);
outB = abs(densityB);
outC = abs(densityC);

lowpassAmount = pow(slider6,2);
highpassAmount = pow(slider7,2);
engageCapacitor = 0;
((lowpassAmount < 1.0) || (highpassAmount > 0.0)) ? engageCapacitor = 1;

inputgain = (pow(slider8,4)*35)+1.0;
compoutgain = inputgain;
compoutgain -= 1.0;
compoutgain /= 1.2;
compoutgain += 1.0;
divisor = (0.008 * pow(slider9,2))+0.0004;

divisor /= compscale;
remainder = divisor;
divisor = 1.0 - divisor;
engageComp = 0;
(inputgain > 1.0) ? engageComp = 1;

outputgain = slider10*3.0;
density = outputgain-1.0;
(density < 0.0) ? density = 0.0;
phattity = density - 1.0;
(density > 1.0) ? density = 1.0;
(phattity < 0.0) ? phattity = 0.0;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

(engageCapacitor) ?
    (
      count+=1; (count > 5) ? count = 0;
      (count == 0) ?
      (
          iirHighpassAL = (iirHighpassAL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassAL;
          iirLowpassAL = (iirLowpassAL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassAL;
          iirHighpassBL = (iirHighpassBL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassBL;
          iirLowpassBL = (iirLowpassBL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassBL;
          iirHighpassDL = (iirHighpassDL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassDL;
          iirLowpassDL = (iirLowpassDL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassDL;
          iirHighpassAR = (iirHighpassAR * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassAR;
          iirLowpassAR = (iirLowpassAR * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassAR;
          iirHighpassBR = (iirHighpassBR * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassBR;
          iirLowpassBR = (iirLowpassBR * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassBR;
          iirHighpassDR = (iirHighpassDR * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassDR;
          iirLowpassDR = (iirLowpassDR * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassDR;
      ) : (count == 1) ?
      (
          iirHighpassAL = (iirHighpassAL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassAL;
          iirLowpassAL = (iirLowpassAL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassAL;
          iirHighpassCL = (iirHighpassCL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassCL;
          iirLowpassCL = (iirLowpassCL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassCL;
          iirHighpassEL = (iirHighpassEL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassEL;
          iirLowpassEL = (iirLowpassEL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassEL;
          iirHighpassAR = (iirHighpassAR * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassAR;
          iirLowpassAR = (iirLowpassAR * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassAR;
          iirHighpassCR = (iirHighpassCR * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassCR;
          iirLowpassCR = (iirLowpassCR * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassCR;
          iirHighpassER = (iirHighpassER * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassER;
          iirLowpassER = (iirLowpassER * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassER;
      ) : (count == 2) ?
      (
          iirHighpassAL = (iirHighpassAL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassAL;
          iirLowpassAL = (iirLowpassAL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassAL;
          iirHighpassBL = (iirHighpassBL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassBL;
          iirLowpassBL = (iirLowpassBL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassBL;
          iirHighpassFL = (iirHighpassFL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassFL;
          iirLowpassFL = (iirLowpassFL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassFL;
          iirHighpassAR = (iirHighpassAR * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassAR;
          iirLowpassAR = (iirLowpassAR * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassAR;
          iirHighpassBR = (iirHighpassBR * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassBR;
          iirLowpassBR = (iirLowpassBR * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassBR;
          iirHighpassFR = (iirHighpassFR * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassFR;
          iirLowpassFR = (iirLowpassFR * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassFR;
      ) : (count == 3) ?
      (
          iirHighpassAL = (iirHighpassAL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassAL;
          iirLowpassAL = (iirLowpassAL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassAL;
          iirHighpassCL = (iirHighpassCL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassCL;
          iirLowpassCL = (iirLowpassCL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassCL;
          iirHighpassDL = (iirHighpassDL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassDL;
          iirLowpassDL = (iirLowpassDL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassDL;
          iirHighpassAR = (iirHighpassAR * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassAR;
          iirLowpassAR = (iirLowpassAR * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassAR;
          iirHighpassCR = (iirHighpassCR * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassCR;
          iirLowpassCR = (iirLowpassCR * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassCR;
          iirHighpassDR = (iirHighpassDR * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassDR;
          iirLowpassDR = (iirLowpassDR * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassDR;
         
      ) : (count == 4) ?
      (
          iirHighpassAL = (iirHighpassAL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassAL;
          iirLowpassAL = (iirLowpassAL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassAL;
          iirHighpassBL = (iirHighpassBL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassBL;
          iirLowpassBL = (iirLowpassBL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassBL;
          iirHighpassEL = (iirHighpassEL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassEL;
          iirLowpassEL = (iirLowpassEL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassEL;
          iirHighpassAR = (iirHighpassAR * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassAR;
          iirLowpassAR = (iirLowpassAR * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassAR;
          iirHighpassBR = (iirHighpassBR * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassBR;
          iirLowpassBR = (iirLowpassBR * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassBR;
          iirHighpassER = (iirHighpassER * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassER;
          iirLowpassER = (iirLowpassER * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassER;
          
      ) : (count == 5) ?
      (
          iirHighpassAL = (iirHighpassAL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassAL;
          iirLowpassAL = (iirLowpassAL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassAL;
          iirHighpassCL = (iirHighpassCL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassCL;
          iirLowpassCL = (iirLowpassCL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassCL;
          iirHighpassFL = (iirHighpassFL * (1.0-highpassAmount)) + (inputSampleL * highpassAmount); inputSampleL -= iirHighpassFL;
          iirLowpassFL = (iirLowpassFL * (1.0-lowpassAmount)) + (inputSampleL * lowpassAmount); inputSampleL = iirLowpassFL;
          iirHighpassAR = (iirHighpassAR * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassAR;
          iirLowpassAR = (iirLowpassAR * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassAR;
          iirHighpassCR = (iirHighpassCR * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassCR;
          iirLowpassCR = (iirLowpassCR * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassCR;
          iirHighpassFR = (iirHighpassFR * (1.0-highpassAmount)) + (inputSampleR * highpassAmount); inputSampleR -= iirHighpassFR;
          iirLowpassFR = (iirLowpassFR * (1.0-lowpassAmount)) + (inputSampleR * lowpassAmount); inputSampleR = iirLowpassFR;
      
      );
      
    );
    
    (engageComp) ? 
    (
      flip = !flip;
      inputSampleL *= inputgain;
      
      inputpos = (inputSampleL * fpOld) + (avgLA * fpNew) + 1.0;
      avgLA = inputSampleL;
      
      (inputpos < 0.0) ? inputpos = 0.0;
      outputpos = inputpos / 2.0;
      (outputpos > 1.0) ? outputpos = 1.0;    
      inputpos *= inputpos;
      targetposL *= divisor;
      targetposL += (inputpos * remainder);
      calcpos = pow((1.0/targetposL),2);
      
      inputneg = (-inputSampleL * fpOld) + (nvgLA * fpNew) + 1.0;
      nvgLA = -inputSampleL;
      
      (inputneg < 0.0) ? inputneg = 0.0;
      outputneg = inputneg / 2.0;
      (outputneg > 1.0) ? outputneg = 1.0;    
      inputneg *= inputneg;
      targetnegL *= divisor;
      targetnegL += (inputneg * remainder);
      calcneg = pow((1.0/targetnegL),2);
      
      (inputSampleL > 0) ?
      ( 
        (1 == flip) ?
        (
          controlAposL *= divisor;
          controlAposL += (calcpos*remainder);
        )
        :
        (
          controlBposL *= divisor;
          controlBposL += (calcpos*remainder);
        );  
      )
      :
      (
        (1 == flip) ?
        (
          controlAnegL *= divisor;
          controlAnegL += (calcneg*remainder);
        )
        :
        (
          controlBnegL *= divisor;
          controlBnegL += (calcneg*remainder);
        );
      );
      
      (1 == flip) ?
      (totalmultiplier = (controlAposL * outputpos) + (controlAnegL * outputneg);)
      :
      (totalmultiplier = (controlBposL * outputpos) + (controlBnegL * outputneg););
      
      inputSampleL *= totalmultiplier;
      inputSampleL /= compoutgain;

      inputSampleR *= inputgain;
      
      inputpos = (inputSampleR * fpOld) + (avgRA * fpNew) + 1.0;
      avgRA = inputSampleR;
      
      (inputpos < 0.0) ? inputpos = 0.0;
      outputpos = inputpos / 2.0;
      (outputpos > 1.0) ? outputpos = 1.0;    
      inputpos *= inputpos;
      targetposR *= divisor;
      targetposR += (inputpos * remainder);
      calcpos = pow((1.0/targetposR),2);
      
      inputneg = (-inputSampleR * fpOld) + (nvgRA * fpNew) + 1.0;
      nvgRA = -inputSampleR;
      
      (inputneg < 0.0) ? inputneg = 0.0;
      outputneg = inputneg / 2.0;
      (outputneg > 1.0) ? outputneg = 1.0;    
      inputneg *= inputneg;
      targetnegR *= divisor;
      targetnegR += (inputneg * remainder);
      calcneg = pow((1.0/targetnegR),2);
      
      (inputSampleR > 0) ?
      ( 
        (1 == flip) ?
        (
          controlAposR *= divisor;
          controlAposR += (calcpos*remainder);
        )
        :
        (
          controlBposR *= divisor;
          controlBposR += (calcpos*remainder);
        );
      )
      :
      (
        (1 == flip) ?
        (
          controlAnegR *= divisor;
          controlAnegR += (calcneg*remainder);
        )
        :
        (
          controlBnegR *= divisor;
          controlBnegR += (calcneg*remainder);
        );
      );
      
      (1 == flip) ?
      (totalmultiplier = (controlAposR * outputpos) + (controlAnegR * outputneg);)
      :
      (totalmultiplier = (controlBposR * outputpos) + (controlBnegR * outputneg););
      
      inputSampleR *= totalmultiplier;
      inputSampleR /= compoutgain;
    );
    
    (engageEQ) ?
    (
      last2SampleL = lastSampleL;
      lastSampleL = inputSampleL;
      last2SampleR = lastSampleR;
      lastSampleR = inputSampleR;
      flipthree+=1;
      (flipthree < 1 || flipthree > 3) ? flipthree = 1;
      (flipthree  == 1) ?
      (
          tripletFactorL = last2SampleL - inputSampleL;
          tripletLA += tripletFactorL;
          tripletLC -= tripletFactorL;
          tripletFactorL = tripletLA * tripletIntensity;
          iirHighSampleLC = (iirHighSampleLC * (1.0 - iirAmountA)) + (inputSampleL * iirAmountA);
          highSampleL = inputSampleL - iirHighSampleLC;
          iirLowSampleLC = (iirLowSampleLC * (1.0 - iirAmountB)) + (inputSampleL * iirAmountB);
          bassSampleL = iirLowSampleLC;
          
          tripletFactorR = last2SampleR - inputSampleR;
          tripletRA += tripletFactorR;
          tripletRC -= tripletFactorR;
          tripletFactorR = tripletRA * tripletIntensity;
          iirHighSampleRC = (iirHighSampleRC * (1.0 - iirAmountA)) + (inputSampleR * iirAmountA);
          highSampleR = inputSampleR - iirHighSampleRC;
          iirLowSampleRC = (iirLowSampleRC * (1.0 - iirAmountB)) + (inputSampleR * iirAmountB);
          bassSampleR = iirLowSampleRC;
      ) : (flipthree == 2) ?
      (
          tripletFactorL = last2SampleL - inputSampleL;
          tripletLB += tripletFactorL;
          tripletLA -= tripletFactorL;
          tripletFactorL = tripletLB * tripletIntensity;
          iirHighSampleLD = (iirHighSampleLD * (1.0 - iirAmountA)) + (inputSampleL * iirAmountA);
          highSampleL = inputSampleL - iirHighSampleLD;
          iirLowSampleLD = (iirLowSampleLD * (1.0 - iirAmountB)) + (inputSampleL * iirAmountB);
          bassSampleL = iirLowSampleLD;
          
          tripletFactorR = last2SampleR - inputSampleR;
          tripletRB += tripletFactorR;
          tripletRA -= tripletFactorR;
          tripletFactorR = tripletRB * tripletIntensity;
          iirHighSampleRD = (iirHighSampleRD * (1.0 - iirAmountA)) + (inputSampleR * iirAmountA);
          highSampleR = inputSampleR - iirHighSampleRD;
          iirLowSampleRD = (iirLowSampleRD * (1.0 - iirAmountB)) + (inputSampleR * iirAmountB);
          bassSampleR = iirLowSampleRD;
      ) : (flipthree == 3) ?
      (
          tripletFactorL = last2SampleL - inputSampleL;
          tripletLC += tripletFactorL;
          tripletLB -= tripletFactorL;
          tripletFactorL = tripletLC * tripletIntensity;
          iirHighSampleLE = (iirHighSampleLE * (1.0 - iirAmountA)) + (inputSampleL * iirAmountA);
          highSampleL = inputSampleL - iirHighSampleLE;
          iirLowSampleLE = (iirLowSampleLE * (1.0 - iirAmountB)) + (inputSampleL * iirAmountB);
          bassSampleL = iirLowSampleLE;
          
          tripletFactorR = last2SampleR - inputSampleR;
          tripletRC += tripletFactorR;
          tripletRB -= tripletFactorR;
          tripletFactorR = tripletRC * tripletIntensity;
          iirHighSampleRE = (iirHighSampleRE * (1.0 - iirAmountA)) + (inputSampleR * iirAmountA);
          highSampleR = inputSampleR - iirHighSampleRE;
          iirLowSampleRE = (iirLowSampleRE * (1.0 - iirAmountB)) + (inputSampleR * iirAmountB);
          bassSampleR = iirLowSampleRE;
      );
      tripletLA /= 2.0;
      tripletLB /= 2.0;
      tripletLC /= 2.0;
      highSampleL = highSampleL + tripletFactorL;
      
      tripletRA /= 2.0;
      tripletRB /= 2.0;
      tripletRC /= 2.0;
      highSampleR = highSampleR + tripletFactorR;
      
      (flip) ?
      (
        iirHighSampleLA = (iirHighSampleLA * (1.0 - iirAmountA)) + (highSampleL * iirAmountA);
        highSampleL -= iirHighSampleLA;
        iirLowSampleLA = (iirLowSampleLA * (1.0 - iirAmountB)) + (bassSampleL * iirAmountB);
        bassSampleL = iirLowSampleLA;
        
        iirHighSampleRA = (iirHighSampleRA * (1.0 - iirAmountA)) + (highSampleR * iirAmountA);
        highSampleR -= iirHighSampleRA;
        iirLowSampleRA = (iirLowSampleRA * (1.0 - iirAmountB)) + (bassSampleR * iirAmountB);
        bassSampleR = iirLowSampleRA;
      )
      :
      (
        iirHighSampleLB = (iirHighSampleLB * (1.0 - iirAmountA)) + (highSampleL * iirAmountA);
        highSampleL -= iirHighSampleLB;
        iirLowSampleLB = (iirLowSampleLB * (1.0 - iirAmountB)) + (bassSampleL * iirAmountB);
        bassSampleL = iirLowSampleLB;
        
        iirHighSampleRB = (iirHighSampleRB * (1.0 - iirAmountA)) + (highSampleR * iirAmountA);
        highSampleR -= iirHighSampleRB;
        iirLowSampleRB = (iirLowSampleRB * (1.0 - iirAmountB)) + (bassSampleR * iirAmountB);
        bassSampleR = iirLowSampleRB;
      );
      
      iirHighSampleL = (iirHighSampleL * (1.0 - iirAmountA)) + (highSampleL * iirAmountA);
      highSampleL -= iirHighSampleL;
      iirLowSampleL = (iirLowSampleL * (1.0 - iirAmountB)) + (bassSampleL * iirAmountB);
      bassSampleL = iirLowSampleL;
      
      iirHighSampleR = (iirHighSampleR * (1.0 - iirAmountA)) + (highSampleR * iirAmountA);
      highSampleR -= iirHighSampleR;
      iirLowSampleR = (iirLowSampleR * (1.0 - iirAmountB)) + (bassSampleR * iirAmountB);
      bassSampleR = iirLowSampleR;
      
      midSampleL = (inputSampleL-bassSampleL)-highSampleL;
      midSampleR = (inputSampleR-bassSampleR)-highSampleR;
      
      highSampleL *= (densityA+1.0);
      bridgerectifier = abs(highSampleL)*1.57079633;
      (bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;
      (densityA > 0) ? bridgerectifier = sin(bridgerectifier)
      : bridgerectifier = 1-cos(bridgerectifier);

      (highSampleL > 0) ? highSampleL = (highSampleL*(1-outA))+(bridgerectifier*outA)
      : highSampleL = (highSampleL*(1-outA))-(bridgerectifier*outA);
      
      highSampleR *= (densityA+1.0);
      bridgerectifier = abs(highSampleR)*1.57079633;
      (bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;

      (densityA > 0) ? bridgerectifier = sin(bridgerectifier)
      : bridgerectifier = 1-cos(bridgerectifier);

      (highSampleR > 0) ? highSampleR = (highSampleR*(1-outA))+(bridgerectifier*outA)
      : highSampleR = (highSampleR*(1-outA))-(bridgerectifier*outA);
      
      midSampleL *= (densityB+1.0);
      bridgerectifier = abs(midSampleL)*1.57079633;
      (bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;

      (densityB > 0) ? bridgerectifier = sin(bridgerectifier)
      : bridgerectifier = 1-cos(bridgerectifier);

      (midSampleL > 0) ? midSampleL = (midSampleL*(1-outB))+(bridgerectifier*outB)
      : midSampleL = (midSampleL*(1-outB))-(bridgerectifier*outB);

      midSampleR *= (densityB+1.0);
      bridgerectifier = abs(midSampleR)*1.57079633;
      (bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;
      
      (densityB > 0) ? bridgerectifier = sin(bridgerectifier)
      : bridgerectifier = 1-cos(bridgerectifier);

      (midSampleR > 0) ? midSampleR = (midSampleR*(1-outB))+(bridgerectifier*outB)
      : midSampleR = (midSampleR*(1-outB))-(bridgerectifier*outB);

      
      bassSampleL *= (densityC+1.0);
      bridgerectifier = abs(bassSampleL)*1.57079633;
      (bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;

      (densityC > 0) ? bridgerectifier = sin(bridgerectifier)
      : bridgerectifier = 1-cos(bridgerectifier);

      (bassSampleL > 0) ? bassSampleL = (bassSampleL*(1-outC))+(bridgerectifier*outC)
      : bassSampleL = (bassSampleL*(1-outC))-(bridgerectifier*outC);
      
      bassSampleR *= (densityC+1.0);
      bridgerectifier = abs(bassSampleR)*1.57079633;
      (bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;

      (densityC > 0) ? bridgerectifier = sin(bridgerectifier)
      : bridgerectifier = 1-cos(bridgerectifier);

      (bassSampleR > 0) ? bassSampleR = (bassSampleR*(1-outC))+(bridgerectifier*outC)
      : bassSampleR = (bassSampleR*(1-outC))-(bridgerectifier*outC);
      
      inputSampleL = midSampleL;
      inputSampleL += highSampleL;
      inputSampleL += bassSampleL;
      
      inputSampleR = midSampleR;
      inputSampleR += highSampleR;
      inputSampleR += bassSampleR;
    );

    (outputgain != 1.0) ? (
      inputSampleL *= outputgain;
      inputSampleR *= outputgain;
      rawSampleL = inputSampleL; 
      rawSampleR = inputSampleR; 
      (inputSampleL > 1.0) ? inputSampleL = 1.0;
      (inputSampleL < -1.0) ? inputSampleL = -1.0; 
      (inputSampleR > 1.0) ? inputSampleR = 1.0;
      (inputSampleR < -1.0) ? inputSampleR = -1.0; 
      phatSampleL = sin(inputSampleL * 1.57079633);
      phatSampleR = sin(inputSampleR * 1.57079633);
      inputSampleL *= 1.2533141373155;
      inputSampleR *= 1.2533141373155;
      distSampleL = sin(inputSampleL * abs(inputSampleL)) / ((abs(inputSampleL) == 0.0) ?1.0:abs(inputSampleL));
      distSampleR = sin(inputSampleR * abs(inputSampleR)) / ((abs(inputSampleR) == 0.0) ?1.0:abs(inputSampleR));
      inputSampleL = distSampleL;
      inputSampleR = distSampleR;
      (density < 1.0) ? (
        inputSampleL = (rawSampleL*(1.0-density))+(distSampleL*density);
        inputSampleR = (rawSampleR*(1.0-density))+(distSampleR*density);
      );
      (phattity > 0.0) ? (
        inputSampleL = (inputSampleL*(1.0-phattity))+(phatSampleL*phattity);
        inputSampleR = (inputSampleR*(1.0-phattity))+(phatSampleR*phattity);
      );
    );

spl0 = inputSampleL;
spl1 = inputSampleR;
