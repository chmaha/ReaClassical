Version: 1.0
desc:Flutternutter (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Flutter" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Flutter (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,1,0.01>Flutter

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
dL = freemem; freemem +=1002;
dR = freemem; freemem +=1002;

UINT32_MAX = 4294967295;

sweep = $pi;
rateof = 0.5;
nextmax = 0.5;

fpdL = rand(UINT32_MAX);
fpdR = rand(UINT32_MAX); 

@slider


@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

depth = pow(slider1,2)*overallscale*70;
fluttertrim = (0.0024*pow(slider1,2))/overallscale;


@sample 
inputSampleL = spl0;
inputSampleR = spl1;

(gcount < 0 || gcount > 999) ? gcount = 999;
dL[gcount] = inputSampleL; dR[gcount] = inputSampleR;
count = gcount | 0;
offset = depth + (depth * pow(rateof,2) * sin(sweep));
count += floor(offset) | 0;

inputSampleL = (dL[count-((count > 999)?1000:0)] * (1-(offset-floor(offset))));
inputSampleL += (dL[count+1-((count+1 > 999)?1000:0)] * (offset-floor(offset)));
inputSampleR = (dR[count-((count > 999)?1000:0)] * (1-(offset-floor(offset))));
inputSampleR += (dR[count+1-((count+1 > 999)?1000:0)] * (offset-floor(offset)));

rateof = (rateof * (1.0-fluttertrim)) + (nextmax * fluttertrim);
sweep += rateof * fluttertrim;
(sweep >= ($pi*2.0)) ? (sweep -= $pi; nextmax = 0.24 + (fpdL/UINT32_MAX * 0.74););
gcount-=1;

fpdL = rand(UINT32_MAX);
fpdR = rand(UINT32_MAX);

spl0 = inputSampleL;
spl1 = inputSampleR;
