NoIndex: true
desc:Heft (ReaClassical.org)
author: chmaha
about:
  Uses DSP from airwindows "Weight" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Weight (MIT License)
  JSFX version released under GPLv3 license

slider1:70<20,120,0.01>Frequency (Hz)
slider2:1<0,1,0.01>Weight

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
previousSampleL = freemem; freemem +=9;
previousTrendL = freemem; freemem +=9;
previousSampleR = freemem; freemem +=9;
previousTrendR = freemem; freemem +=9;

UINT32_MAX = 4294967295;

fpdL = 1.0; while (fpdL < 16386) (fpdL = rand()*UINT32_MAX);
fpdR = 1.0; while (fpdR < 16386) (fpdR = rand()*UINT32_MAX);

@slider

A = (slider1-20)/100;
B = slider2;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

targetFreq = A;
targetFreq = ((targetFreq+0.53)*0.2)/sqrt(overallscale);
alpha = pow(targetFreq,4);
out = B;
resControl = (out*0.05)+0.2;
beta = (alpha * pow(resControl,2));  
alpha += ((1.0-beta)*pow(targetFreq,3));

@sample
inputSampleL = spl0;
inputSampleR = spl1;
(abs(inputSampleL)<1.18*10^-23) ? inputSampleL = fpdL * 1.18*10^-17;
(abs(inputSampleR)<1.18*10^-23) ? inputSampleR = fpdR * 1.18*10^-17;

drySampleL = inputSampleL;
drySampleR = inputSampleR;

i = 0; while(i < 8) (
  trend = (beta * (inputSampleL - previousSampleL[i]) + ((0.999-beta) * previousTrendL[i]));
  forecast = previousSampleL[i] + previousTrendL[i];
  inputSampleL = (alpha * inputSampleL) + ((0.999-alpha) * forecast);
  previousSampleL[i] = inputSampleL; previousTrendL[i] = trend;
  
  trend = (beta * (inputSampleR - previousSampleR[i]) + ((0.999-beta) * previousTrendR[i]));
  forecast = previousSampleR[i] + previousTrendR[i];
  inputSampleR = (alpha * inputSampleR) + ((0.999-alpha) * forecast);
  previousSampleR[i] = inputSampleR; previousTrendR[i] = trend;
  i+=1; 
);

inputSampleL *= out;
inputSampleR *= out;
inputSampleL += drySampleL;
inputSampleR += drySampleR;

fpdL = rand(UINT32_MAX);
fpdR = rand(UINT32_MAX);

spl0 = inputSampleL;
spl1 = inputSampleR;
