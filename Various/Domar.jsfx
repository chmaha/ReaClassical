Version: 1.0
desc:Domar Brightness Acceleration Limiter (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Acceleration2" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Acceleration2 (MIT License)
  JSFX version released under GPLv3 license

slider1:0.32<0,1,0.01>Limit
slider2:1<0,1,0.01>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
sL = freemem; freemem+=34;
sR = freemem; freemem+=34;
biquadA = freemem; freemem+=11;
biquadB = freemem; freemem+=11;

@slider

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

intensity = pow(slider1,3)*32;
wet = slider2;  
spacing = ((1.73*overallscale)+1) | 0;
(spacing > 16) ? spacing = 16;

biquadA[0] = (20000.0 * (1.0-(slider1*0.618033988749894848204586))) / srate;
biquadB[0] = 20000.0 / srate;
biquadA[1] = 0.7071;
biquadB[1] = 0.7071;

K = tan($pi * biquadA[0]);
norm = 1.0 / (1.0 + K / biquadA[1] + K * K);
biquadA[2] = K * K * norm;
biquadA[3] = 2.0 * biquadA[2];
biquadA[4] = biquadA[2];
biquadA[5] = 2.0 * (K * K - 1.0) * norm;
biquadA[6] = (1.0 - K / biquadA[1] + K * K) * norm;

K = tan($pi * biquadB[0]);
norm = 1.0 / (1.0 + K / biquadB[1] + K * K);
biquadB[2] = K * K * norm;
biquadB[3] = 2.0 * biquadB[2];
biquadB[4] = biquadB[2];
biquadB[5] = 2.0 * (K * K - 1.0) * norm;
biquadB[6] = (1.0 - K / biquadB[1] + K * K) * norm;  

@sample
inputSampleL = spl0;
inputSampleR = spl1;

drySampleL = inputSampleL;
drySampleR = inputSampleR;

tempSample = (inputSampleL * biquadA[2]) + biquadA[7];
biquadA[7] = (inputSampleL * biquadA[3]) - (tempSample * biquadA[5]) + biquadA[8];
biquadA[8] = (inputSampleL * biquadA[4]) - (tempSample * biquadA[6]);
smoothL = tempSample;

tempSample = (inputSampleR * biquadA[2]) + biquadA[9];
biquadA[9] = (inputSampleR * biquadA[3]) - (tempSample * biquadA[5]) + biquadA[10];
biquadA[10] = (inputSampleR * biquadA[4]) - (tempSample * biquadA[6]);
smoothR = tempSample;

count = spacing*2; while(count >= 0) (sL[count+1] = sL[count]; sR[count+1] = sR[count];count-=1;);
sL[0] = inputSampleL; sR[0] = inputSampleR;

m1L = (sL[0]-sL[spacing])*(abs(sL[0]-sL[spacing]));
m2L = (sL[spacing]-sL[spacing*2])*(abs(sL[spacing]-sL[spacing*2]));
senseL = (intensity*intensity*abs(m1L-m2L));
(senseL > 1.0) ? senseL = 1.0;
inputSampleL = (inputSampleL * (1.0-senseL)) + (smoothL*senseL);

m1R = (sR[0]-sR[spacing])*(abs(sR[0]-sR[spacing]));
m2R = (sR[spacing]-sR[spacing*2])*(abs(sR[spacing]-sR[spacing*2]));
senseR = (intensity*intensity*abs(m1R-m2R));
(senseR > 1.0) ? senseR = 1.0;
inputSampleR = (inputSampleR * (1.0-senseR)) + (smoothR*senseR);    

tempSample = (inputSampleL * biquadB[2]) + biquadB[7];
biquadB[7] = (inputSampleL * biquadB[3]) - (tempSample * biquadB[5]) + biquadB[8];
biquadB[8] = (inputSampleL * biquadB[4]) - (tempSample * biquadB[6]);
inputSampleL = tempSample;

tempSample = (inputSampleR * biquadB[2]) + biquadB[9];
biquadB[9] = (inputSampleR * biquadB[3]) - (tempSample * biquadB[5]) + biquadB[10];
biquadB[10] = (inputSampleR * biquadB[4]) - (tempSample * biquadB[6]);
inputSampleR = tempSample;

(wet !=1.0) ? (
  inputSampleL = (inputSampleL * wet) + (drySampleL * (1.0-wet));
  inputSampleR = (inputSampleR * wet) + (drySampleR * (1.0-wet));
);

spl0 = inputSampleL;
spl1 = inputSampleR;
