NoIndex: true
desc:Orpheus Bus Out (ReaClassical.org)
author: chmaha
version: 1.1
Changelog:
  Initial commit
about:
  Uses DSP from airwindows "Console8" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Console8 (MIT License)
  JSFX version released under GPLv3 license

slider1:0.5<0,1,0.01>Fader

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;

UINT32_MAX = 4294967295;
M_PI = 3.1415926535897932384626433;

fpdL = 1.0; while (fpdL < 16386) (fpdL = rand()*UINT32_MAX);
fpdR = 1.0; while (fpdR < 16386) (fpdR = rand()*UINT32_MAX);

@slider

inTrim = slider1*2.0;

@block

(srate > 49000.0) ? hsr = 1 : hsr = 0;
fix_freq = 24000.0 / srate;
fix_reso = 0.52110856;
K = tan(M_PI * fix_freq); 
norm = 1.0 / (1.0 + K / fix_reso + K * K);
fix_a0 = K * K * norm;
fix_a1 = 2.0 * fix_a0;
fix_a2 = fix_a0;
fix_b1 = 2.0 * (K * K - 1.0) * norm;
fix_b2 = (1.0 - K / fix_reso + K * K) * norm;

overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;  
spacing = floor(overallscale); 
(spacing < 1) ? spacing = 1; (spacing > 16) ? spacing = 16;

@sample
inputSampleL = spl0;
inputSampleR = spl1;
(abs(inputSampleL)<1.18*10^-23) ? inputSampleL = fpdL * 1.18*10^-17;
(abs(inputSampleR)<1.18*10^-23) ? inputSampleR = fpdR * 1.18*10^-17;

inputSampleL *= inTrim;
(inputSampleL > 1.57079633) ? inputSampleL = 1.57079633; (inputSampleL < -1.57079633) ? inputSampleL = -1.57079633;
inputSampleL = sin(inputSampleL);

inputSampleR *= inTrim;
(inputSampleR > 1.57079633) ? inputSampleR = 1.57079633; (inputSampleR < -1.57079633) ? inputSampleR = -1.57079633;
inputSampleR = sin(inputSampleR);

(hsr) ? (
  outSample = (inputSampleL * fix_a0) + fix_sL1;
  fix_sL1 = (inputSampleL * fix_a1) - (outSample * fix_b1) + fix_sL2;
  fix_sL2 = (inputSampleL * fix_a2) - (outSample * fix_b2);
  inputSampleL = outSample;
  outSample = (inputSampleR * fix_a0) + fix_sR1;
  fix_sR1 = (inputSampleR * fix_a1) - (outSample * fix_b1) + fix_sR2;
  fix_sR2 = (inputSampleR * fix_a2) - (outSample * fix_b2);
  inputSampleR = outSample;
); 
inputSampleL *= inTrim; inputSampleR *= inTrim;

fpdL ~= fpdL << 13; fpdL ~= fpdL >> 17; fpdL ~= fpdL << 5;
fpdR ~= fpdR << 13; fpdR ~= fpdR >> 17; fpdR ~= fpdR << 5;
(fpdL < 0) ? fpdL += UINT32_MAX;
(fpdR < 0) ? fpdR += UINT32_MAX;

spl0 = inputSampleL;
spl1 = inputSampleR;

