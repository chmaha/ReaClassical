Version: 1.2
desc:MagicFairyDust Console Saturation (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Channel9" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Channel9 (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,2,1{Burnley,Maryland,Oxford}>Console Type
slider2:0<0,200,1>Drive %
slider3:1<0,1,0.01>Output

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
biquadA = freemem; freemem+=15;
biquadB = freemem; freemem+=15;

UINT32_MAX = 4294967295;
M_PI = 3.1415926535897932384626433;

A = 0.0;
B = 0.0;
C = 1.0;
x = 0; loop(15,biquadA[x] = 0.0;biquadB[x] = 0.0;x+=1;);

iirSampleLA = 0.0;
iirSampleRA = 0.0;
iirSampleLB = 0.0;
iirSampleRB = 0.0;
lastSampleAL = lastSampleBL = lastSampleCL = 0.0;
lastSampleAR = lastSampleBR = lastSampleCR = 0.0;
flip = 0;
iirAmount = 0.005832;
threshold = 0.33362176; //instantiating with Neve values
cutoff = 28811.0;

@slider
A = slider1;
B = slider2/200;
C = slider3;

(A == 0) ? (iirAmount = 0.005832; threshold = 0.33362176; cutoff = 28811.0;); //Burnley
(A == 1) ? (iirAmount = 0.004096; threshold = 0.59969536; cutoff = 27216.0;); //Maryland
(A == 2) ? (iirAmount = 0.004913; threshold = 0.84934656; cutoff = 23011.0;); //Oxford

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;  
localiirAmount = iirAmount / overallscale;
localthreshold = threshold; //we've learned not to try and adjust threshold for sample rate
density = B*2.0; //0-2
phattity = density - 1.0;
(density > 1.0) ? density = 1.0; //max out at full wet for Spiral aspect
(phattity < 0.0) ? phattity = 0.0; //
nonLin = 5.0-density; //number is smaller for more intense, larger for more subtle
biquadB[0] = biquadA[0] = cutoff / srate;
biquadA[1] = 1.618033988749894848204586;
biquadB[1] = 0.618033988749894848204586;

K = tan(M_PI * biquadA[0]); //lowpass
norm = 1.0 / (1.0 + K / biquadA[1] + K * K);
biquadA[2] = K * K * norm;
biquadA[3] = 2.0 * biquadA[2];
biquadA[4] = biquadA[2];
biquadA[5] = 2.0 * (K * K - 1.0) * norm;
biquadA[6] = (1.0 - K / biquadA[1] + K * K) * norm;

K = tan(M_PI * biquadA[0]);
norm = 1.0 / (1.0 + K / biquadB[1] + K * K);
biquadB[2] = K * K * norm;
biquadB[3] = 2.0 * biquadB[2];
biquadB[4] = biquadB[2];
biquadB[5] = 2.0 * (K * K - 1.0) * norm;
biquadB[6] = (1.0 - K / biquadB[1] + K * K) * norm;

@sample

inputSampleL = spl0;
inputSampleR = spl1;


(biquadA[0] < 0.49999) ? (
  tempSample = biquadA[2]*inputSampleL+biquadA[3]*biquadA[7]+biquadA[4]*biquadA[8]-biquadA[5]*biquadA[9]-biquadA[6]*biquadA[10];
  biquadA[8] = biquadA[7]; biquadA[7] = inputSampleL; (abs(tempSample)<1.18*10^-37) ? tempSample = 0.0; inputSampleL = tempSample;
  biquadA[10] = biquadA[9]; biquadA[9] = inputSampleL; //DF1 left
  tempSample = biquadA[2]*inputSampleR+biquadA[3]*biquadA[11]+biquadA[4]*biquadA[12]-biquadA[5]*biquadA[13]-biquadA[6]*biquadA[14];
  biquadA[12] = biquadA[11]; biquadA[11] = inputSampleR;(abs(tempSample)<1.18*10^-37) ? tempSample = 0.0; inputSampleR = tempSample;
  biquadA[14] = biquadA[13]; biquadA[13] = inputSampleR; //DF1 right
);    

dielectricScaleL = abs(2.0-((inputSampleL+nonLin)/nonLin));
dielectricScaleR = abs(2.0-((inputSampleR+nonLin)/nonLin));

(flip) ?
(
  (abs(iirSampleLA)<1.18*10^-37) ? iirSampleLA = 0.0; 
  iirSampleLA = (iirSampleLA * (1.0 - (localiirAmount * dielectricScaleL))) + (inputSampleL * localiirAmount * dielectricScaleL);
  inputSampleL = inputSampleL - iirSampleLA;
  (abs(iirSampleRA)<1.18*10^-37) ? iirSampleRA = 0.0; 
  iirSampleRA = (iirSampleRA * (1.0 - (localiirAmount * dielectricScaleR))) + (inputSampleR * localiirAmount * dielectricScaleR);
  inputSampleR = inputSampleR - iirSampleRA;
)
:
(
  (abs(iirSampleLB)<1.18*10^-37) ? iirSampleLB = 0.0; 
  iirSampleLB = (iirSampleLB * (1.0 - (localiirAmount * dielectricScaleL))) + (inputSampleL * localiirAmount * dielectricScaleL);
  inputSampleL = inputSampleL - iirSampleLB;
  (abs(iirSampleRB)<1.18*10^-37) ? iirSampleRB = 0.0; 
  iirSampleRB = (iirSampleRB * (1.0 - (localiirAmount * dielectricScaleR))) + (inputSampleR * localiirAmount * dielectricScaleR);
  inputSampleR = inputSampleR - iirSampleRB;
);
//highpass section
drySampleL = inputSampleL;
drySampleR = inputSampleR;

(inputSampleL > 1.0) ? inputSampleL = 1.0;
(inputSampleL < -1.0) ? inputSampleL = -1.0;
phatSampleL = sin(inputSampleL * 1.57079633);
inputSampleL *= 1.2533141373155;
//clip to 1.2533141373155 to reach maximum output, or 1.57079633 for pure sine 'phat' version

distSampleL = sin(inputSampleL * abs(inputSampleL)) / ((abs(inputSampleL) == 0.0) ?1:abs(inputSampleL));

inputSampleL = distSampleL; //purest form is full Spiral
(density < 1.0) ? inputSampleL = (drySampleL*(1-density))+(distSampleL*density); //fade Spiral aspect
(phattity > 0.0) ? inputSampleL = (inputSampleL*(1-phattity))+(phatSampleL*phattity); //apply original Density on top

(inputSampleR > 1.0) ? inputSampleR = 1.0;
(inputSampleR < -1.0) ? inputSampleR = -1.0;
phatSampleR = sin(inputSampleR * 1.57079633);
inputSampleR *= 1.2533141373155;
//clip to 1.2533141373155 to reach maximum output, or 1.57079633 for pure sine 'phat' version

distSampleR = sin(inputSampleR * abs(inputSampleR)) / ((abs(inputSampleR) == 0.0) ?1:abs(inputSampleR));

inputSampleR = distSampleR; //purest form is full Spiral
(density < 1.0) ? inputSampleR = (drySampleR*(1-density))+(distSampleR*density); //fade Spiral aspect
(phattity > 0.0) ? inputSampleR = (inputSampleR*(1-phattity))+(phatSampleR*phattity); //apply original Density on top

//begin L
clamp = (lastSampleBL - lastSampleCL) * 0.381966011250105;
clamp -= (lastSampleAL - lastSampleBL) * 0.6180339887498948482045;
clamp += inputSampleL - lastSampleAL; //regular slew clamping added

lastSampleCL = lastSampleBL;
lastSampleBL = lastSampleAL;
lastSampleAL = inputSampleL; //now our output relates off lastSampleB

(clamp > localthreshold) ?
  inputSampleL = lastSampleBL + localthreshold;
(-clamp > localthreshold) ?
  inputSampleL = lastSampleBL - localthreshold;

lastSampleAL = (lastSampleAL*0.381966011250105)+(inputSampleL*0.6180339887498948482045); //split the difference between raw and smoothed for buffer
//end L

//begin R
clamp = (lastSampleBR - lastSampleCR) * 0.381966011250105;
clamp -= (lastSampleAR - lastSampleBR) * 0.6180339887498948482045;
clamp += inputSampleR - lastSampleAR; //regular slew clamping added

lastSampleCR = lastSampleBR;
lastSampleBR = lastSampleAR;
lastSampleAR = inputSampleR; //now our output relates off lastSampleB

(clamp > localthreshold) ?
  inputSampleR = lastSampleBR + localthreshold;
(-clamp > localthreshold) ?
  inputSampleR = lastSampleBR - localthreshold;

lastSampleAR = (lastSampleAR*0.381966011250105)+(inputSampleR*0.6180339887498948482045); //split the difference between raw and smoothed for buffer
//end R

flip = !flip;

(C < 1.0) ? (
  inputSampleL *= C;
  inputSampleR *= C;
);

(biquadB[0] < 0.49999) ? (
  tempSample = biquadB[2]*inputSampleL+biquadB[3]*biquadB[7]+biquadB[4]*biquadB[8]-biquadB[5]*biquadB[9]-biquadB[6]*biquadB[10];
  biquadB[8] = biquadB[7]; biquadB[7] = inputSampleL;(abs(tempSample)<1.18*10^-37) ? tempSample = 0.0; inputSampleL = tempSample;
  biquadB[10] = biquadB[9]; biquadB[9] = inputSampleL; //DF1 left
  tempSample = biquadB[2]*inputSampleR+biquadB[3]*biquadB[11]+biquadB[4]*biquadB[12]-biquadB[5]*biquadB[13]-biquadB[6]*biquadB[14];
  biquadB[12] = biquadB[11]; biquadB[11] = inputSampleR;(abs(tempSample)<1.18*10^-37) ? tempSample = 0.0; inputSampleR = tempSample;
  biquadB[14] = biquadB[13]; biquadB[13] = inputSampleR; //DF1 right
);    

 

spl0 = inputSampleL;
spl1 = inputSampleR;
    
