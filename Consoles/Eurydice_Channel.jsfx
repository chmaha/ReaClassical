@noindex
desc:Eurydice Channel (ReaClassical.org)
author: chmaha
version: 1.0
Changelog:
  Initial commit
about:
  Uses DSP from airwindows "PurestConsole2" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/PurestConsole2Channel (MIT License)
  JSFX version released under GPLv3 license


in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
biquadA = freemem; freemem += 15;

UINT32_MAX = 4294967295;
M_PI = 3.1415926535897932384626433;

x = 0; while(x < 15) (biquadA[x] = 0.0;x+=1;);
fpdL = 1.0; while (fpdL < 16386) (fpdL = rand()*UINT32_MAX);
fpdR = 1.0; while (fpdR < 16386) (fpdR = rand()*UINT32_MAX);

@slider

@block
biquadA[0] = 30000.0 / srate;
biquadA[1] = 0.618033988749894848204586;

K = tan(M_PI * biquadA[0]); //lowpass
norm = 1.0 / (1.0 + K / biquadA[1] + K * K);
biquadA[2] = K * K * norm;
biquadA[3] = 2.0 * biquadA[2];
biquadA[4] = biquadA[2];
biquadA[5] = 2.0 * (K * K - 1.0) * norm;
biquadA[6] = (1.0 - K / biquadA[1] + K * K) * norm;



@sample
inputSampleL = spl0;
inputSampleR = spl1;
(abs(inputSampleL)<1.18*10^-23) ? inputSampleL = fpdL * 1.18*10^-17;
(abs(inputSampleR)<1.18*10^-23) ? inputSampleR = fpdR * 1.18*10^-17;


(biquadA[0] < 0.49999) ? (
  tempSample = biquadA[2]*inputSampleL+biquadA[3]*biquadA[7]+biquadA[4]*biquadA[8]-biquadA[5]*biquadA[9]-biquadA[6]*biquadA[10];
  biquadA[8] = biquadA[7]; biquadA[7] = inputSampleL; inputSampleL = tempSample;
  biquadA[10] = biquadA[9]; biquadA[9] = inputSampleL; //DF1 left
  tempSample = biquadA[2]*inputSampleR+biquadA[3]*biquadA[11]+biquadA[4]*biquadA[12]-biquadA[5]*biquadA[13]-biquadA[6]*biquadA[14];
  biquadA[12] = biquadA[11]; biquadA[11] = inputSampleR; inputSampleR = tempSample;
  biquadA[14] = biquadA[13]; biquadA[13] = inputSampleR; //DF1 right
);   

(inputSampleL > 1.57079633) ? inputSampleL = 1.57079633;
(inputSampleL < -1.57079633) ? inputSampleL = -1.57079633;
(inputSampleR > 1.57079633) ? inputSampleR = 1.57079633;
(inputSampleR < -1.57079633) ? inputSampleR = -1.57079633;
  
inputSampleL = sin(inputSampleL);
inputSampleR = sin(inputSampleR);


fpdL ~= fpdL << 13; fpdL ~= fpdL >> 17; fpdL ~= fpdL << 5;
fpdR ~= fpdR << 13; fpdR ~= fpdR >> 17; fpdR ~= fpdR << 5;
(fpdL < 0) ? fpdL += UINT32_MAX;
(fpdR < 0) ? fpdR += UINT32_MAX;

spl0 = inputSampleL;
spl1 = inputSampleR;
