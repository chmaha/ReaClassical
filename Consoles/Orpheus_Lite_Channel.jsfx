NoIndex: true
desc:Orpheus Lite Console Channel (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Console8LiteChannel" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Console8LiteChannel (MIT License)
  JSFX version released under GPLv3 license

slider1:0.5<0,1,0.01>Fader

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
fix = freemem; freemem +=11;
fixB = freemem; freemem +=11;
softL = freemem; freemem +=11;
softR = freemem; freemem +=11;

UINT32_MAX = 4294967295;



@slider

inTrim = slider1*2.0;

@block
iirAmountA = 12.66/srate;
(abs(iirAL)<1.18*10^-37) ? iirAL = 0.0;
(abs(iirBL)<1.18*10^-37) ? iirBL = 0.0;
(abs(iirAR)<1.18*10^-37) ? iirAR = 0.0;
(abs(iirBR)<1.18*10^-37) ? iirBR = 0.0;

(srate > 49000.0) ? hsr = 1 : hsr = 0;
fix[0] = 24000.0 / srate;
fix[1] = 2.24697960;
K = tan($pi * fix[0]);
norm = 1.0 / (1.0 + K / fix[1] + K * K);
fix[2] = K * K * norm;
fix[3] = 2.0 * fix[2];
fix[4] = fix[2];
fix[5] = 2.0 * (K * K - 1.0) * norm;
fix[6] = (1.0 - K / fix[1] + K * K) * norm;

fixB[0] = 24000.0 / srate;
fixB[1] = 0.80193774;
K = tan($pi * fixB[0]); 
norm = 1.0 / (1.0 + K / fixB[1] + K * K);
fixB[2] = K * K * norm;
fixB[3] = 2.0 * fixB[2];
fixB[4] = fixB[2];
fixB[5] = 2.0 * (K * K - 1.0) * norm;
fixB[6] = (1.0 - K / fixB[1] + K * K) * norm;

overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;
cycleEnd = floor(overallscale) | 0;
(cycleEnd < 1) ? cycleEnd = 1;
(cycleEnd == 3) ? cycleEnd = 4;
(cycleEnd > 4) ? cycleEnd = 4;

@sample
inputSampleL = spl0;
inputSampleR = spl1;


iirAL = (iirAL * (1.0 - iirAmountA)) + (inputSampleL * iirAmountA);
iirAmountBL = abs(iirAL)+0.00001;
iirBL = (iirBL * (1.0 - iirAmountBL)) + (iirAL * iirAmountBL);
inputSampleL -= iirBL;
iirAR = (iirAR * (1.0 - iirAmountA)) + (inputSampleR * iirAmountA);
iirAmountBR = abs(iirAR)+0.00001;
iirBR = (iirBR * (1.0 - iirAmountBR)) + (iirAR * iirAmountBR);
inputSampleR -= iirBR;

(cycleEnd == 4) ? (
  softL[8] = softL[7]; softL[7] = softL[6]; softL[6] = softL[5]; softL[5] = softL[4];
  softL[4] = softL[3]; softL[3] = softL[2]; softL[2] = softL[1]; softL[1] = softL[0];
  softL[0] = inputSampleL;
  softR[8] = softR[7]; softR[7] = softR[6]; softR[6] = softR[5]; softR[5] = softR[4];
  softR[4] = softR[3]; softR[3] = softR[2]; softR[2] = softR[1]; softR[1] = softR[0];
  softR[0] = inputSampleR;
);
(cycleEnd == 2) ? (
  softL[8] = softL[6]; softL[6] = softL[4];
  softL[4] = softL[2]; softL[2] = softL[0];
  softL[0] = inputSampleL;
  softR[8] = softR[6]; softR[6] = softR[4];
  softR[4] = softR[2]; softR[2] = softR[0];
  softR[0] = inputSampleR;
);
(cycleEnd == 1) ? (
  softL[8] = softL[4];
  softL[4] = softL[0];
  softL[0] = inputSampleL;
  softR[8] = softR[4];
  softR[4] = softR[0];
  softR[0] = inputSampleR;
);
softL[9] = ((softL[0]-softL[4])-(softL[4]-softL[8]));
(softL[9] > 0.91416342) ? inputSampleL = softL[4]+(abs(softL[4])*sin(softL[9]-0.91416342)*0.08583658);
(-softL[9] > 0.91416342) ? inputSampleL = softL[4]-(abs(softL[4])*sin(-softL[9]-0.91416342)*0.08583658);

(inputSampleL > 1.57079633) ? inputSampleL = 1.57079633; (inputSampleL < -1.57079633) ? inputSampleL = -1.57079633;
softR[9] = ((softR[0]-softR[4])-(softR[4]-softR[8]));
(softR[9] > 0.91416342) ? inputSampleR = softR[4]+(abs(softR[4])*sin(softR[9]-0.91416342)*0.08583658);
(-softR[9] > 0.91416342) ? inputSampleR = softR[4]-(abs(softR[4])*sin(-softR[9]-0.91416342)*0.08583658);

(inputSampleR > 1.57079633) ? inputSampleR = 1.57079633; (inputSampleR < -1.57079633) ? inputSampleR = -1.57079633;
(hsr) ? (
  outSample = (inputSampleL * fix[2]) + fix[7];
  fix[7] = (inputSampleL * fix[3]) - (outSample * fix[5]) + fix[8];
  fix[8] = (inputSampleL * fix[4]) - (outSample * fix[6]);
  inputSampleL = outSample;
  outSample = (inputSampleR * fix[2]) + fix[9];
  fix[9] = (inputSampleR * fix[3]) - (outSample * fix[5]) + fix[10];
  fix[10] = (inputSampleR * fix[4]) - (outSample * fix[6]);
  inputSampleR = outSample;
);

inputSampleL *= inTrim;
(inputSampleL > 1.57079633) ? inputSampleL = 1.57079633; (inputSampleL < -1.57079633) ? inputSampleL = -1.57079633;
inputSampleL = sin(inputSampleL);
inputSampleR *= inTrim;
(inputSampleR > 1.57079633) ? inputSampleR = 1.57079633; (inputSampleR < -1.57079633) ? inputSampleR = -1.57079633;
inputSampleR = sin(inputSampleR);

(hsr) ? (
  outSample = (inputSampleL * fixB[2]) + fixB[7];
  fixB[7] = (inputSampleL * fixB[3]) - (outSample * fixB[5]) + fixB[8];
  fixB[8] = (inputSampleL * fixB[4]) - (outSample * fixB[6]);
  inputSampleL = outSample;
  outSample = (inputSampleR * fixB[2]) + fixB[9];
  fixB[9] = (inputSampleR * fixB[3]) - (outSample * fixB[5]) + fixB[10];
  fixB[10] = (inputSampleR * fixB[4]) - (outSample * fixB[6]);
  inputSampleR = outSample;
); 
inputSampleL *= inTrim;
(inputSampleL > 1.57079633) ? inputSampleL = 1.57079633; (inputSampleL < -1.57079633) ? inputSampleL = -1.57079633;
inputSampleL = sin(inputSampleL);
inputSampleR *= inTrim;
(inputSampleR > 1.57079633) ? inputSampleR = 1.57079633; (inputSampleR < -1.57079633) ? inputSampleR = -1.57079633;
inputSampleR = sin(inputSampleR);




spl0 = inputSampleL;
spl1 = inputSampleR;
