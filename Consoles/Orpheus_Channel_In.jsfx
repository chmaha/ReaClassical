NoIndex: true
desc:Orpheus Console Channel In (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Console8" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Console8 (MIT License)
  JSFX version released under GPLv3 license

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
softL = freemem; freemem+=11;
softR = freemem; freemem+=11;

UINT32_MAX = 4294967295;
M_PI = 3.1415926535897932384626433;

iirAL = 0.0; iirBL = 0.0; iirAR = 0.0; iirBR = 0.0;
x=0; while(x < 10) (softL[x] = 0.0; softR[x] = 0.0;x+=1;);


@slider


@block
iirAmountA = 12.66/srate;
  //this is our distributed unusual highpass, which is
  //adding subtle harmonics to the really deep stuff to define it
  (abs(iirAL)<1.18*10^-37) ? iirAL = 0.0;
  (abs(iirBL)<1.18*10^-37) ? iirBL = 0.0;
  (abs(iirAR)<1.18*10^-37) ? iirAR = 0.0;
  (abs(iirBR)<1.18*10^-37) ? iirBR = 0.0;
  //catch denormals early and only check once per buffer
  (srate > 49000.0) ? hsr = 1
  : hsr = 0;
  fix_freq = 24000.0 / srate;
  fix_reso = 0.5;
  K = tan(M_PI * fix_freq); //lowpass
  norm = 1.0 / (1.0 + K / fix_reso + K * K);
  fix_a0 = K * K * norm;
  fix_a1 = 2.0 * fix_a0;
  fix_a2 = fix_a0;
  fix_b1 = 2.0 * (K * K - 1.0) * norm;
  fix_b2 = (1.0 - K / fix_reso + K * K) * norm;
  //this is the fixed biquad distributed anti-aliasing filter
  overallscale = 1.0;
  overallscale /= 44100.0;
  overallscale *= srate;
  cycleEnd = floor(overallscale);
  (cycleEnd < 1) ? cycleEnd = 1;
  (cycleEnd == 3) ? cycleEnd = 4;
  (cycleEnd > 4) ? cycleEnd = 4;
  //this is going to be 2 for 88.1 or 96k, 4 for 176 or 192k

@sample
inputSampleL = spl0;
inputSampleR = spl1;



iirAL = (iirAL * (1.0 - iirAmountA)) + (inputSampleL * iirAmountA);
iirAmountBL = abs(iirAL)+0.00001;
iirBL = (iirBL * (1.0 - iirAmountBL)) + (iirAL * iirAmountBL);
inputSampleL -= iirBL;
iirAR = (iirAR * (1.0 - iirAmountA)) + (inputSampleR * iirAmountA);
iirAmountBR = abs(iirAR)+0.00001;
iirBR = (iirBR * (1.0 - iirAmountBR)) + (iirAR * iirAmountBR);
inputSampleR -= iirBR;
//Console8 highpass
(cycleEnd == 4) ? (
  softL[8] = softL[7]; softL[7] = softL[6]; softL[6] = softL[5]; softL[5] = softL[4];
  softL[4] = softL[3]; softL[3] = softL[2]; softL[2] = softL[1]; softL[1] = softL[0];
  softL[0] = inputSampleL;
  softR[8] = softR[7]; softR[7] = softR[6]; softR[6] = softR[5]; softR[5] = softR[4];
  softR[4] = softR[3]; softR[3] = softR[2]; softR[2] = softR[1]; softR[1] = softR[0];
  softR[0] = inputSampleR;
);
(cycleEnd == 2) ? (
  softL[8] = softL[6]; softL[6] = softL[4];
  softL[4] = softL[2]; softL[2] = softL[0];
  softL[0] = inputSampleL;
  softR[8] = softR[6]; softR[6] = softR[4];
  softR[4] = softR[2]; softR[2] = softR[0];
  softR[0] = inputSampleR;
);
(cycleEnd == 1) ? (
  softL[8] = softL[4];
  softL[4] = softL[0];
  softL[0] = inputSampleL;
  softR[8] = softR[4];
  softR[4] = softR[0];
  softR[0] = inputSampleR;
);
softL[9] = ((softL[0]-softL[4])-(softL[4]-softL[8]));
(softL[9] > 0.56852180) ? inputSampleL = softL[4]+(abs(softL[4])*sin(softL[9]-0.56852180)*0.4314782);
(-softL[9] > 0.56852180) ? inputSampleL = softL[4]-(abs(softL[4])*sin(-softL[9]-0.56852180)*0.4314782);
//Console8 slew soften: must be clipped or it can generate NAN out of the full system
(inputSampleL > 1.57079633) ? inputSampleL = 1.57079633; (inputSampleL < -1.57079633) ? inputSampleL = -1.57079633;
softR[9] = ((softR[0]-softR[4])-(softR[4]-softR[8]));
(softR[9] > 0.56852180) ? inputSampleR = softR[4]+(abs(softR[4])*sin(softR[9]-0.56852180)*0.4314782);
(-softR[9] > 0.56852180) ? inputSampleR = softR[4]-(abs(softR[4])*sin(-softR[9]-0.56852180)*0.4314782);
//Console8 slew soften: must be clipped or it can generate NAN out of the full system
(inputSampleR > 1.57079633) ? inputSampleR = 1.57079633; (inputSampleR < -1.57079633) ? inputSampleR = -1.57079633;
(hsr) ? (
  outSample = (inputSampleL * fix_a0) + fix_sL1;
  fix_sL1 = (inputSampleL * fix_a1) - (outSample * fix_b1) + fix_sL2;
  fix_sL2 = (inputSampleL * fix_a2) - (outSample * fix_b2);
  inputSampleL = outSample;
  outSample = (inputSampleR * fix_a0) + fix_sR1;
  fix_sR1 = (inputSampleR * fix_a1) - (outSample * fix_b1) + fix_sR2;
  fix_sR2 = (inputSampleR * fix_a2) - (outSample * fix_b2);
  inputSampleR = outSample;
); //fixed biquad filtering ultrasonics    
(inputSampleL > 1.0) ? inputSampleL = 1.0; (inputSampleL < -1.0) ? inputSampleL = -1.0;
inputSampleL = asin(inputSampleL); //Console8 decode
(inputSampleR > 1.0) ? inputSampleR = 1.0; (inputSampleR < -1.0) ? inputSampleR = -1.0;
inputSampleR = asin(inputSampleR); //Console8 decode


 

spl0 = inputSampleL;
spl1 = inputSampleR;

