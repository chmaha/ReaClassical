Version: 1.2
desc:Supersonic Filter (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "HyperSonic" and "Ultrasonic" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/HyperSonic (MIT License)
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/UltraSonic (MIT License)
  JSFX version released under GPLv3 license

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

slider1:0<0,3,1{Hypersonic,Ultrasonic,Ultrasonic Medium,Ultrasonic Lite}>Filter

@init
freemem = 0;
fixA = freemem; freemem +=12;
fixB = freemem; freemem +=12;
fixC = freemem; freemem +=12;
fixD = freemem; freemem +=12;
fixE = freemem; freemem +=12;
fixF = freemem; freemem +=12;
fixG = freemem; freemem +=12;

biquadA = freemem; freemem +=15;
biquadB = freemem; freemem +=15;
biquadC = freemem; freemem +=15;
biquadD = freemem; freemem +=15;
biquadE = freemem; freemem +=15;

UINT32_MAX = 4294967295;



@slider


@block

(slider1 == 0) ? (
  
  cutoff = 25000.0 / srate;
  (cutoff > 0.49) ? cutoff = 0.49;
  
  fixG[0] = fixF[0] = fixE[0] = fixD[0] = fixC[0] = fixB[0] = fixA[0] = cutoff;
  
  fixA[1] = 4.46570214;
  fixB[1] = 1.51387132;
  fixC[1] = 0.93979296;
  fixD[1] = 0.70710678;
  fixE[1] = 0.59051105;
  fixF[1] = 0.52972649;
  fixG[1] = 0.50316379;
  
  K = tan($pi * fixA[0]);
  norm = 1.0 / (1.0 + K / fixA[1] + K * K);
  fixA[2] = K * K * norm;
  fixA[3] = 2.0 * fixA[2];
  fixA[4] = fixA[2];
  fixA[5] = 2.0 * (K * K - 1.0) * norm;
  fixA[6] = (1.0 - K / fixA[1] + K * K) * norm;
  
  K = tan($pi * fixB[0]);
  norm = 1.0 / (1.0 + K / fixB[1] + K * K);
  fixB[2] = K * K * norm;
  fixB[3] = 2.0 * fixB[2];
  fixB[4] = fixB[2];
  fixB[5] = 2.0 * (K * K - 1.0) * norm;
  fixB[6] = (1.0 - K / fixB[1] + K * K) * norm;
  
  K = tan($pi * fixC[0]);
  norm = 1.0 / (1.0 + K / fixC[1] + K * K);
  fixC[2] = K * K * norm;
  fixC[3] = 2.0 * fixC[2];
  fixC[4] = fixC[2];
  fixC[5] = 2.0 * (K * K - 1.0) * norm;
  fixC[6] = (1.0 - K / fixC[1] + K * K) * norm;
  
  K = tan($pi * fixD[0]);
  norm = 1.0 / (1.0 + K / fixD[1] + K * K);
  fixD[2] = K * K * norm;
  fixD[3] = 2.0 * fixD[2];
  fixD[4] = fixD[2];
  fixD[5] = 2.0 * (K * K - 1.0) * norm;
  fixD[6] = (1.0 - K / fixD[1] + K * K) * norm;
  
  K = tan($pi * fixE[0]);
  norm = 1.0 / (1.0 + K / fixE[1] + K * K);
  fixE[2] = K * K * norm;
  fixE[3] = 2.0 * fixE[2];
  fixE[4] = fixE[2];
  fixE[5] = 2.0 * (K * K - 1.0) * norm;
  fixE[6] = (1.0 - K / fixE[1] + K * K) * norm;
  
  K = tan($pi * fixF[0]);
  norm = 1.0 / (1.0 + K / fixF[1] + K * K);
  fixF[2] = K * K * norm;
  fixF[3] = 2.0 * fixF[2];
  fixF[4] = fixF[2];
  fixF[5] = 2.0 * (K * K - 1.0) * norm;
  fixF[6] = (1.0 - K / fixF[1] + K * K) * norm;
  
  K = tan($pi * fixG[0]);
  norm = 1.0 / (1.0 + K / fixG[1] + K * K);
  fixG[2] = K * K * norm;
  fixG[3] = 2.0 * fixG[2];
  fixG[4] = fixG[2];
  fixG[5] = 2.0 * (K * K - 1.0) * norm;
  fixG[6] = (1.0 - K / fixG[1] + K * K) * norm;
  
) : (slider1 == 1) ? (

  biquadE[0] = biquadD[0] = biquadC[0] = biquadB[0] = biquadA[0] = 20000.0 / srate;
  biquadA[1] = 0.50623256;
  biquadB[1] = 0.56116312;
  biquadC[1] = 0.70710678;
  biquadD[1] = 1.10134463;
  biquadE[1] = 3.19622661; 
  
  K = tan($pi * biquadA[0]); 
  norm = 1.0 / (1.0 + K / biquadA[1] + K * K);
  biquadA[2] = K * K * norm;
  biquadA[3] = 2.0 * biquadA[2];
  biquadA[4] = biquadA[2];
  biquadA[5] = 2.0 * (K * K - 1.0) * norm;
  biquadA[6] = (1.0 - K / biquadA[1] + K * K) * norm;
  
  K = tan($pi * biquadA[0]);
  norm = 1.0 / (1.0 + K / biquadB[1] + K * K);
  biquadB[2] = K * K * norm;
  biquadB[3] = 2.0 * biquadB[2];
  biquadB[4] = biquadB[2];
  biquadB[5] = 2.0 * (K * K - 1.0) * norm;
  biquadB[6] = (1.0 - K / biquadB[1] + K * K) * norm;
  
  K = tan($pi * biquadC[0]);
  norm = 1.0 / (1.0 + K / biquadC[1] + K * K);
  biquadC[2] = K * K * norm;
  biquadC[3] = 2.0 * biquadC[2];
  biquadC[4] = biquadC[2];
  biquadC[5] = 2.0 * (K * K - 1.0) * norm;
  biquadC[6] = (1.0 - K / biquadC[1] + K * K) * norm;
  
  K = tan($pi * biquadD[0]);
  norm = 1.0 / (1.0 + K / biquadD[1] + K * K);
  biquadD[2] = K * K * norm;
  biquadD[3] = 2.0 * biquadD[2];
  biquadD[4] = biquadD[2];
  biquadD[5] = 2.0 * (K * K - 1.0) * norm;
  biquadD[6] = (1.0 - K / biquadD[1] + K * K) * norm;
  
  K = tan($pi * biquadE[0]);
  norm = 1.0 / (1.0 + K / biquadE[1] + K * K);
  biquadE[2] = K * K * norm;
  biquadE[3] = 2.0 * biquadE[2];
  biquadE[4] = biquadE[2];
  biquadE[5] = 2.0 * (K * K - 1.0) * norm;
  biquadE[6] = (1.0 - K / biquadE[1] + K * K) * norm;

) : (slider1 == 2) ? (

  biquadA[0] = 24000.0 / srate;
  (srate < 88000.0) ? biquadA[0] = 21000.0 / srate;
  
  biquadB[0] = 22000.0 / srate;
  (srate < 88000.0) ? biquadB[0] = 20000.0 / srate;
  
  biquadA[1] = 0.70710678;
  biquadB[1] = 0.70710678;
  
  K = tan($pi * biquadA[0]); //lowpass
  norm = 1.0 / (1.0 + K / biquadA[1] + K * K);
  biquadA[2] = K * K * norm;
  biquadA[3] = 2.0 * biquadA[2];
  biquadA[4] = biquadA[2];
  biquadA[5] = 2.0 * (K * K - 1.0) * norm;
  biquadA[6] = (1.0 - K / biquadA[1] + K * K) * norm;
  
  K = tan($pi * biquadB[0]);
  norm = 1.0 / (1.0 + K / biquadB[1] + K * K);
  biquadB[2] = K * K * norm;
  biquadB[3] = 2.0 * biquadB[2];
  biquadB[4] = biquadB[2];
  biquadB[5] = 2.0 * (K * K - 1.0) * norm;
  biquadB[6] = (1.0 - K / biquadB[1] + K * K) * norm;

) : (slider1 == 3) ? (

  biquadA[0] = 24000.0 / srate;
  (srate < 88000.0) ? biquadA[0] = 21000.0 / srate;
  biquadA[1] = 0.70710678;
  
  K = tan($pi * biquadA[0]);
  norm = 1.0 / (1.0 + K / biquadA[1] + K * K);
  biquadA[2] = K * K * norm;
  biquadA[3] = 2.0 * biquadA[2];
  biquadA[4] = biquadA[2];
  biquadA[5] = 2.0 * (K * K - 1.0) * norm;
  biquadA[6] = (1.0 - K / biquadA[1] + K * K) * norm;

);

@sample
inputSampleL = spl0;
inputSampleR = spl1;

(slider1 == 0) ? (

//
//

outSample = (inputSampleL * fixA[2]) + fixA[7];
fixA[7] = (inputSampleL * fixA[3]) - (outSample * fixA[5]) + fixA[8];
fixA[8] = (inputSampleL * fixA[4]) - (outSample * fixA[6]);
inputSampleL = outSample; 
outSample = (inputSampleR * fixA[2]) + fixA[9];
fixA[9] = (inputSampleR * fixA[3]) - (outSample * fixA[5]) + fixA[10];
fixA[10] = (inputSampleR * fixA[4]) - (outSample * fixA[6]);
inputSampleR = outSample;

outSample = (inputSampleL * fixB[2]) + fixB[7];
fixB[7] = (inputSampleL * fixB[3]) - (outSample * fixB[5]) + fixB[8];
fixB[8] = (inputSampleL * fixB[4]) - (outSample * fixB[6]);
inputSampleL = outSample; 
outSample = (inputSampleR * fixB[2]) + fixB[9];
fixB[9] = (inputSampleR * fixB[3]) - (outSample * fixB[5]) + fixB[10];
fixB[10] = (inputSampleR * fixB[4]) - (outSample * fixB[6]);
inputSampleR = outSample; 

outSample = (inputSampleL * fixC[2]) + fixC[7];
fixC[7] = (inputSampleL * fixC[3]) - (outSample * fixC[5]) + fixC[8];
fixC[8] = (inputSampleL * fixC[4]) - (outSample * fixC[6]);
inputSampleL = outSample; 
outSample = (inputSampleR * fixC[2]) + fixC[9];
fixC[9] = (inputSampleR * fixC[3]) - (outSample * fixC[5]) + fixC[10];
fixC[10] = (inputSampleR * fixC[4]) - (outSample * fixC[6]);
inputSampleR = outSample; 

outSample = (inputSampleL * fixD[2]) + fixD[7];
fixD[7] = (inputSampleL * fixD[3]) - (outSample * fixD[5]) + fixD[8];
fixD[8] = (inputSampleL * fixD[4]) - (outSample * fixD[6]);
inputSampleL = outSample; 
outSample = (inputSampleR * fixD[2]) + fixD[9];
fixD[9] = (inputSampleR * fixD[3]) - (outSample * fixD[5]) + fixD[10];
fixD[10] = (inputSampleR * fixD[4]) - (outSample * fixD[6]);
inputSampleR = outSample; 

outSample = (inputSampleL * fixE[2]) + fixE[7];
fixE[7] = (inputSampleL * fixE[3]) - (outSample * fixE[5]) + fixE[8];
fixE[8] = (inputSampleL * fixE[4]) - (outSample * fixE[6]);
inputSampleL = outSample; 
outSample = (inputSampleR * fixE[2]) + fixE[9];
fixE[9] = (inputSampleR * fixE[3]) - (outSample * fixE[5]) + fixE[10];
fixE[10] = (inputSampleR * fixE[4]) - (outSample * fixE[6]);
inputSampleR = outSample; 

outSample = (inputSampleL * fixF[2]) + fixF[7];
fixF[7] = (inputSampleL * fixF[3]) - (outSample * fixF[5]) + fixF[8];
fixF[8] = (inputSampleL * fixF[4]) - (outSample * fixF[6]);
inputSampleL = outSample; 
outSample = (inputSampleR * fixF[2]) + fixF[9];
fixF[9] = (inputSampleR * fixF[3]) - (outSample * fixF[5]) + fixF[10];
fixF[10] = (inputSampleR * fixF[4]) - (outSample * fixF[6]);
inputSampleR = outSample; 

outSample = (inputSampleL * fixG[2]) + fixG[7];
fixG[7] = (inputSampleL * fixG[3]) - (outSample * fixG[5]) + fixG[8];
fixG[8] = (inputSampleL * fixG[4]) - (outSample * fixG[6]);
inputSampleL = outSample; 
outSample = (inputSampleR * fixG[2]) + fixG[9];
fixG[9] = (inputSampleR * fixG[3]) - (outSample * fixG[5]) + fixG[10];
fixG[10] = (inputSampleR * fixG[4]) - (outSample * fixG[6]);
inputSampleR = outSample;

) : (slider1 == 1) ? (

  
  
  
  outSampleL = biquadA[2]*inputSampleL+biquadA[3]*biquadA[7]+biquadA[4]*biquadA[8]-biquadA[5]*biquadA[9]-biquadA[6]*biquadA[10];
  biquadA[8] = biquadA[7]; biquadA[7] = inputSampleL; inputSampleL = outSampleL; biquadA[10] = biquadA[9]; biquadA[9] = inputSampleL; //DF1 left
  
  outSampleL = biquadB[2]*inputSampleL+biquadB[3]*biquadB[7]+biquadB[4]*biquadB[8]-biquadB[5]*biquadB[9]-biquadB[6]*biquadB[10];
  biquadB[8] = biquadB[7]; biquadB[7] = inputSampleL; inputSampleL = outSampleL; biquadB[10] = biquadB[9]; biquadB[9] = inputSampleL; //DF1 left
  
  outSampleL = biquadC[2]*inputSampleL+biquadC[3]*biquadC[7]+biquadC[4]*biquadC[8]-biquadC[5]*biquadC[9]-biquadC[6]*biquadC[10];
  biquadC[8] = biquadC[7]; biquadC[7] = inputSampleL; inputSampleL = outSampleL; biquadC[10] = biquadC[9]; biquadC[9] = inputSampleL; //DF1 left
  
  outSampleL = biquadD[2]*inputSampleL+biquadD[3]*biquadD[7]+biquadD[4]*biquadD[8]-biquadD[5]*biquadD[9]-biquadD[6]*biquadD[10];
  biquadD[8] = biquadD[7]; biquadD[7] = inputSampleL; inputSampleL = outSampleL; biquadD[10] = biquadD[9]; biquadD[9] = inputSampleL; //DF1 left
  
  outSampleL = biquadE[2]*inputSampleL+biquadE[3]*biquadE[7]+biquadE[4]*biquadE[8]-biquadE[5]*biquadE[9]-biquadE[6]*biquadE[10];
  biquadE[8] = biquadE[7]; biquadE[7] = inputSampleL; inputSampleL = outSampleL; biquadE[10] = biquadE[9]; biquadE[9] = inputSampleL; //DF1 left
  
  outSampleR = biquadA[2]*inputSampleR+biquadA[3]*biquadA[11]+biquadA[4]*biquadA[12]-biquadA[5]*biquadA[13]-biquadA[6]*biquadA[14];
  biquadA[12] = biquadA[11]; biquadA[11] = inputSampleR; inputSampleR = outSampleR; biquadA[14] = biquadA[13]; biquadA[13] = inputSampleR; //DF1 right
  
  outSampleR = biquadB[2]*inputSampleR+biquadB[3]*biquadB[11]+biquadB[4]*biquadB[12]-biquadB[5]*biquadB[13]-biquadB[6]*biquadB[14];
  biquadB[12] = biquadB[11]; biquadB[11] = inputSampleR; inputSampleR = outSampleR; biquadB[14] = biquadB[13]; biquadB[13] = inputSampleR; //DF1 right
  
  outSampleR = biquadC[2]*inputSampleR+biquadC[3]*biquadC[11]+biquadC[4]*biquadC[12]-biquadC[5]*biquadC[13]-biquadC[6]*biquadC[14];
  biquadC[12] = biquadC[11]; biquadC[11] = inputSampleR; inputSampleR = outSampleR; biquadC[14] = biquadC[13]; biquadC[13] = inputSampleR; //DF1 right
  
  outSampleR = biquadD[2]*inputSampleR+biquadD[3]*biquadD[11]+biquadD[4]*biquadD[12]-biquadD[5]*biquadD[13]-biquadD[6]*biquadD[14];
  biquadD[12] = biquadD[11]; biquadD[11] = inputSampleR; inputSampleR = outSampleR; biquadD[14] = biquadD[13]; biquadD[13] = inputSampleR; //DF1 right
  
  outSampleR = biquadE[2]*inputSampleR+biquadE[3]*biquadE[11]+biquadE[4]*biquadE[12]-biquadE[5]*biquadE[13]-biquadE[6]*biquadE[14];
  biquadE[12] = biquadE[11]; biquadE[11] = inputSampleR; inputSampleR = outSampleR; biquadE[14] = biquadE[13]; biquadE[13] = inputSampleR; //DF1 right

  
) : (slider1 == 2) ? (

  
  

  outSampleL = biquadA[2]*inputSampleL+biquadA[3]*biquadA[7]+biquadA[4]*biquadA[8]-biquadA[5]*biquadA[9]-biquadA[6]*biquadA[10];
  biquadA[8] = biquadA[7]; biquadA[7] = inputSampleL; inputSampleL = outSampleL; biquadA[10] = biquadA[9]; biquadA[9] = inputSampleL; //DF1 left
  
  outSampleL = biquadB[2]*inputSampleL+biquadB[3]*biquadB[7]+biquadB[4]*biquadB[8]-biquadB[5]*biquadB[9]-biquadB[6]*biquadB[10];
  biquadB[8] = biquadB[7]; biquadB[7] = inputSampleL; inputSampleL = outSampleL; biquadB[10] = biquadB[9]; biquadB[9] = inputSampleL; //DF1 left
  
  outSampleR = biquadA[2]*inputSampleR+biquadA[3]*biquadA[11]+biquadA[4]*biquadA[12]-biquadA[5]*biquadA[13]-biquadA[6]*biquadA[14];
  biquadA[12] = biquadA[11]; biquadA[11] = inputSampleR; inputSampleR = outSampleR; biquadA[14] = biquadA[13]; biquadA[13] = inputSampleR; //DF1 right
  
  outSampleR = biquadB[2]*inputSampleR+biquadB[3]*biquadB[11]+biquadB[4]*biquadB[12]-biquadB[5]*biquadB[13]-biquadB[6]*biquadB[14];
  biquadB[12] = biquadB[11]; biquadB[11] = inputSampleR; inputSampleR = outSampleR; biquadB[14] = biquadB[13]; biquadB[13] = inputSampleR; //DF1 right


) : (slider1 == 3) ? (

  
  
    
  outSampleL = biquadA[2]*inputSampleL+biquadA[3]*biquadA[7]+biquadA[4]*biquadA[8]-biquadA[5]*biquadA[9]-biquadA[6]*biquadA[10];
  biquadA[8] = biquadA[7]; biquadA[7] = inputSampleL; inputSampleL = outSampleL; biquadA[10] = biquadA[9]; biquadA[9] = inputSampleL; //DF1 left
  
  outSampleR = biquadA[2]*inputSampleR+biquadA[3]*biquadA[11]+biquadA[4]*biquadA[12]-biquadA[5]*biquadA[13]-biquadA[6]*biquadA[14];
  biquadA[12] = biquadA[11]; biquadA[11] = inputSampleR; inputSampleR = outSampleR; biquadA[14] = biquadA[13]; biquadA[13] = inputSampleR; //DF1 right
  
);

spl0 = inputSampleL;
spl1 = inputSampleR;
