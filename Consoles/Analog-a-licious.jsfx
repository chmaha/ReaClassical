Version: 1.0
desc:Analog-a-licious Console Colors (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Desk", "TransDesk" and "TubeDeck" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Deck (MIT License)
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/TransDeck (MIT License)
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/TubeDeck (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,2,1{Vanilla,SSL,Vintage Tube}>Console Type

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

freemem = 0;
dL = freemem; freemem+=5000;
dR = freemem; freemem+=5000;

@slider

@block

overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

(slider1 == 0) ? (

  gain = 0.135;
  slewgain = 0.208;  
  prevslew = 0.333;

) : (slider1 == 1) ? (

  intensity = 0.02198359;
  depthA = 3.0;
  offsetA = (depthA * overallscale) | 0;
  (offsetA < 1) ? offsetA = 1;
  (offsetA > 8) ? offsetA = 8;
  gain = 0.130;
  slewgain = 0.197;  
  prevslew = 0.255;

) : (slider1 == 2) ? (

  intensity = 0.4384938;
  depthA = 549.0;
  offsetA = (depthA * overallscale) | 0;
  (offsetA < 1) ? offsetA = 1;
  (offsetA > 2440) ? offsetA = 2440;
  gain = 0.5;
  slewgain = 0.128;  
  prevslew = 0.105;

);

balanceB = 0.0001;
slewgain *= overallscale;
prevslew *= overallscale;
balanceB /= overallscale;
balanceA = 1.0 - balanceB;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

drySampleL = inputSampleL;
drySampleR = inputSampleR;

(slider1 == 0 ) ? (

slew = inputSampleL - lastSampleL;
lastSampleL = inputSampleL;

bridgerectifier = abs(slew*slewgain);
(bridgerectifier > 1.57079633) ? bridgerectifier = 1.0
: bridgerectifier = sin(bridgerectifier);
(slew > 0) ? slew = bridgerectifier/slewgain
: slew = -(bridgerectifier/slewgain);

inputSampleL = (lastOutSampleL*balanceA) + (lastSampleL*balanceB) + slew;
lastOutSampleL = inputSampleL;

combsample = abs(drySampleL*lastSampleL);
(combsample > 1.0) ? combsample = 1.0;
inputSampleL -= (lastSlewL * combsample * prevslew);
lastSlewL = slew;

inputSampleL *= gain;
bridgerectifier = abs(inputSampleL);
(bridgerectifier > 1.57079633) ? bridgerectifier = 1.0
: bridgerectifier = sin(bridgerectifier);

(inputSampleL > 0) ? inputSampleL = bridgerectifier
: inputSampleL = -bridgerectifier;
inputSampleL /= gain;

slew = inputSampleR - lastSampleR;
lastSampleR = inputSampleR;

bridgerectifier = abs(slew*slewgain);
(bridgerectifier > 1.57079633) ? bridgerectifier = 1.0
: bridgerectifier = sin(bridgerectifier);
(slew > 0) ? slew = bridgerectifier/slewgain
: slew = -(bridgerectifier/slewgain);

inputSampleR = (lastOutSampleR*balanceA) + (lastSampleR*balanceB) + slew;
lastOutSampleR = inputSampleR;

combsample = abs(drySampleR*lastSampleR);
(combsample > 1.0) ? combsample = 1.0;
inputSampleR -= (lastSlewR * combsample * prevslew);
lastSlewR = slew;

inputSampleR *= gain;
bridgerectifier = abs(inputSampleR);
(bridgerectifier > 1.57079633) ? bridgerectifier = 1.0
: bridgerectifier = sin(bridgerectifier);

(inputSampleR > 0) ? inputSampleR = bridgerectifier
: inputSampleR = -bridgerectifier;
inputSampleR /= gain;

) : (slider1 == 1) ? (

  (gcount < 0 || gcount > 9) ? gcount = 9;
    
  dL[gcount+9] = dL[gcount] = abs(inputSampleL)*intensity;
  controlL += (dL[gcount] / offsetA);
  controlL -= (dL[gcount+offsetA] / offsetA);
  controlL -= 0.000001;
  clamp = 1;
  (controlL < 0) ? controlL = 0;
  (controlL > 1) ? (clamp -= (controlL - 1); controlL = 1;);
  (clamp < 0.5) ? clamp = 0.5;

  thickness = ((1.0 - controlL) * 2.0) - 1.0;
  out = abs(thickness);    
  bridgerectifier = abs(inputSampleL);
  (bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;

  (thickness > 0) ? bridgerectifier = sin(bridgerectifier)
  : bridgerectifier = 1-cos(bridgerectifier);

  (inputSampleL > 0) ? inputSampleL = (inputSampleL*(1-out))+(bridgerectifier*out)
  : inputSampleL = (inputSampleL*(1-out))-(bridgerectifier*out);

  inputSampleL *= clamp;
  slew = inputSampleL - lastSampleL;
  lastSampleL = inputSampleL;

  bridgerectifier = abs(slew*slewgain);
  (bridgerectifier > 1.57079633) ? bridgerectifier = 1.0
  : bridgerectifier = sin(bridgerectifier);
  (slew > 0) ? slew = bridgerectifier/slewgain
  : slew = -(bridgerectifier/slewgain);
  inputSampleL = (lastOutSampleL*balanceA) + (lastSampleL*balanceB) + slew;

  lastOutSampleL = inputSampleL;

  combSample = abs(drySampleL*lastSampleL);
  (combSample > 1.0) ? combSample = 1.0;

  inputSampleL -= (lastSlewL * combSample * prevslew);
  lastSlewL = slew;

  inputSampleL *= gain;
  bridgerectifier = abs(inputSampleL);
  (bridgerectifier > 1.57079633) ? bridgerectifier = 1.0
  : bridgerectifier = sin(bridgerectifier);
  (inputSampleL > 0) ? inputSampleL = bridgerectifier
  : inputSampleL = -bridgerectifier;

  inputSampleL /= gain;

  dR[gcount+9] = dR[gcount] = abs(inputSampleR)*intensity;
  controlR += (dR[gcount] / offsetA);
  controlR -= (dR[gcount+offsetA] / offsetA);
  controlR -= 0.000001;
  clamp = 1;
  (controlR < 0) ? controlR = 0;
  (controlR > 1) ? (clamp -= (controlR - 1); controlR = 1;);
  (clamp < 0.5) ? clamp = 0.5;

  thickness = ((1.0 - controlR) * 2.0) - 1.0;
  out = abs(thickness);    
  bridgerectifier = abs(inputSampleR);
  (bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;

  (thickness > 0) ? bridgerectifier = sin(bridgerectifier)
  : bridgerectifier = 1-cos(bridgerectifier);

  (inputSampleR > 0) ? inputSampleR = (inputSampleR*(1-out))+(bridgerectifier*out)
  : inputSampleR = (inputSampleR*(1-out))-(bridgerectifier*out);

  inputSampleR *= clamp;
  slew = inputSampleR - lastSampleR;
  lastSampleR = inputSampleR;

  bridgerectifier = abs(slew*slewgain);
  (bridgerectifier > 1.57079633) ? bridgerectifier = 1.0
  : bridgerectifier = sin(bridgerectifier);
  (slew > 0) ? slew = bridgerectifier/slewgain
  : slew = -(bridgerectifier/slewgain);
  inputSampleR = (lastOutSampleR*balanceA) + (lastSampleR*balanceB) + slew;

  lastOutSampleR = inputSampleR;

  combSample = abs(drySampleR*lastSampleR);
  (combSample > 1.0) ? combSample = 1.0;

  inputSampleR -= (lastSlewR * combSample * prevslew);
  lastSlewR = slew;

  inputSampleR *= gain;
  bridgerectifier = abs(inputSampleR);
  (bridgerectifier > 1.57079633) ? bridgerectifier = 1.0
  : bridgerectifier = sin(bridgerectifier);
  (inputSampleR > 0) ? inputSampleR = bridgerectifier
  : inputSampleR = -bridgerectifier;

  inputSampleR /= gain;
  gcount-=1;    

) : (slider1 == 2) ? (

  (gcount < 0 || gcount > 2450) ? gcount = 2450;
    
  dL[gcount+2450] = dL[gcount] = abs(inputSampleL)*intensity;
  controlL += (dL[gcount] / offsetA);
  controlL -= (dL[gcount+offsetA] / offsetA);
  controlL -= 0.000001;
  clamp = 1;
  (controlL < 0) ? controlL = 0;
  (controlL > 1) ? (clamp -= (controlL - 1); controlL = 1;);
  (clamp < 0.5) ? clamp = 0.5;

  thickness = ((1.0 - controlL) * 2.0) - 1.0;
  out = abs(thickness);    
  bridgerectifier = abs(inputSampleL);
  (bridgerectifier > 1.57079633) ? bridgerectifier = 1.57079633;

  (thickness > 0) ? bridgerectifier = sin(bridgerectifier)
  : bridgerectifier = 1-cos(bridgerectifier);

  (inputSampleL > 0) ? inputSampleL = (inputSampleL*(1-out))+(bridgerectifier*out)
  : inputSampleL = (inputSampleL*(1-out))-(bridgerectifier*out);

  inputSampleL *= clamp;
  slew = inputSampleL - lastSampleL;
  lastSampleL = inputSampleL;

  bridgerectifier = abs(slew*slewgain);
  (bridgerectifier > 1.57079633) ? bridgerectifier = 1.0
  : bridgerectifier = sin(bridgerectifier);
  (slew > 0) ? slew = bridgerectifier/slewgain
  : slew = -(bridgerectifier/slewgain);
  inputSampleL = (lastOutSampleL*balanceA) + (lastSampleL*balanceB) + slew;

  lastOutSampleL = inputSampleL;

  combSample = abs(drySampleL*lastSampleL);
  (combSample > 1.0) ? combSample = 1.0;

  inputSampleL -= (lastSlewL * combSample * prevslew);
  lastSlewL = slew;

  inputSampleL *= gain;
  bridgerectifier = abs(inputSampleL);
  (bridgerectifier > 1.57079633) ? bridgerectifier = 1.0
  : bridgerectifier = sin(bridgerectifier);
  (inputSampleL > 0) ? inputSampleL = bridgerectifier
  : inputSampleL = -bridgerectifier;
  inputSampleL /= gain;

  dR[gcount+2450] = dR[gcount] = abs(inputSampleR)*intensity;
  controlR += (dR[gcount] / offsetA);
  controlR -= (dR[gcount+offsetA] / offsetA);
  controlR -= 0.000001;
  clamp = 1;
  (controlR < 0) ? controlR = 0;
  (controlR > 1) ? (clamp -= (controlR - 1); controlR = 1;);
  (clamp < 0.5) ? clamp = 0.5;
  thickness = ((1.0 - controlR) * 2.0) - 1.0;
  out = abs(thickness);    
  bridgerectifier = abs(inputSampleR);
  (bridgerectifier > 1.57079633) ?  bridgerectifier = 1.57079633;

  (thickness > 0) ? bridgerectifier = sin(bridgerectifier)
  : bridgerectifier = 1-cos(bridgerectifier);

  (inputSampleR > 0) ? inputSampleR = (inputSampleR*(1-out))+(bridgerectifier*out)
  : inputSampleR = (inputSampleR*(1-out))-(bridgerectifier*out);

  inputSampleR *= clamp;
  slew = inputSampleR - lastSampleR;
  lastSampleR = inputSampleR;

  bridgerectifier = abs(slew*slewgain);
  (bridgerectifier > 1.57079633) ? bridgerectifier = 1.0
  : bridgerectifier = sin(bridgerectifier);
  (slew > 0) ? slew = bridgerectifier/slewgain
  : slew = -(bridgerectifier/slewgain);
  inputSampleR = (lastOutSampleR*balanceA) + (lastSampleR*balanceB) + slew;

  lastOutSampleR = inputSampleR;
  combSample = abs(drySampleR*lastSampleR);
  (combSample > 1.0) ? combSample = 1.0;
  inputSampleR -= (lastSlewR * combSample * prevslew);
  lastSlewR = slew;
  inputSampleR *= gain;
  bridgerectifier = abs(inputSampleR);
  (bridgerectifier > 1.57079633) ? bridgerectifier = 1.0
  : bridgerectifier = sin(bridgerectifier);
  (inputSampleR > 0) ? inputSampleR = bridgerectifier
  : inputSampleR = -bridgerectifier;

  inputSampleR /= gain;

  gcount-=1;

);

spl0 = inputSampleL;
spl1 = inputSampleR;
