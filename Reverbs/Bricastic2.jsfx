Version: 1.2
desc: Bricastic2 Reverb (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Verbity2" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Verbity2 (MIT License)
  JSFX version released under GPLv3 license

slider1:0.5<0,1,0.01>Room Size
slider2:0.5<0,1,0.01>Sustain
slider3:0.5<0,1,0.01>Mulch
slider4:1<0,1,0.01>Wetness

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
aAL = freemem; freemem +=5005; 
aFL = freemem; freemem +=4953;
aKL = freemem; freemem +=4921; 
aPL = freemem; freemem +=4801; 
aUL = freemem; freemem +=4753; 

aBL = freemem; freemem +=4351; 
aGL = freemem; freemem +=4159; 
aLL = freemem; freemem +=3931; 
aQL = freemem; freemem +=3531; 
aVL = freemem; freemem +=3331; 

aCL = freemem; freemem +=3325;  
aHL = freemem; freemem +=2793; 
aML = freemem; freemem +=2769; 
aRL = freemem; freemem +=2391; 
aWL = freemem; freemem +=2349; 

aDL = freemem; freemem +=2143; 
aIL = freemem; freemem +=1813; 
aNL = freemem; freemem +=1735; 
aSL = freemem; freemem +=1173; 
aXL = freemem; freemem +=789; 

aEL = freemem; freemem +=679; 
aJL = freemem; freemem +=645; 
aOL = freemem; freemem +=441; 
aTL = freemem; freemem +=351; 
aYL = freemem; freemem +=283; 

lastRefL = freemem; freemem +=7; 

aAR = freemem; freemem +=5005; 
aFR = freemem; freemem +=4953; 
aKR = freemem; freemem +=4921; 
aPR = freemem; freemem +=4801; 
aUR = freemem; freemem +=4753; 

aBR = freemem; freemem +=4351;  
aGR = freemem; freemem +=4159; 
aLR = freemem; freemem +=3931; 
aQR = freemem; freemem +=3531; 
aVR = freemem; freemem +=3331; 

aCR = freemem; freemem +=3325;  
aHR = freemem; freemem +=2793; 
aMR = freemem; freemem +=2769; 
aRR = freemem; freemem +=2391; 
aWR = freemem; freemem +=2349; 

aDR = freemem; freemem +=2143;  
aIR = freemem; freemem +=1813; 
aNR = freemem; freemem +=1735; 
aSR = freemem; freemem +=1173; 
aXR = freemem; freemem +=789; 

aER = freemem; freemem +=679; 
aJR = freemem; freemem +=645; 
aOR = freemem; freemem +=441; 
aTR = freemem; freemem +=351; 
aYR = freemem; freemem +=283; 

lastRefR = freemem; freemem +=7; 

UINT32_MAX = 4294967295;

countA = 1;
countB = 1;
countC = 1;
countD = 1;  
countE = 1;
countF = 1;
countG = 1;
countH = 1;
countI = 1;
countJ = 1;
countK = 1;
countL = 1;
countM = 1;
countN = 1;
countO = 1;
countP = 1;
countQ = 1;
countR = 1;
countS = 1;
countT = 1;
countU = 1;
countV = 1;
countW = 1;
countX = 1;
countY = 1;
countZ = 1;

fpdL = 1.0; while (fpdL < 16386) (fpdL = rand()*UINT32_MAX);
fpdR = 1.0; while (fpdR < 16386) (fpdR = rand()*UINT32_MAX);

@slider

A = slider1;
B = slider2;
C = slider3;
D = slider4;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

cycleEnd = floor(overallscale) | 0;
(cycleEnd < 1) ? cycleEnd = 1;
(cycleEnd > 4) ? cycleEnd = 4;

(cycle > cycleEnd-1) ? cycle = cycleEnd-1;

size = (pow(A,2.0)*0.9)+0.1;
regen = (1.0-pow(1.0-B,3.0))*0.00032;
mulchSetting = C;
lowpass = (1.0-(mulchSetting*0.75))/sqrt(overallscale);
highpass = (0.007+(mulchSetting*0.022))/sqrt(overallscale);
interpolateMax = 0.07+(mulchSetting*0.4);
wet = D*2.0;
dry = 2.0 - wet;
(wet > 1.0) ? wet = 1.0;
(wet < 0.0) ? wet = 0.0;
(dry > 1.0) ? dry = 1.0;
(dry < 0.0) ? dry = 0.0;

delayA = 5003.0*size | 0;
delayF = 4951.0*size | 0;
delayK = 4919.0*size | 0;
delayP = 4799.0*size | 0;
delayU = 4751.0*size | 0;

delayB = 4349.0*size | 0;
delayG = 4157.0*size | 0;
delayL = 3929.0*size | 0;
delayQ = 3529.0*size | 0;
delayV = 3329.0*size | 0;

delayC = 3323.0*size | 0;
delayH = 2791.0*size | 0;
delayM = 2767.0*size | 0;
delayR = 2389.0*size | 0;
delayW = 2347.0*size | 0;

delayD = 2141.0*size | 0;
delayI = 1811.0*size | 0;
delayN = 1733.0*size | 0;
delayS = 1171.0*size | 0;
delayX = 787.0*size | 0;

delayE = 677.0*size | 0;
delayJ = 643.0*size | 0;
delayO = 439.0*size | 0;
delayT = 349.0*size | 0;
delayY = 281.0*size | 0;


@sample
inputSampleL = spl0;
inputSampleR = spl1;


drySampleL = inputSampleL;
drySampleR = inputSampleR;

(abs(iirAL)<1.18*10^-37) ? iirAL = 0.0;
iirAL = (iirAL*(1.0-highpass))+(inputSampleL*highpass); inputSampleL -= iirAL;
(abs(iirAR)<1.18*10^-37) ? iirAR = 0.0;
iirAR = (iirAR*(1.0-highpass))+(inputSampleR*highpass); inputSampleR -= iirAR;

interpolateL = interpolateMax + (interpolateMax * (fpdL/UINT32_MAX));
interpolateR = interpolateMax + (interpolateMax * (fpdR/UINT32_MAX));

cycle+=1;
(cycle == cycleEnd) ? ( 
  feedbackAL = (feedbackAL*(1.0-interpolateL))+(previousAL*interpolateL); previousAL = feedbackAL;
  feedbackBL = (feedbackBL*(1.0-interpolateL))+(previousBL*interpolateL); previousBL = feedbackBL;
  feedbackCL = (feedbackCL*(1.0-interpolateL))+(previousCL*interpolateL); previousCL = feedbackCL;
  feedbackDL = (feedbackDL*(1.0-interpolateL))+(previousDL*interpolateL); previousDL = feedbackDL;
  feedbackEL = (feedbackEL*(1.0-interpolateL))+(previousEL*interpolateL); previousEL = feedbackEL;
  feedbackAR = (feedbackAR*(1.0-interpolateR))+(previousAR*interpolateR); previousAR = feedbackAR;
  feedbackBR = (feedbackBR*(1.0-interpolateR))+(previousBR*interpolateR); previousBR = feedbackBR;
  feedbackCR = (feedbackCR*(1.0-interpolateR))+(previousCR*interpolateR); previousCR = feedbackCR;
  feedbackDR = (feedbackDR*(1.0-interpolateR))+(previousDR*interpolateR); previousDR = feedbackDR;
  feedbackER = (feedbackER*(1.0-interpolateR))+(previousER*interpolateR); previousER = feedbackER;
  
  aAL[countA] = inputSampleL + (feedbackAL * (regen*(1.0-abs(feedbackAL*regen))));
  aBL[countB] = inputSampleL + (feedbackBL * (regen*(1.0-abs(feedbackBL*regen))));
  aCL[countC] = inputSampleL + (feedbackCL * (regen*(1.0-abs(feedbackCL*regen))));
  aDL[countD] = inputSampleL + (feedbackDL * (regen*(1.0-abs(feedbackDL*regen))));
  aEL[countE] = inputSampleL + (feedbackEL * (regen*(1.0-abs(feedbackEL*regen))));
  
  aAR[countA] = inputSampleR + (feedbackAR * (regen*(1.0-abs(feedbackAR*regen))));
  aBR[countB] = inputSampleR + (feedbackBR * (regen*(1.0-abs(feedbackBR*regen))));
  aCR[countC] = inputSampleR + (feedbackCR * (regen*(1.0-abs(feedbackCR*regen))));
  aDR[countD] = inputSampleR + (feedbackDR * (regen*(1.0-abs(feedbackDR*regen))));
  aER[countE] = inputSampleR + (feedbackER * (regen*(1.0-abs(feedbackER*regen))));
  
  countA+=1; (countA < 0 || countA > delayA) ? countA = 0;
  countB+=1; (countB < 0 || countB > delayB) ? countB = 0;
  countC+=1; (countC < 0 || countC > delayC) ? countC = 0;
  countD+=1; (countD < 0 || countD > delayD) ? countD = 0;
  countE+=1; (countE < 0 || countE > delayE) ? countE = 0;
  
  outAL = aAL[countA-((countA > delayA)?delayA+1:0)];
  outBL = aBL[countB-((countB > delayB)?delayB+1:0)];
  outCL = aCL[countC-((countC > delayC)?delayC+1:0)];
  outDL = aDL[countD-((countD > delayD)?delayD+1:0)];
  outEL = aEL[countE-((countE > delayE)?delayE+1:0)];
  
  outAR = aAR[countA-((countA > delayA)?delayA+1:0)];
  outBR = aBR[countB-((countB > delayB)?delayB+1:0)];
  outCR = aCR[countC-((countC > delayC)?delayC+1:0)];
  outDR = aDR[countD-((countD > delayD)?delayD+1:0)];
  outER = aER[countE-((countE > delayE)?delayE+1:0)];
  
  aFL[countF] = ((outAL*3.0) - ((outBL + outCL + outDL + outEL)*2.0));
  aGL[countG] = ((outBL*3.0) - ((outAL + outCL + outDL + outEL)*2.0));
  aHL[countH] = ((outCL*3.0) - ((outAL + outBL + outDL + outEL)*2.0));
  aIL[countI] = ((outDL*3.0) - ((outAL + outBL + outCL + outEL)*2.0));
  aJL[countJ] = ((outEL*3.0) - ((outAL + outBL + outCL + outDL)*2.0));
  
  aFR[countF] = ((outAR*3.0) - ((outBR + outCR + outDR + outER)*2.0));
  aGR[countG] = ((outBR*3.0) - ((outAR + outCR + outDR + outER)*2.0));
  aHR[countH] = ((outCR*3.0) - ((outAR + outBR + outDR + outER)*2.0));
  aIR[countI] = ((outDR*3.0) - ((outAR + outBR + outCR + outER)*2.0));
  aJR[countJ] = ((outER*3.0) - ((outAR + outBR + outCR + outDR)*2.0));
  
  countF+=1; (countF < 0 || countF > delayF) ? countF = 0;
  countG+=1; (countG < 0 || countG > delayG) ? countG = 0;
  countH+=1; (countH < 0 || countH > delayH) ? countH = 0;
  countI+=1; (countI < 0 || countI > delayI) ? countI = 0;
  countJ+=1; (countJ < 0 || countJ > delayJ) ? countJ = 0;
  
  outFL = aFL[countF-((countF > delayF)?delayF+1:0)];
  outGL = aGL[countG-((countG > delayG)?delayG+1:0)];
  outHL = aHL[countH-((countH > delayH)?delayH+1:0)];
  outIL = aIL[countI-((countI > delayI)?delayI+1:0)];
  outJL = aJL[countJ-((countJ > delayJ)?delayJ+1:0)];
  
  outFR = aFR[countF-((countF > delayF)?delayF+1:0)];
  outGR = aGR[countG-((countG > delayG)?delayG+1:0)];
  outHR = aHR[countH-((countH > delayH)?delayH+1:0)];
  outIR = aIR[countI-((countI > delayI)?delayI+1:0)];
  outJR = aJR[countJ-((countJ > delayJ)?delayJ+1:0)];
  
  aKL[countK] = ((outFL*3.0) - ((outGL + outHL + outIL + outJL)*2.0));
  aLL[countL] = ((outGL*3.0) - ((outFL + outHL + outIL + outJL)*2.0));
  aML[countM] = ((outHL*3.0) - ((outFL + outGL + outIL + outJL)*2.0));
  aNL[countN] = ((outIL*3.0) - ((outFL + outGL + outHL + outJL)*2.0));
  aOL[countO] = ((outJL*3.0) - ((outFL + outGL + outHL + outIL)*2.0));
  
  aKR[countK] = ((outFR*3.0) - ((outGR + outHR + outIR + outJR)*2.0));
  aLR[countL] = ((outGR*3.0) - ((outFR + outHR + outIR + outJR)*2.0));
  aMR[countM] = ((outHR*3.0) - ((outFR + outGR + outIR + outJR)*2.0));
  aNR[countN] = ((outIR*3.0) - ((outFR + outGR + outHR + outJR)*2.0));
  aOR[countO] = ((outJR*3.0) - ((outFR + outGR + outHR + outIR)*2.0));
  
  countK+=1; (countK < 0 || countK > delayK) ? countK = 0;
  countL+=1; (countL < 0 || countL > delayL) ? countL = 0;
  countM+=1; (countM < 0 || countM > delayM) ? countM = 0;
  countN+=1; (countN < 0 || countN > delayN) ? countN = 0;
  countO+=1; (countO < 0 || countO > delayO) ? countO = 0;
  
  outKL = aKL[countK-((countK > delayK)?delayK+1:0)];
  outLL = aLL[countL-((countL > delayL)?delayL+1:0)];
  outML = aML[countM-((countM > delayM)?delayM+1:0)];
  outNL = aNL[countN-((countN > delayN)?delayN+1:0)];
  outOL = aOL[countO-((countO > delayO)?delayO+1:0)];
  
  outKR = aKR[countK-((countK > delayK)?delayK+1:0)];
  outLR = aLR[countL-((countL > delayL)?delayL+1:0)];
  outMR = aMR[countM-((countM > delayM)?delayM+1:0)];
  outNR = aNR[countN-((countN > delayN)?delayN+1:0)];
  outOR = aOR[countO-((countO > delayO)?delayO+1:0)];
  
  aPL[countP] = ((outKL*3.0) - ((outLL + outML + outNL + outOL)*2.0));
  aQL[countQ] = ((outLL*3.0) - ((outKL + outML + outNL + outOL)*2.0));
  aRL[countR] = ((outML*3.0) - ((outKL + outLL + outNL + outOL)*2.0));
  aSL[countS] = ((outNL*3.0) - ((outKL + outLL + outML + outOL)*2.0));
  aTL[countT] = ((outOL*3.0) - ((outKL + outLL + outML + outNL)*2.0));
  
  aPR[countP] = ((outKR*3.0) - ((outLR + outMR + outNR + outOR)*2.0));
  aQR[countQ] = ((outLR*3.0) - ((outKR + outMR + outNR + outOR)*2.0));
  aRR[countR] = ((outMR*3.0) - ((outKR + outLR + outNR + outOR)*2.0));
  aSR[countS] = ((outNR*3.0) - ((outKR + outLR + outMR + outOR)*2.0));
  aTR[countT] = ((outOR*3.0) - ((outKR + outLR + outMR + outNR)*2.0));
  
  countP+=1; (countP < 0 || countP > delayP) ? countP = 0;
  countQ+=1; (countQ < 0 || countQ > delayQ) ? countQ = 0;
  countR+=1; (countR < 0 || countR > delayR) ? countR = 0;
  countS+=1; (countS < 0 || countS > delayS) ? countS = 0;
  countT+=1; (countT < 0 || countT > delayT) ? countT = 0;
  
  outPL = aPL[countP-((countP > delayP)?delayP+1:0)];
  outQL = aQL[countQ-((countQ > delayQ)?delayQ+1:0)];
  outRL = aRL[countR-((countR > delayR)?delayR+1:0)];
  outSL = aSL[countS-((countS > delayS)?delayS+1:0)];
  outTL = aTL[countT-((countT > delayT)?delayT+1:0)];
  
  outPR = aPR[countP-((countP > delayP)?delayP+1:0)];
  outQR = aQR[countQ-((countQ > delayQ)?delayQ+1:0)];
  outRR = aRR[countR-((countR > delayR)?delayR+1:0)];
  outSR = aSR[countS-((countS > delayS)?delayS+1:0)];
  outTR = aTR[countT-((countT > delayT)?delayT+1:0)];
  
  aUL[countU] = ((outPL*3.0) - ((outQL + outRL + outSL + outTL)*2.0));
  aVL[countV] = ((outQL*3.0) - ((outPL + outRL + outSL + outTL)*2.0));
  aWL[countW] = ((outRL*3.0) - ((outPL + outQL + outSL + outTL)*2.0));
  aXL[countX] = ((outSL*3.0) - ((outPL + outQL + outRL + outTL)*2.0));
  aYL[countY] = ((outTL*3.0) - ((outPL + outQL + outRL + outSL)*2.0));
  
  aUR[countU] = ((outPR*3.0) - ((outQR + outRR + outSR + outTR)*2.0));
  aVR[countV] = ((outQR*3.0) - ((outPR + outRR + outSR + outTR)*2.0));
  aWR[countW] = ((outRR*3.0) - ((outPR + outQR + outSR + outTR)*2.0));
  aXR[countX] = ((outSR*3.0) - ((outPR + outQR + outRR + outTR)*2.0));
  aYR[countY] = ((outTR*3.0) - ((outPR + outQR + outRR + outSR)*2.0));
  
  countU+=1; (countU < 0 || countU > delayU) ? countU = 0;
  countV+=1; (countV < 0 || countV > delayV) ? countV = 0;
  countW+=1; (countW < 0 || countW > delayW) ? countW = 0;
  countX+=1; (countX < 0 || countX > delayX) ? countX = 0;
  countY+=1; (countY < 0 || countY > delayY) ? countY = 0;
  
  outUL = aUL[countU-((countU > delayU)?delayU+1:0)];
  outVL = aVL[countV-((countV > delayV)?delayV+1:0)];
  outWL = aWL[countW-((countW > delayW)?delayW+1:0)];
  outXL = aXL[countX-((countX > delayX)?delayX+1:0)];
  outYL = aYL[countY-((countY > delayY)?delayY+1:0)];
  
  outUR = aUR[countU-((countU > delayU)?delayU+1:0)];
  outVR = aVR[countV-((countV > delayV)?delayV+1:0)];
  outWR = aWR[countW-((countW > delayW)?delayW+1:0)];
  outXR = aXR[countX-((countX > delayX)?delayX+1:0)];
  outYR = aYR[countY-((countY > delayY)?delayY+1:0)];
  
  feedbackAR = ((outUL*3.0) - ((outVL + outWL + outXL + outYL)*2.0));
  feedbackBL = ((outVL*3.0) - ((outUL + outWL + outXL + outYL)*2.0));
  feedbackCR = ((outWL*3.0) - ((outUL + outVL + outXL + outYL)*2.0));
  feedbackDL = ((outXL*3.0) - ((outUL + outVL + outWL + outYL)*2.0));
  feedbackER = ((outYL*3.0) - ((outUL + outVL + outWL + outXL)*2.0));
  
  feedbackAL = ((outUR*3.0) - ((outVR + outWR + outXR + outYR)*2.0));
  feedbackBR = ((outVR*3.0) - ((outUR + outWR + outXR + outYR)*2.0));
  feedbackCL = ((outWR*3.0) - ((outUR + outVR + outXR + outYR)*2.0));
  feedbackDR = ((outXR*3.0) - ((outUR + outVR + outWR + outYR)*2.0));
  feedbackEL = ((outYR*3.0) - ((outUR + outVR + outWR + outXR)*2.0));
  
  inputSampleL = (outUL + outVL + outWL + outXL + outYL)*0.0016;
  inputSampleR = (outUR + outVR + outWR + outXR + outYR)*0.0016;

 (cycleEnd == 4) ? (
    lastRefL[0] = lastRefL[4]; 
    lastRefL[2] = (lastRefL[0] + inputSampleL)/2; 
    lastRefL[1] = (lastRefL[0] + lastRefL[2])/2; 
    lastRefL[3] = (lastRefL[2] + inputSampleL)/2; 
    lastRefL[4] = inputSampleL; 
    lastRefR[0] = lastRefR[4]; 
    lastRefR[2] = (lastRefR[0] + inputSampleR)/2; 
    lastRefR[1] = (lastRefR[0] + lastRefR[2])/2; 
    lastRefR[3] = (lastRefR[2] + inputSampleR)/2; 
    lastRefR[4] = inputSampleR; 
  );
  (cycleEnd == 3) ? (
    lastRefL[0] = lastRefL[3]; 
    lastRefL[2] = (lastRefL[0]+lastRefL[0]+inputSampleL)/3; 
    lastRefL[1] = (lastRefL[0]+inputSampleL+inputSampleL)/3; 
    lastRefL[3] = inputSampleL; 
    lastRefR[0] = lastRefR[3]; 
    lastRefR[2] = (lastRefR[0]+lastRefR[0]+inputSampleR)/3; 
    lastRefR[1] = (lastRefR[0]+inputSampleR+inputSampleR)/3; 
    lastRefR[3] = inputSampleR; 
  );
  (cycleEnd == 2) ? (
    lastRefL[0] = lastRefL[2]; 
    lastRefL[1] = (lastRefL[0] + inputSampleL)/2; 
    lastRefL[2] = inputSampleL; 
    lastRefR[0] = lastRefR[2]; 
    lastRefR[1] = (lastRefR[0] + inputSampleR)/2; 
    lastRefR[2] = inputSampleR; 
  );
  (cycleEnd == 1) ? (
    lastRefL[0] = inputSampleL;
    lastRefR[0] = inputSampleR;
  );
  cycle = 0; 
  inputSampleL = lastRefL[cycle];
  inputSampleR = lastRefR[cycle];
) : (
  inputSampleL = lastRefL[cycle];
  inputSampleR = lastRefR[cycle];
);

(abs(iirBL)<1.18*10^-37) ? iirBL = 0.0;
iirBL = (iirBL*(1.0-lowpass))+(inputSampleL*lowpass); inputSampleL = iirBL;
(abs(iirBR)<1.18*10^-37) ? iirBR = 0.0;
iirBR = (iirBR*(1.0-lowpass))+(inputSampleR*lowpass); inputSampleR = iirBR;

(wet < 1.0) ? (inputSampleL *= wet; inputSampleR *= wet;);
(dry < 1.0) ? (drySampleL *= dry; drySampleR *= dry;);
inputSampleL += drySampleL; inputSampleR += drySampleR;


fpdL = rand(UINT32_MAX);
fpdR = rand(UINT32_MAX); 


spl0 = inputSampleL;
spl1 = inputSampleR;
