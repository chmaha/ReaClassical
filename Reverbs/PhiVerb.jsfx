Version: 1.2
desc:PhiVerb Reverb (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Chamber2" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Chamber2 (MIT License)
  JSFX version released under GPLv3 license

slider1:0.34<0,1,0.01>Delay
slider2:0.31<0,1,0.01>Regen
slider3:0.28<0,1,0.01>Thick
slider4:0.25<0,1,0.01>Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
aEL = freemem; freemem+=10000;
aFL = freemem; freemem+=10000;
aGL = freemem; freemem+=10000;
aHL = freemem; freemem+=10000;
aAL = freemem; freemem+=10000;
aBL = freemem; freemem+=10000;
aCL = freemem; freemem+=10000;
aDL = freemem; freemem+=10000;
aIL = freemem; freemem+=10000;
aJL = freemem; freemem+=10000;
aKL = freemem; freemem+=10000;
aLL = freemem; freemem+=10000;
aML = freemem; freemem+=10000;

lastRefL = freemem; freemem+=10;
  
aER = freemem; freemem+=10000;
aFR = freemem; freemem+=10000;
aGR = freemem; freemem+=10000;
aHR = freemem; freemem+=10000;
aAR = freemem; freemem+=10000;
aBR = freemem; freemem+=10000;
aCR = freemem; freemem+=10000;
aDR = freemem; freemem+=10000;
aIR = freemem; freemem+=10000;
aJR = freemem; freemem+=10000;
aKR = freemem; freemem+=10000;
aLR = freemem; freemem+=10000;
aMR = freemem; freemem+=10000;

lastRefR = freemem; freemem+=10;

UINT32_MAX = 4294967295;

countI = 1;
countJ = 1;
countK = 1;
countL = 1;
countM = 1;

countA = 1;
countB = 1;
countC = 1;
countD = 1;  

countE = 1;
countF = 1;
countG = 1;
countH = 1;



@slider

A = slider1;
B = slider2;
C = slider3;
D = slider4;


@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

cycleEnd = floor(overallscale) | 0;
(cycleEnd < 1) ? cycleEnd = 1;
(cycleEnd > 4) ? cycleEnd = 4;
(cycle > cycleEnd-1) ? cycle = cycleEnd-1; 

size = (A*0.9)+0.1;
regen = (1.0-(pow(1.0-B,2)))*0.123;
echoScale = 1.0-C;
echo = ($phi - 1)  + ((2.0-$phi)*echoScale);
interpolate = (1.0-echo)*0.381966011250105; // tau

wet = D*2.0;
dry = 2.0 - wet;
(wet > 1.0) ? wet = 1.0;
(wet < 0.0) ? wet = 0.0;
(dry > 1.0) ? dry = 1.0;
(dry < 0.0) ? dry = 0.0;

delayM = sqrt(9900*size) | 0;
delayE = 9900*size | 0;
delayF = delayE*echo | 0; 
delayG = delayF*echo | 0;
delayH = delayG*echo | 0;
delayA = delayH*echo | 0;
delayB = delayA*echo | 0;
delayC = delayB*echo | 0;
delayD = delayC*echo | 0;
delayI = delayD*echo | 0;
delayJ = delayI*echo | 0;
delayK = delayJ*echo | 0;
delayL = delayK*echo | 0;

@sample
inputSampleL = spl0;
inputSampleR = spl1;


drySampleL = inputSampleL;
drySampleR = inputSampleR;

cycle+=1;
(cycle == cycleEnd) ? (
  aML[countM] = inputSampleL;
  aMR[countM] = inputSampleR;
  countM+=1; (countM < 0 || countM > delayM) ? countM = 0;
  inputSampleL = aML[countM-((countM > delayM)?delayM+1:0)];
  inputSampleR = aMR[countM-((countM > delayM)?delayM+1:0)];
  
  feedbackAL = (feedbackAL*(1.0-interpolate))+(previousAL*interpolate); previousAL = feedbackAL;
  feedbackBL = (feedbackBL*(1.0-interpolate))+(previousBL*interpolate); previousBL = feedbackBL;
  feedbackCL = (feedbackCL*(1.0-interpolate))+(previousCL*interpolate); previousCL = feedbackCL;
  feedbackDL = (feedbackDL*(1.0-interpolate))+(previousDL*interpolate); previousDL = feedbackDL;
  feedbackAR = (feedbackAR*(1.0-interpolate))+(previousAR*interpolate); previousAR = feedbackAR;
  feedbackBR = (feedbackBR*(1.0-interpolate))+(previousBR*interpolate); previousBR = feedbackBR;
  feedbackCR = (feedbackCR*(1.0-interpolate))+(previousCR*interpolate); previousCR = feedbackCR;
  feedbackDR = (feedbackDR*(1.0-interpolate))+(previousDR*interpolate); previousDR = feedbackDR;
  
  aIL[countI] = inputSampleL + (feedbackAL * regen);
  aJL[countJ] = inputSampleL + (feedbackBL * regen);
  aKL[countK] = inputSampleL + (feedbackCL * regen);
  aLL[countL] = inputSampleL + (feedbackDL * regen);
  aIR[countI] = inputSampleR + (feedbackAR * regen);
  aJR[countJ] = inputSampleR + (feedbackBR * regen);
  aKR[countK] = inputSampleR + (feedbackCR * regen);
  aLR[countL] = inputSampleR + (feedbackDR * regen);
  
  countI+=1; (countI < 0 || countI > delayI) ? countI = 0;
  countJ+=1; (countJ < 0 || countJ > delayJ) ? countJ = 0;
  countK+=1; (countK < 0 || countK > delayK) ? countK = 0;
  countL+=1; (countL < 0 || countL > delayL) ? countL = 0;
  
  outIL = aIL[countI-((countI > delayI)?delayI+1:0)];
  outJL = aJL[countJ-((countJ > delayJ)?delayJ+1:0)];
  outKL = aKL[countK-((countK > delayK)?delayK+1:0)];
  outLL = aLL[countL-((countL > delayL)?delayL+1:0)];
  outIR = aIR[countI-((countI > delayI)?delayI+1:0)];
  outJR = aJR[countJ-((countJ > delayJ)?delayJ+1:0)];
  outKR = aKR[countK-((countK > delayK)?delayK+1:0)];
  outLR = aLR[countL-((countL > delayL)?delayL+1:0)];
  
  aAL[countA] = (outIL - (outJL + outKL + outLL));
  aBL[countB] = (outJL - (outIL + outKL + outLL));
  aCL[countC] = (outKL - (outIL + outJL + outLL));
  aDL[countD] = (outLL - (outIL + outJL + outKL));
  aAR[countA] = (outIR - (outJR + outKR + outLR));
  aBR[countB] = (outJR - (outIR + outKR + outLR));
  aCR[countC] = (outKR - (outIR + outJR + outLR));
  aDR[countD] = (outLR - (outIR + outJR + outKR));
  
  countA+=1; (countA < 0 || countA > delayA) ? countA = 0;
  countB+=1; (countB < 0 || countB > delayB) ? countB = 0;
  countC+=1; (countC < 0 || countC > delayC) ? countC = 0;
  countD+=1; (countD < 0 || countD > delayD) ? countD = 0;
  
  outAL = aAL[countA-((countA > delayA)?delayA+1:0)];
  outBL = aBL[countB-((countB > delayB)?delayB+1:0)];
  outCL = aCL[countC-((countC > delayC)?delayC+1:0)];
  outDL = aDL[countD-((countD > delayD)?delayD+1:0)];
  outAR = aAR[countA-((countA > delayA)?delayA+1:0)];
  outBR = aBR[countB-((countB > delayB)?delayB+1:0)];
  outCR = aCR[countC-((countC > delayC)?delayC+1:0)];
  outDR = aDR[countD-((countD > delayD)?delayD+1:0)];
  
  aEL[countE] = (outAL - (outBL + outCL + outDL));
  aFL[countF] = (outBL - (outAL + outCL + outDL));
  aGL[countG] = (outCL - (outAL + outBL + outDL));
  aHL[countH] = (outDL - (outAL + outBL + outCL));
  aER[countE] = (outAR - (outBR + outCR + outDR));
  aFR[countF] = (outBR - (outAR + outCR + outDR));
  aGR[countG] = (outCR - (outAR + outBR + outDR));
  aHR[countH] = (outDR - (outAR + outBR + outCR));
  
  countE+=1; (countE < 0 || countE > delayE) ? countE = 0;
  countF+=1; (countF < 0 || countF > delayF) ? countF = 0;
  countG+=1; (countG < 0 || countG > delayG) ? countG = 0;
  countH+=1; (countH < 0 || countH > delayH) ? countH = 0;
  
  outEL = aEL[countE-((countE > delayE)?delayE+1:0)];
  outFL = aFL[countF-((countF > delayF)?delayF+1:0)];
  outGL = aGL[countG-((countG > delayG)?delayG+1:0)];
  outHL = aHL[countH-((countH > delayH)?delayH+1:0)];
  outER = aER[countE-((countE > delayE)?delayE+1:0)];
  outFR = aFR[countF-((countF > delayF)?delayF+1:0)];
  outGR = aGR[countG-((countG > delayG)?delayG+1:0)];
  outHR = aHR[countH-((countH > delayH)?delayH+1:0)];
  
  feedbackAR = (outEL - (outFL + outGL + outHL));
  feedbackBL = (outFL - (outEL + outGL + outHL));
  feedbackCR = (outGL - (outEL + outFL + outHL));
  feedbackDL = (outHL - (outEL + outFL + outGL));
  feedbackAL = (outER - (outFR + outGR + outHR));
  feedbackBR = (outFR - (outER + outGR + outHR));
  feedbackCL = (outGR - (outER + outFR + outHR));
  feedbackDR = (outHR - (outER + outFR + outGR));
  
  inputSampleL = (outEL + outFL + outGL + outHL)/8.0;
  inputSampleR = (outER + outFR + outGR + outHR)/8.0;
  
  (cycleEnd == 4) ? (
    lastRefL[0] = lastRefL[4];
    lastRefL[2] = (lastRefL[0] + inputSampleL)/2; 
    lastRefL[1] = (lastRefL[0] + lastRefL[2])/2;
    lastRefL[3] = (lastRefL[2] + inputSampleL)/2; 
    lastRefL[4] = inputSampleL; 
    lastRefR[0] = lastRefR[4];
    lastRefR[2] = (lastRefR[0] + inputSampleR)/2; 
    lastRefR[1] = (lastRefR[0] + lastRefR[2])/2; 
    lastRefR[3] = (lastRefR[2] + inputSampleR)/2;
    lastRefR[4] = inputSampleR; 
  );
  (cycleEnd == 3) ? (
    lastRefL[0] = lastRefL[3]; 
    lastRefL[2] = (lastRefL[0]+lastRefL[0]+inputSampleL)/3; 
    lastRefL[1] = (lastRefL[0]+inputSampleL+inputSampleL)/3;
    lastRefL[3] = inputSampleL; 
    lastRefR[0] = lastRefR[3]; 
    lastRefR[2] = (lastRefR[0]+lastRefR[0]+inputSampleR)/3; 
    lastRefR[1] = (lastRefR[0]+inputSampleR+inputSampleR)/3; 
    lastRefR[3] = inputSampleR; 
  );
  (cycleEnd == 2) ? (
    lastRefL[0] = lastRefL[2]; 
    lastRefL[1] = (lastRefL[0] + inputSampleL)/2; 
    lastRefL[2] = inputSampleL; 
    lastRefR[0] = lastRefR[2];
    lastRefR[1] = (lastRefR[0] + inputSampleR)/2; 
    lastRefR[2] = inputSampleR; 
  );
  (cycleEnd == 1) ? (
    lastRefL[0] = inputSampleL;
    lastRefR[0] = inputSampleR;
  );
  cycle = 0;
  inputSampleL = lastRefL[cycle];
  inputSampleR = lastRefR[cycle];
) : (
  inputSampleL = lastRefL[cycle];
  inputSampleR = lastRefR[cycle];
);

(cycleEnd == 4) ? 
(
    lastRefL[8] = inputSampleL; inputSampleL = (inputSampleL+lastRefL[7])*0.5;
    lastRefL[7] = lastRefL[8]; 
    lastRefR[8] = inputSampleR; inputSampleR = (inputSampleR+lastRefR[7])*0.5;
    lastRefR[7] = lastRefR[8]; 
);
(cycleEnd == 4|| cycleEnd == 3) ?
(
    lastRefL[8] = inputSampleL; inputSampleL = (inputSampleL+lastRefL[6])*0.5;
    lastRefL[6] = lastRefL[8]; 
    lastRefR[8] = inputSampleR; inputSampleR = (inputSampleR+lastRefR[6])*0.5;
    lastRefR[6] = lastRefR[8]; 
);
(cycleEnd == 4|| cycleEnd == 3 || cycleEnd == 2) ?
(
    lastRefL[8] = inputSampleL; inputSampleL = (inputSampleL+lastRefL[5])*0.5;
    lastRefL[5] = lastRefL[8]; 
    lastRefR[8] = inputSampleR; inputSampleR = (inputSampleR+lastRefR[5])*0.5;
    lastRefR[5] = lastRefR[8];
);

(wet < 1.0) ? (inputSampleL *= wet; inputSampleR *= wet;);
(dry < 1.0) ? (drySampleL *= dry; drySampleR *= dry;);
inputSampleL += drySampleL;
inputSampleR += drySampleR;




spl0 = inputSampleL;
spl1 = inputSampleR;
