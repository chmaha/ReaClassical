Version: 1.2
desc:Xonnos Dither (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "PaulDither" & "DoublePaul" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/PaulDither (MIT License)
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/DoublePaul (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,2,1{Xonnos Single,Xonnos Wide,Xonnos Double>Dither
slider2:0<0,1,1{16-bit,24-bit}>Bitdepth

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
bL = freemem; freemem += 11;  
bR = freemem; freemem += 11;  

UINT32_MAX = 4294967295;

previousDitherL = 0.0;
previousDitherR = 0.0;

count=0; while(count < 11) (bL[count] = 0.0;bR[count] = 0.0;count+=1;);

fpdL = 1.0; while (fpdL < 16386) (fpdL = rand()*UINT32_MAX);
fpdR = 1.0; while (fpdR < 16386) (fpdR = rand()*UINT32_MAX);

@slider

@block

(slider2 == 1) ? scaleFactor = 8388608.0
: scaleFactor = 32768.0;

@sample
inputSampleL = spl0;
inputSampleR = spl1;



(slider1 == 0) ? ( // Single
  fpdL = rand(UINT32_MAX);
  fpdR = rand(UINT32_MAX);
  
  inputSampleL *= scaleFactor;
  inputSampleR *= scaleFactor;
  
  currentDitherL = fpdL/UINT32_MAX;
  currentDitherR = fpdR/UINT32_MAX;
  
  inputSampleL += currentDitherL;
  inputSampleR += currentDitherR;
  
  inputSampleL -= previousDitherL;
  inputSampleR -= previousDitherR;
  
  inputSampleL = floor(inputSampleL);
  inputSampleR = floor(inputSampleR);
  
  previousDitherL = currentDitherL;
  previousDitherR = currentDitherR;
  
  inputSampleL /= scaleFactor;
  inputSampleR /= scaleFactor;
)
:  
(slider1 == 1) ? ( // Wide
  fpdL = rand(UINT32_MAX); fpdR = rand(UINT32_MAX);
  
  inputSampleL *= scaleFactor;
  inputSampleR *= scaleFactor;
  
  currentDither = fpdL/UINT32_MAX;
  ditherL = currentDither;
  ditherL -= previousDitherL;
  previousDitherL = currentDither;
  
  
  currentDither = fpdR/UINT32_MAX;
  ditherR = currentDither;
  ditherR -= previousDitherR;
  previousDitherR = currentDither;
  
  (abs(ditherL-ditherR) < 0.5) ? (
    fpdL = rand(UINT32_MAX);
    currentDither = fpdL/UINT32_MAX;
    ditherL = currentDither;
    ditherL -= previousDitherL;
    previousDitherL = currentDither;);
  
  (abs(ditherL-ditherR) < 0.5) ? (
    fpdR = rand(UINT32_MAX);
    currentDither = fpdR/UINT32_MAX;
    ditherR = currentDither;
    ditherR -= previousDitherR;
    previousDitherR = currentDither;);
  
  (abs(ditherL-ditherR) < 0.5) ? (
    fpdL = rand(UINT32_MAX);
    currentDither = fpdL/UINT32_MAX;
    ditherL = currentDither;
    ditherL -= previousDitherL;
    previousDitherL = currentDither;);
  
  inputSampleL = floor(inputSampleL+ditherL);
  inputSampleR = floor(inputSampleR+ditherR);
  
  inputSampleL /= scaleFactor;
  inputSampleR /= scaleFactor;
  
  fpdL = rand(UINT32_MAX); fpdR = rand(UINT32_MAX);
)
:   
(slider1 == 2) ? ( // Double
  inputSampleL *= scaleFactor;
  inputSampleR *= scaleFactor;
  
  bL[9] = bL[8]; bL[8] = bL[7]; bL[7] = bL[6]; bL[6] = bL[5];
  bL[5] = bL[4]; bL[4] = bL[3]; bL[3] = bL[2]; bL[2] = bL[1];
  bL[1] = bL[0]; bL[0] = fpdL/UINT32_MAX;
  
  currentDitherL  = (bL[0] * 0.061);
  currentDitherL -= (bL[1] * 0.11);
  currentDitherL += (bL[8] * 0.126);
  currentDitherL -= (bL[7] * 0.23);
  currentDitherL += (bL[2] * 0.25);
  currentDitherL -= (bL[3] * 0.43);
  currentDitherL += (bL[6] * 0.5);
  currentDitherL -= bL[5];
  currentDitherL += bL[4];
  
  inputSampleL += currentDitherL;
  
  inputSampleL = floor(inputSampleL);
  
  bR[9] = bR[8]; bR[8] = bR[7]; bR[7] = bR[6]; bR[6] = bR[5];
  bR[5] = bR[4]; bR[4] = bR[3]; bR[3] = bR[2]; bR[2] = bR[1];
  bR[1] = bR[0]; bR[0] = fpdR/UINT32_MAX;
  
  currentDitherR  = (bR[0] * 0.061);
  currentDitherR -= (bR[1] * 0.11);
  currentDitherR += (bR[8] * 0.126);
  currentDitherR -= (bR[7] * 0.23);
  currentDitherR += (bR[2] * 0.25);
  currentDitherR -= (bR[3] * 0.43);
  currentDitherR += (bR[6] * 0.5);
  currentDitherR -= bR[5];
  currentDitherR += bR[4];
  
  inputSampleR += currentDitherR;
  
  inputSampleR = floor(inputSampleR);
  

  inputSampleL /= scaleFactor;
  inputSampleR /= scaleFactor;

  fpdL = rand(UINT32_MAX); fpdR = rand(UINT32_MAX);

);

spl0 = inputSampleL;
spl1 = inputSampleR;
