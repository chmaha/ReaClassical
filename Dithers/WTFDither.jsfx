Version: 1.2
desc:WTFDither (chmaha)
author: chmaha
about:
  "Wipe The Floor" Triangular Dither
  Uses DSP from airwindows "TPDFDither" and "TPDFWide" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/TPDFDither (MIT License)
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/TPDFWide (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,1,1{WTF,WTF Wide}>Dither
slider2:0<0,1,1{16-bit,24-bit}>Bitdepth

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

UINT32_MAX = 4294967295;

fpdL = 1.0; while (fpdL < 16386) (fpdL = rand()*UINT32_MAX);
fpdR = 1.0; while (fpdR < 16386) (fpdR = rand()*UINT32_MAX);

@slider


@block
(slider2 == 1) ? scaleFactor = 8388608.0 : scaleFactor = 32768.0;

@sample

inputSampleL = spl0;
inputSampleR = spl1;

(slider1 == 0) ? 
(
  
  fpdL ~= fpdL << 13; fpdL ~= fpdL >> 17; fpdL ~= fpdL << 5;
  (fpdL < 0) ? fpdL += UINT32_MAX;
  
  fpdR ~= fpdR << 13; fpdR ~= fpdR >> 17; fpdR ~= fpdR << 5;
  (fpdR < 0) ? fpdR += UINT32_MAX;
  
  inputSampleL *= scaleFactor;
  inputSampleR *= scaleFactor;
  
  inputSampleL -= 1.0;
  inputSampleR -= 1.0;
  
  inputSampleL += fpdL/UINT32_MAX;
  inputSampleR += fpdR/UINT32_MAX;
  fpdL ~= fpdL << 13; fpdL ~= fpdL >> 17; fpdL ~= fpdL << 5;
  fpdR ~= fpdR << 13; fpdR ~= fpdR >> 17; fpdR ~= fpdR << 5;
  (fpdL < 0) ? fpdL += UINT32_MAX;
  (fpdR < 0) ? fpdR += UINT32_MAX;
  inputSampleL += fpdL/UINT32_MAX;
  inputSampleR += fpdR/UINT32_MAX;
  
  inputSampleL = floor(inputSampleL);
  inputSampleR = floor(inputSampleR);
) : (slider1 == 1) ?
(
  
  inputSampleL *= scaleFactor;
  inputSampleR *= scaleFactor;
  
  ditherL = -1.0;
  ditherL += fpdL/UINT32_MAX;
  fpdL = rand(UINT32_MAX);
  ditherL += fpdL/UINT32_MAX;
  
  ditherR = -1.0;
  ditherR += fpdR/UINT32_MAX;
  fpdR  = rand(UINT32_MAX);
  ditherR += fpdR/UINT32_MAX;
  
  (abs(ditherL-ditherR) < 0.5) ? (
  ditherL = -1.0;
  ditherL += fpdL/UINT32_MAX;
  fpdL = rand(UINT32_MAX);
  ditherL += fpdL/UINT32_MAX;
  );
  
  (abs(ditherL-ditherR) < 0.5) ? (
  ditherR = -1.0;
  ditherR += fpdR/UINT32_MAX;
  fpdR  = rand(UINT32_MAX);
  ditherR += fpdR/UINT32_MAX;
  );
  
  (abs(ditherL-ditherR) < 0.5) ? (
  ditherL = -1.0;
  ditherL += fpdL/UINT32_MAX;
  fpdL = rand(UINT32_MAX);
  ditherL += fpdL/UINT32_MAX;
  );
  
  inputSampleL = floor(inputSampleL+ditherL);
  inputSampleR = floor(inputSampleR+ditherR);
);

inputSampleL /= scaleFactor;
inputSampleR /= scaleFactor;

fpdL = rand(UINT32_MAX);
fpdR = rand(UINT32_MAX);

spl0 = inputSampleL;
spl1 = inputSampleR;

