Version: 1.2
desc:Six-Dither Sid (chmaha)
author: chmaha
about:
  Uses DSP from airwindows 3 "Monitoring" plugins by Chris Johnson
  Names: Avant-garde = NJAD, Twilight = Dark, Nintenda = Nine Tens into Dark
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Monitoring (MIT License)
  JSFX version released under GPLv3 license

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

slider1:bitdepth=0<0,5,1{Avant-garde 16-bit,Twilight 16-bit,Nintenda 16-bit,Avant-garde 24-bit,Twilight 24-bit,Nintenda 24-bit}>WordLength Reducer

@init
freemem = 0;
bynL = freemem; freemem+=13;
bynR = freemem; freemem+=13;
darkSampleL = freemem; freemem+=100;
darkSampleR = freemem; freemem+=100;

bynL[0] = 1000.0;
bynL[1] = 301.0;
bynL[2] = 176.0;
bynL[3] = 125.0;
bynL[4] = 97.0;
bynL[5] = 79.0;
bynL[6] = 67.0;
bynL[7] = 58.0;
bynL[8] = 51.0;
bynL[9] = 46.0;
bynL[10] = 1000.0;
noiseShapingL = 0.0;
bynR[0] = 1000.0;
bynR[1] = 301.0;
bynR[2] = 176.0;
bynR[3] = 125.0;
bynR[4] = 97.0;
bynR[5] = 79.0;
bynR[6] = 67.0;
bynR[7] = 58.0;
bynR[8] = 51.0;
bynR[9] = 46.0;
bynR[10] = 1000.0;
noiseShapingR = 0.0;


NSOddL = 0.0; NSEvenL = 0.0; prevShapeL = 0.0;
NSOddR = 0.0; NSEvenR = 0.0; prevShapeR = 0.0;
(bitdepth == 2) || (bitdepth == 5) ? flip = 1; //Ten Nines

count = 0; loop(99, darkSampleL[count] = 0; darkSampleR[count] = 0; count+=1;);

UINT32_MAX = 4294967295;

A = 0.0;
fpdL = 1.0; while (fpdL < 16386) (fpdL = rand()*UINT32_MAX);
fpdR = 1.0; while (fpdR < 16386) (fpdR = rand()*UINT32_MAX);

@slider

@block

overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

depth = (17.0*overallscale) | 0;
(depth < 3) ? depth = 3;
(depth > 98) ? depth = 98; //for Dark

@sample

inputSampleL = spl0;
inputSampleR = spl1;

(bitdepth == 1) || (bitdepth == 2) || (bitdepth == 4) || (bitdepth == 5) ? (
fpdL ~= fpdL << 13; fpdL ~= fpdL >> 17; fpdL ~= fpdL << 5;
(fpdL < 0) ? fpdL += UINT32_MAX;
fpdR ~= fpdR << 13; fpdR ~= fpdR >> 17; fpdR ~= fpdR << 5;
(fpdR < 0) ? fpdR += UINT32_MAX;
);

(bitdepth < 3) ? (
  inputSampleL = inputSampleL * 32768.0; //16-bit
  inputSampleR = inputSampleR * 32768.0;
) : (
  inputSampleL = inputSampleL * 8388608.0; //24-bit
  inputSampleR = inputSampleR * 8388608.0;
);

(bitdepth == 0) || (bitdepth == 3) ? ( // NJAD
cutbinsL = 0;
cutbinsR = 0;
drySampleL = inputSampleL;
drySampleR = inputSampleR;
inputSampleL -= noiseShapingL;
inputSampleR -= noiseShapingR;

//NJAD L
benfordize; benfordize = floor(inputSampleL);
while (benfordize >= 1.0) (benfordize /= 10);
while (benfordize < 1.0 && benfordize > 0.0000001) (benfordize *= 10);
hotbinA = floor(benfordize);

totalA = 0;
((hotbinA > 0) && (hotbinA < 10)) ?
(
  bynL[hotbinA] += 1; (bynL[hotbinA] > 982) ? cutbinsL = 1;
  totalA += (301-bynL[1]); totalA += (176-bynL[2]); totalA += (125-bynL[3]);
  totalA += (97-bynL[4]); totalA += (79-bynL[5]); totalA += (67-bynL[6]);
  totalA += (58-bynL[7]); totalA += (51-bynL[8]); totalA += (46-bynL[9]); bynL[hotbinA] -= 1;
) : (hotbinA = 10;);

benfordize = ceil(inputSampleL);
while (benfordize >= 1.0) (benfordize /= 10);
while (benfordize < 1.0 && benfordize > 0.0000001) (benfordize *= 10);
hotbinB = floor(benfordize);

totalB = 0;
((hotbinB > 0) && (hotbinB < 10)) ?
(
  bynL[hotbinB] += 1; (bynL[hotbinB] > 982) ? cutbinsL = 1;
  totalB += (301-bynL[1]); totalB += (176-bynL[2]); totalB += (125-bynL[3]);
  totalB += (97-bynL[4]); totalB += (79-bynL[5]); totalB += (67-bynL[6]);
  totalB += (58-bynL[7]); totalB += (51-bynL[8]); totalB += (46-bynL[9]); bynL[hotbinB] -= 1;
) : hotbinB = 10;

(totalA < totalB) ? (bynL[hotbinA] += 1; outputSample = floor(inputSampleL);)
: (bynL[hotbinB] += 1; outputSample = floor(inputSampleL+1););

(cutbinsL) ? (
  bynL[1] *= 0.99; bynL[2] *= 0.99; bynL[3] *= 0.99; bynL[4] *= 0.99; bynL[5] *= 0.99;
  bynL[6] *= 0.99; bynL[7] *= 0.99; bynL[8] *= 0.99; bynL[9] *= 0.99; bynL[10] *= 0.99;
);
noiseShapingL += outputSample - drySampleL;
(noiseShapingL > abs(inputSampleL)) ? noiseShapingL = abs(inputSampleL);
(noiseShapingL < -abs(inputSampleL)) ? noiseShapingL = -abs(inputSampleL);

(bitdepth == 0) ? inputSampleL = outputSample / 32768.0
: inputSampleL = outputSample / 8388608.0;

(inputSampleL > 1.0) ? inputSampleL = 1.0;
(inputSampleL < -1.0)? inputSampleL = -1.0;
//finished NJAD L

//NJAD R
benfordize = floor(inputSampleR);
while (benfordize >= 1.0) (benfordize /= 10);
while (benfordize < 1.0 && benfordize > 0.0000001) (benfordize *= 10);
hotbinA = floor(benfordize);

totalA = 0;
((hotbinA > 0) && (hotbinA < 10)) ?
(
  bynR[hotbinA] += 1; (bynR[hotbinA] > 982) ? cutbinsR = 1;
  totalA += (301-bynR[1]); totalA += (176-bynR[2]); totalA += (125-bynR[3]);
  totalA += (97-bynR[4]); totalA += (79-bynR[5]); totalA += (67-bynR[6]);
  totalA += (58-bynR[7]); totalA += (51-bynR[8]); totalA += (46-bynR[9]); bynR[hotbinA] -= 1;
) : hotbinA = 10;

benfordize = ceil(inputSampleR);
while (benfordize >= 1.0) (benfordize /= 10);
while (benfordize < 1.0 && benfordize > 0.0000001) (benfordize *= 10);
hotbinB = floor(benfordize);

totalB = 0;
((hotbinB > 0) && (hotbinB < 10)) ?
(
  bynR[hotbinB] += 1;(bynR[hotbinB] > 982) ? cutbinsR = 1;
  totalB += (301-bynR[1]); totalB += (176-bynR[2]); totalB += (125-bynR[3]);
  totalB += (97-bynR[4]); totalB += (79-bynR[5]); totalB += (67-bynR[6]);
  totalB += (58-bynR[7]); totalB += (51-bynR[8]); totalB += (46-bynR[9]); bynR[hotbinB] -= 1;
) : hotbinB = 10;

(totalA < totalB) ? (bynR[hotbinA] += 1; outputSample = floor(inputSampleR);)
: (bynR[hotbinB] += 1; outputSample = floor(inputSampleR+1););

(cutbinsR) ? (
  bynR[1] *= 0.99; bynR[2] *= 0.99; bynR[3] *= 0.99; bynR[4] *= 0.99; bynR[5] *= 0.99;
  bynR[6] *= 0.99; bynR[7] *= 0.99; bynR[8] *= 0.99; bynR[9] *= 0.99; bynR[10] *= 0.99;
);
noiseShapingR += outputSample - drySampleR;
(noiseShapingR > abs(inputSampleR)) ?noiseShapingR = abs(inputSampleR);
(noiseShapingR < -abs(inputSampleR))? noiseShapingR = -abs(inputSampleR);

(bitdepth == 0) ? inputSampleR = outputSample / 32768.0
: inputSampleR = outputSample / 8388608.0;

(inputSampleR > 1.0) ? inputSampleR = 1.0;
(inputSampleR < -1.0)? inputSampleR = -1.0;
)
: (bitdepth == 1) || (bitdepth == 2) || (bitdepth == 4) || (bitdepth == 5) ? // Dark & Nine Tens Into Dark
(
  (bitdepth == 2) || (bitdepth == 5) ? (
    correction = 0;
    (flip) ? (
      NSOddL = (NSOddL * 0.9999999999) + prevShapeL;
      NSEvenL = (NSEvenL * 0.9999999999) - prevShapeL;
      correction = NSOddL;
    ) : (
      NSOddL = (NSOddL * 0.9999999999) - prevShapeL;
      NSEvenL = (NSEvenL * 0.9999999999) + prevShapeL;
      correction = NSEvenL;
    );
    shapedSampleL = inputSampleL+correction;
  );
//begin left
      (bitdepth == 1) || (bitdepth == 4) ? (
      quantA = floor(inputSampleL);
      quantB = floor(inputSampleL+1.0););

     (bitdepth == 2) || (bitdepth == 5) ? (
     quantA = floor(shapedSampleL);
     quantB = floor(shapedSampleL+1.0););

    expectedSlew = 0;
    x = 0; while(x < depth)(
      expectedSlew += (darkSampleL[x+1] - darkSampleL[x]);
      x+=1;
    );
    expectedSlew /= depth;

    testA = abs((darkSampleL[0] - quantA) - expectedSlew);
    testB = abs((darkSampleL[0] - quantB) - expectedSlew);

    (testA < testB) ? inputSampleL = quantA
    : inputSampleL = quantB;

    x = depth; while(x >=0) (
      darkSampleL[x+1] = darkSampleL[x];
      x-=1;
    );
    darkSampleL[0] = inputSampleL;
    //end Dark left
    (bitdepth == 2) || (bitdepth == 5) ? (
    prevShapeL = (floor(shapedSampleL) - inputSampleL)*0.9999999999;);

    //begin right
    (bitdepth == 2) || (bitdepth == 5) ? (
      correction = 0;
      (flip) ? (
        NSOddR = (NSOddR * 0.9999999999) + prevShapeR;
        NSEvenR = (NSEvenR * 0.9999999999) - prevShapeR;
        correction = NSOddR;
      ) : (
        NSOddR = (NSOddR * 0.9999999999) - prevShapeR;
        NSEvenR = (NSEvenR * 0.9999999999) + prevShapeR;
        correction = NSEvenR;
    );
    shapedSampleR = inputSampleR+correction;);

      (bitdepth == 1) || (bitdepth == 4) ? (
      quantA = floor(inputSampleR);
      quantB = floor(inputSampleR+1.0););

     (bitdepth == 2) || (bitdepth == 5) ? (
     quantA = floor(shapedSampleR);
     quantB = floor(shapedSampleR+1.0););

    expectedSlew = 0;
    x = 0; while(x < depth)(
      expectedSlew += (darkSampleR[x+1] - darkSampleR[x]);
      x+=1;
    );
    expectedSlew /= depth;

    testA = abs((darkSampleR[0] - quantA) - expectedSlew);
    testB = abs((darkSampleR[0] - quantB) - expectedSlew);

    (testA < testB) ? inputSampleR = quantA
    : inputSampleR = quantB;

    x = depth; while(x >=0) (
      darkSampleR[x+1] = darkSampleR[x];
      x-=1;
    );
    darkSampleR[0] = inputSampleR;
    //end Dark right
    (bitdepth == 2) || (bitdepth == 5) ? (
    prevShapeR = (floor(shapedSampleR) - inputSampleR)*0.9999999999;
    flip = !flip;
    );

   (bitdepth < 3 ) ? (
      inputSampleL /= 32768.0;
      inputSampleR /= 32768.0;
    ) : (
      inputSampleL /= 8388608.0;
      inputSampleR /= 8388608.0;
    );
);

spl0 = inputSampleL;
spl1 = inputSampleR;

