Version: 1.2
desc:Stan Dither (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "StudioTan" plugin by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/StudioTan (MIT License)
  JSFX version released under GPLv3 license

slider1:bitdepth=0<0,1,1{Stan 16-bit,Stan 24-bit}>Bitdepth

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

  lastSampleL = 0.0;
  lastSample2L = 0.0;
  noiseShapingL = 0.0;
  lastSampleR = 0.0;
  lastSample2R = 0.0;
  noiseShapingR = 0.0;

@slider


@block


@sample

inputSampleL = spl0;
inputSampleR = spl1;

(bitdepth == 1) ? (
  inputSampleL *= 8388608.0;
  inputSampleR *= 8388608.0;
) : (
  inputSampleL *= 32768.0;
  inputSampleR *= 32768.0;
);

lastSampleL -= (noiseShapingL*0.8);
lastSampleR -= (noiseShapingR*0.8);
((lastSampleL+lastSampleL) <= (inputSampleL+lastSample2L)) ? outputSampleL = floor(lastSampleL) //StudioTan
: outputSampleL = floor(lastSampleL+1.0); //round down or up based on whether it softens treble angles
((lastSampleR+lastSampleR) <= (inputSampleR+lastSample2R)) ? outputSampleR = floor(lastSampleR) //StudioTan
: outputSampleR = floor(lastSampleR+1.0); //round down or up based on whether it softens treble angles

noiseShapingL += outputSampleL;
noiseShapingL -= lastSampleL; //apply noise shaping
lastSample2L = lastSampleL;
lastSampleL = inputSampleL; //we retain three samples in a row

noiseShapingR += outputSampleR;
noiseShapingR -= lastSampleR; //apply noise shaping
lastSample2R = lastSampleR;
lastSampleR = inputSampleR; //we retain three samples in a row
//end StudioTan or Dither Me Timbers

noiseSuppressL = abs(inputSampleL);
(noiseShapingL > noiseSuppressL) ? noiseShapingL = noiseSuppressL;
(noiseShapingL < -noiseSuppressL) ? noiseShapingL = -noiseSuppressL;

noiseSuppressR = abs(inputSampleR);
(noiseShapingR > noiseSuppressR) ? noiseShapingR = noiseSuppressR;
(noiseShapingR < -noiseSuppressR) ? noiseShapingR = -noiseSuppressR;

(bitdepth == 1) ? (
  ironBarL = outputSampleL / 8388608.0;
  ironBarR = outputSampleR / 8388608.0;
) : (
  ironBarL = outputSampleL / 32768.0;
  ironBarR = outputSampleR / 32768.0;
);

(ironBarL > 1.0) ? ironBarL = 1.0;
(ironBarL < -1.0) ? ironBarL = -1.0;
(ironBarR > 1.0) ? ironBarR = 1.0;
(ironBarR < -1.0) ? ironBarR = -1.0;

spl0 = ironBarL;
spl1 = ironBarR;