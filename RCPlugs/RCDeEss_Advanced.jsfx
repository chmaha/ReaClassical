NoIndex: true
desc:RCDeEss Advanced (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "DeBess" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/DeBess (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,1,0.01>Intensity
slider2:0.5<0,1,0.01>Sharpness
slider3:0.5<0,1,0.01>Depth
slider4:0.5<0,1,0.01>Filter
slider5:0<0,1,1{Full,Delta>Sense Monitoring

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
sL = freemem; freemem +=41;
mL = freemem; freemem +=41;
cL = freemem; freemem +=41;
sR = freemem; freemem +=41;
mR = freemem; freemem +=41;
cR = freemem; freemem +=41;

ratioAL = ratioBL = 1.0;
ratioAR = ratioBR = 1.0;
flip = 0;  



@slider

A = slider1;
B = slider2;
C = slider3;
D = slider4;
E = slider5;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

intensity = pow(A,5)*(8192/overallscale);
sharpness = B*40.0;
(sharpness < 2) ? sharpness = 2;
speed = 0.1 / sharpness;
depth = 1.0 / (C+0.0001);
iirAmount = D;
monitoring = E;

@sample
inputSampleL = spl0;
inputSampleR = spl1;



sL[0] = inputSampleL;
sR[0] = inputSampleR; 

x = sharpness | 0; while(x > 0) (
  sL[x] = sL[x-1];
  sR[x] = sR[x-1];
  x -= 1;
);

mL[1] = (sL[1]-sL[2])*((sL[1]-sL[2])/1.3);
mR[1] = (sR[1]-sR[2])*((sR[1]-sR[2])/1.3);
x = sharpness - 1 | 0; while(x > 1) (
  mL[x] = (sL[x]-sL[x+1])*((sL[x-1]-sL[x])/1.3);
  mR[x] = (sR[x]-sR[x+1])*((sR[x-1]-sR[x])/1.3);
  x -= 1;
); 

senseL = abs(mL[1] - mL[2]) * sharpness * sharpness;
senseR = abs(mR[1] - mR[2]) * sharpness * sharpness;
x = sharpness - 1 | 0; while(x > 0) (
  multL = abs(mL[x] - mL[x+1]) * sharpness * sharpness;
  (multL < 1.0) ? senseL *= multL;
  multR = abs(mR[x] - mR[x+1]) * sharpness * sharpness;
  (multR < 1.0) ? senseR *= multR;
  x -= 1;
); 

senseL = 1.0+(intensity*intensity*senseL);
(senseL > intensity) ? senseL = intensity;
senseR= 1.0+(intensity*intensity*senseR);
(senseR > intensity) ? senseR = intensity;

(flip) ? (
  iirSampleAL = (iirSampleAL * (1 - iirAmount)) + (inputSampleL * iirAmount);
  iirSampleAR = (iirSampleAR * (1 - iirAmount)) + (inputSampleR * iirAmount);
  ratioAL = (ratioAL * (1.0-speed))+(senseL * speed);
  ratioAR = (ratioAR * (1.0-speed))+(senseR * speed);
  (ratioAL > depth) ? ratioAL = depth;
  (ratioAR > depth) ? ratioAR = depth;
  (ratioAL > 1.0) ? inputSampleL = iirSampleAL+((inputSampleL-iirSampleAL)/ratioAL);
  (ratioAR > 1.0) ? inputSampleR = iirSampleAR+((inputSampleR-iirSampleAR)/ratioAR);
)
: (
  iirSampleBL = (iirSampleBL * (1 - iirAmount)) + (inputSampleL * iirAmount);  
  iirSampleBR = (iirSampleBR * (1 - iirAmount)) + (inputSampleR * iirAmount);  
  ratioBL = (ratioBL * (1.0-speed))+(senseL * speed);      
  ratioBR = (ratioBR * (1.0-speed))+(senseR * speed);      
  (ratioBL > depth) ? ratioBL = depth;
  (ratioBR > depth) ? ratioBR = depth;
  (ratioAL > 1.0) ? inputSampleL = iirSampleBL+((inputSampleL-iirSampleBL)/ratioBL);
  (ratioAR > 1.0) ? inputSampleR = iirSampleBR+((inputSampleR-iirSampleBR)/ratioBR);
);
flip = !flip;

(slider5 == 1) ? (
  inputSampleL = spl0 - inputSampleL;
  inputSampleR = spl1 - inputSampleR;
);





spl0 = inputSampleL;
spl1 = inputSampleR;
