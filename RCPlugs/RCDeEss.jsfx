Version: 1.2
desc:RCDeEss Standard  (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "DeEss" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/DeEss (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,1,0.01>Intensity
slider2:-24<-48,0,0.01>Max DeEss (dB)
slider3:0.5<0,1,0.01>Frequency

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
UINT32_MAX = 4294967295;
A = 0.0;
B = 0.5;
C = 0.5;

s1L = s2L = s3L = s4L = s5L = s6L= s7L = 0.0;
m1L = m2L = m3L = m4L = m5L = m6L = 0.0;
c1L = c2L = c3L = c4L = c5L = 0.0;
ratioAL = ratioBL = 1.0;
iirSampleAL = 0.0;
iirSampleBL = 0.0;

s1R = s2R = s3R = s4R = s5R = s6R = s7R = 0.0;
m1R = m2R = m3R = m4R = m5R = m6R = 0.0;
c1R = c2R = c3R = c4R = c5R = 0.0;
ratioAR = ratioBR = 1.0;
iirSampleAR = 0.0;
iirSampleBR = 0.0;

flip = false;  



@slider
A = slider1;
B = (slider2/48) + 1;
C = slider3;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

intensity = pow(A,5)*(8192/overallscale);
maxdess = 1.0 / pow(10.0,((B-1.0)*48.0)/20);
iirAmount = pow(C,2)/overallscale;

@sample
inputSampleL = spl0; 
inputSampleR = spl1;

noisesourceL = 0;
noisesourceR = 850010;

noisesourceL = noisesourceL % 1700021; noisesourceL+=1;
residue = noisesourceL * noisesourceL;
residue = residue % 170003; residue *= residue;
residue = residue % 17011; residue *= residue;
residue = residue % 1709; residue *= residue;
residue = residue % 173; residue *= residue;
residue = residue % 17;
applyresidue = residue;
applyresidue *= 0.00000001;
applyresidue *= 0.00000001;
inputSampleL += applyresidue;
(inputSampleL<1.2*10^-38 && -inputSampleL<1.2*10^-38) ? (
  inputSampleL -= applyresidue;
);

noisesourceR = noisesourceR % 1700021; noisesourceR+=1;
residue = noisesourceR * noisesourceR;
residue = residue % 170003; residue *= residue;
residue = residue % 17011; residue *= residue;
residue = residue % 1709; residue *= residue;
residue = residue % 173; residue *= residue;
residue = residue % 17;
applyresidue = residue;
applyresidue *= 0.00000001;
applyresidue *= 0.00000001;
inputSampleR += applyresidue;
(inputSampleR<1.2*10^-38 && -inputSampleR<1.2*10^-38) ? (
  inputSampleR -= applyresidue;
);


s3L = s2L;
s2L = s1L;
s1L = inputSampleL;
m1L = (s1L-s2L)*((s1L-s2L)/1.3);
m2L = (s2L-s3L)*((s1L-s2L)/1.3);
sense = abs((m1L-m2L)*((m1L-m2L)/1.3));

attackspeed = 7.0+(sense*1024);


sense = 1.0+(intensity*intensity*sense);
(sense > intensity) ? (sense = intensity;);

recovery = 1.0+(0.01/sense);


offset = 1.0-abs(inputSampleL);

(flip) ? (
  iirSampleAL = (iirSampleAL * (1 - (offset * iirAmount))) + (inputSampleL * (offset * iirAmount));
  (ratioAL < sense) ?
  (ratioAL = ((ratioAL*attackspeed)+sense)/(attackspeed+1.0);)
  :
  (ratioAL = 1.0+((ratioAL-1.0)/recovery););

  (ratioAL > maxdess) ? (ratioAL = maxdess;);
  inputSampleL = iirSampleAL+((inputSampleL-iirSampleAL)/ratioAL);
)
: (
  iirSampleBL = (iirSampleBL * (1 - (offset * iirAmount))) + (inputSampleL * (offset * iirAmount));  
  (ratioBL < sense) ?
  (ratioBL = ((ratioBL*attackspeed)+sense)/(attackspeed+1.0);)
  :
  (ratioBL = 1.0+((ratioBL-1.0)/recovery););

  (ratioBL > maxdess) ? (ratioBL = maxdess;);
  inputSampleL = iirSampleBL+((inputSampleL-iirSampleBL)/ratioBL);
); 

s3R = s2R;
s2R = s1R;
s1R = inputSampleR;
m1R = (s1R-s2R)*((s1R-s2R)/1.3);
m2R = (s2R-s3R)*((s1R-s2R)/1.3);
sense = abs((m1R-m2R)*((m1R-m2R)/1.3));

attackspeed = 7.0+(sense*1024);


sense = 1.0+(intensity*intensity*sense);
(sense > intensity) ? (sense = intensity;);

recovery = 1.0+(0.01/sense);


offset = 1.0-abs(inputSampleR);

(flip) ? (
  iirSampleAR = (iirSampleAR * (1 - (offset * iirAmount))) + (inputSampleR * (offset * iirAmount));
  (ratioAR < sense) ?
  (ratioAR = ((ratioAR*attackspeed)+sense)/(attackspeed+1.0);)
  :
  (ratioAR = 1.0+((ratioAR-1.0)/recovery););

  (ratioAR > maxdess) ? (ratioAR = maxdess;);
  inputSampleR = iirSampleAR+((inputSampleR-iirSampleAR)/ratioAR);
)
: (
  iirSampleBR = (iirSampleBR * (1 - (offset * iirAmount))) + (inputSampleR * (offset * iirAmount));  
  (ratioBR < sense) ? 
  (ratioBR = ((ratioBR*attackspeed)+sense)/(attackspeed+1.0);)
  :
  (ratioBR = 1.0+((ratioBR-1.0)/recovery););

  (ratioBR > maxdess) ? (ratioBR = maxdess;);
  inputSampleR = iirSampleBR+((inputSampleR-iirSampleBR)/ratioBR);
);

flip = !flip;

 

spl0 = inputSampleL;
spl1 = inputSampleR;
