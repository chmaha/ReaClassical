desc:RCGain (ReaClassical.org)
author: chmaha
version: 1.0
Changelog:
  Initial commit
about:
  Uses DSP from airwindows "PurestGain" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/PurestGain (MIT License)
  JSFX version released under GPLv3 license

slider1:0<-20,20,0.1>Gain (dB)
// slider2:1.0<0,1,0.01>Slow Fade

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
UINT32_MAX = 4294967295;
A = 0.5;
B = 1.0;
gainchase = -90.0;
settingchase = -90.0;
gainBchase = -90.0;
chasespeed = 350.0;
fpdL = 1.0; while (fpdL < 16386) (fpdL = rand()*UINT32_MAX);
fpdR = 1.0; while (fpdR < 16386) (fpdR = rand()*UINT32_MAX);

@slider

A = ((slider1+20.0)/40.0);

@block

overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

inputgain = (A*40.0)-20.0;
(settingchase != inputgain) ? (
  chasespeed *= 2.0;
  settingchase = inputgain;
);
(chasespeed > 2500.0) ? chasespeed = 2500.0;
(gainchase < -60.0) ? (
  gainchase = pow(10.0,inputgain/20.0);
);

targetBgain = B;
(gainBchase < 0.0) ? gainBchase = targetBgain;

 
@sample
targetgain = pow(10.0,settingchase/20.0);

chasespeed *= 0.9999;
chasespeed -= 0.01;
(chasespeed < 350.0) ? chasespeed = 350.0;

gainchase = (((gainchase*chasespeed)+targetgain)/(chasespeed+1.0));

gainBchase = (((gainBchase*4000)+targetBgain)/4001);

outputgain = gainchase * gainBchase;

inputSampleL = spl0;
inputSampleR = spl1;
(abs(inputSampleL)<1.18*10^-23) ? inputSampleL = fpdL * 1.18*10^-17;
(abs(inputSampleR)<1.18*10^-23) ? inputSampleR = fpdR * 1.18*10^-17;

(outputgain != 1.0) ?
(
  inputSampleL *= outputgain;
  inputSampleR *= outputgain;
  fpdL ~= fpdL << 13; fpdL ~= fpdL >> 17; fpdL ~= fpdL << 5;
  fpdR ~= fpdR << 13; fpdR ~= fpdR >> 17; fpdR ~= fpdR << 5;
  (fpdL < 0) ? fpdL += UINT32_MAX;
  (fpdR < 0) ? fpdR += UINT32_MAX;
  spl0 = inputSampleL;
  spl1 = inputSampleR;
);


