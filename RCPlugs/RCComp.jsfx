desc:RCCompressor (chmaha)
author: chmaha
about:
  Express Bus Compressor (Stillwell) modified for classical music use by chmaha
  See below the code for copyright notices, list of conditions and disclaimers

slider1:-30<-60,0,0.1>Threshold (dB)
slider2:1.1<1.1,1.3,0.01>Ratio
slider3:0<-20,20,0.1>Gain
slider4:0<0,4,1{Peak,RMS,LUFS-S,LUFS-M}>Detection

in_pin:left input
in_pin:right input
in_pin:sidechain left input
in_pin:sidechain right input
out_pin:left output
out_pin:right output

@init
  ext_tail_size = -1;
  log2db = 8.6858896380650365530225783783321;
  db2log = 0.11512925464970228420089957273422;
  i=0;
  loop(
    120,
    attimes[i] = ((0.08924 / i) + (0.60755 / (i ^ 2)) - 0.00006);
    i+=1;
  );
  attime=0.010;
  reltime=0.100;
  maxover=0;
  ratio=0;
  cratio=0;
  rundb=0;
  overdb=0;
  maxover=0;
  atcoef=exp(-1/(attime * srate));
  relcoef=exp(-1/(reltime * srate));
  fbacoef=exp(-1000/(2 * srate));
  fbrcoef=exp(-1000/(200 * srate));
  sidechain = 0;
  automakeup = 0;

  // K-weighting filter coefficients
  k_hp_a = exp(-2 * 3.14159265358979 * 60 / srate);
  k_hp_b = 1 - k_hp_a;
  k_shelve_a = exp(-2 * 3.14159265358979 * 1681 / srate);
  k_shelve_b = 1 - k_shelve_a;
  k_hf_a = exp(-2 * 3.14159265358979 * 12000 / srate);
  k_hf_b = 1 - k_hf_a;

  // LUFS-S and LUFS-M buffer setup
  LUFSS_buffer = 0;
  LUFSS_samples = 3 * srate;
  LUFSM_buffer = 0;
  LUFSM_samples = 0.4 * srate;

@slider
  thresh = slider1;
  threshv = exp(thresh * db2log);
  ratio = slider2;
  softknee = 2;
  capsc = log2db;
  cthresh = (softknee ? (thresh -3) : thresh);
  cthreshv = exp(cthresh * db2log);
  sidechain = 0;
  automakeup = 0;
  automakeup ? (
    autogain = (abs(thresh) - (abs(thresh)/max(1,ratio-1)))/2;
  ) : (
    autogain = 0;
  );
  makeup = slider3;
  makeupv = exp((makeup+autogain) * db2log);

  det_mode = slider4;

@sample
  // Apply K-weighting filters
  aspl0 = abs(spl0);
  aspl1 = abs(spl1);
  aspl0 = k_hp_b * aspl0 + k_hp_a * k_hp_prev0;
  aspl1 = k_hp_b * aspl1 + k_hp_a * k_hp_prev1;
  k_hp_prev0 = aspl0;
  k_hp_prev1 = aspl1;
  aspl0 += k_shelve_b * (aspl0 - k_shelve_prev0);
  aspl1 += k_shelve_b * (aspl1 - k_shelve_prev1);
  k_shelve_prev0 = aspl0;
  k_shelve_prev1 = aspl1;
  aspl0 = k_hf_b * aspl0 + k_hf_a * k_hf_prev0;
  aspl1 = k_hf_b * aspl1 + k_hf_a * k_hf_prev1;
  k_hf_prev0 = aspl0;
  k_hf_prev1 = aspl1;

  det_mode == 1 ? (
    ave = (aspl0 * aspl0) + (aspl1 * aspl1);
    runave = ave + rmscoef * (runave - ave);
    det = sqrt(max(0,runave));
  );
  det_mode == 2 ? (
    LUFSS = (aspl0 * aspl0) + (aspl1 * aspl1);
    LUFSS_buffer += LUFSS - (LUFSS_buffer / LUFSS_samples);
    det = sqrt(max(0,LUFSS_buffer / LUFSS_samples));
  );
  det_mode == 3 ? (
    LUFSM = (aspl0 * aspl0) + (aspl1 * aspl1);
    LUFSM_buffer += LUFSM - (LUFSM_buffer / LUFSM_samples);
    det = sqrt(max(0,LUFSM_buffer / LUFSM_samples));
  );
  det_mode == 0 ? (
    maxspl = max(aspl0, aspl1);
    maxspl = maxspl * maxspl;
    runave = maxspl + rmscoef * (runave - maxspl);
    det = sqrt(max(0,runave));
  );

  overdb = capsc * log(det/cthreshv);
  overdb > maxover ? (
    maxover = overdb;
    reltime = overdb / 125;
    relcoef = exp(-1/(reltime * srate));
  );
  overdb = max(0,overdb);

  overdb > rundb ? (
    rundb = overdb + atcoef * (rundb - overdb);
  ) : (
    rundb = overdb + relcoef * (rundb - overdb);
  );
  overdb = rundb;

  cratio = (softknee ? (1 + (ratio-1) * min(overdb, 6) / 6) : ratio);

  gr = -overdb * (cratio-1)/cratio;
  grv = exp(gr * db2log);

  runmax = maxover + relcoef * (runmax - maxover);
  maxover = runmax;

  spl0 *= grv * makeupv;
  spl1 *= grv * makeupv;

// Copyright 2006, Thomas Scott Stillwell
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//and the following disclaimer in the documentation and/or other materials provided with the distribution. 
//
//The name of Thomas Scott Stillwell may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.