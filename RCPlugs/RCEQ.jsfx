desc:RCEQ (ReaClassical.org)
author: chmaha
version: 1.1
Changelog:
  Initial commit
about:
  Uses DSP from airwindows "Baxandall" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Baxandall (MIT License)
  JSFX version released under GPLv3 license

slider1:0.5<0,1,0.01>Treble
slider2:0.5<0,1,0.01>Bass
slider3:0.5<0,1,0.01>Output

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
trebleAL = freemem; freemem+=9;
trebleBL = freemem; freemem+=9;
bassAL = freemem; freemem+=9;
bassBL = freemem; freemem+=9;
trebleAR = freemem; freemem+=9;
trebleBR = freemem; freemem+=9;
bassAR = freemem; freemem+=9;
bassBR = freemem; freemem+=9;

A = 0.5;
B = 0.5;
C = 0.5;
CONST1 = 1.18*10^-23;
CONST2 = 1.18*10^-17;
M_PI = 3.1415926535897932384626433;
UINT32_MAX = 4294967295;
x = 0; loop(9,
  trebleAL[x] = 0.0;
  trebleBL[x] = 0.0;
  bassAL[x] = 0.0;
  bassBL[x] = 0.0;
  trebleAR[x] = 0.0;
  trebleBR[x] = 0.0;
  bassAR[x] = 0.0;
  bassBR[x] = 0.0;
  x+=1;
);
flip = 0;
fpdL = 1.0; 
while (fpdL < 16386) (
  fpdL = rand()*UINT32_MAX;
  );
fpdR = 1.0;
while (fpdR < 16386) (
  fpdR = rand()*UINT32_MAX;
  );
// fpdL |= 0;
// fpdR |= 0;

@slider
A = slider1;
B = slider2;
C = slider3;

@block
trebleGain = pow(10.0,((A*30.0)-15.0)/20.0);
trebleFreq = (4410.0*trebleGain)/srate;
(trebleFreq > 0.45) ? trebleFreq = 0.45;
trebleAL[0] = trebleBL[0] = trebleAR[0] = trebleBR[0] = trebleFreq;
bassGain = pow(10.0,((B*30.0)-15.0)/20.0);
bassFreq = pow(10.0,-((B*30.0)-15.0)/20.0);
bassFreq = (8820.0*bassFreq)/srate;
(bassFreq > 0.45) ? bassFreq = 0.45;
bassAL[0] = bassBL[0] = bassAR[0] = bassBR[0] = bassFreq;
trebleAL[1] = trebleBL[1] = trebleAR[1] = trebleBR[1] = 0.4;
bassAL[1] = bassBL[1] = bassAR[1] = bassBR[1] = 0.2;
output = pow(10.0,((C*30.0)-15.0)/20.0);

K = tan(M_PI * trebleAL[0]);
norm = 1.0 / (1.0 + K / trebleAL[1] + K * K);
trebleBL[2] = trebleAL[2] = trebleBR[2] = trebleAR[2] = K * K * norm;
trebleBL[3] = trebleAL[3] = trebleBR[3] = trebleAR[3] = 2.0 * trebleAL[2];
trebleBL[4] = trebleAL[4] = trebleBR[4] = trebleAR[4] = trebleAL[2];
trebleBL[5] = trebleAL[5] = trebleBR[5] = trebleAR[5] = 2.0 * (K * K - 1.0) * norm;
trebleBL[6] = trebleAL[6] = trebleBR[6] = trebleAR[6] = (1.0 - K / trebleAL[1] + K * K) * norm;

K = tan(M_PI * bassAL[0]);
norm = 1.0 / (1.0 + K / bassAL[1] + K * K);
bassBL[2] = bassAL[2] = bassBR[2] = bassAR[2] = K * K * norm;
bassBL[3] = bassAL[3] = bassBR[3] = bassAR[3] = 2.0 * bassAL[2];
bassBL[4] = bassAL[4] = bassBR[4] = bassAR[4] = bassAL[2];
bassBL[5] = bassAL[5] = bassBR[5] = bassAR[5] = 2.0 * (K * K - 1.0) * norm;
bassBL[6] = bassAL[6] = bassBR[6] = bassAR[6] = (1.0 - K / bassAL[1] + K * K) * norm;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

(abs(inputSampleL)< CONST1) ? inputSampleL = spl0 * CONST2;
(abs(inputSampleR)< CONST1) ? inputSampleR = spl1 * CONST2;

(output != 1.0) ? (
  inputSampleL *= output;
  inputSampleR *= output;
);

inputSampleL = sin(inputSampleL);
inputSampleR = sin(inputSampleR);

trebleSampleL;
bassSampleL;
trebleSampleR;
bassSampleR;

(flip) ? (
  trebleSampleL = (inputSampleL * trebleAL[2]) + trebleAL[7];
  trebleAL[7] = (inputSampleL * trebleAL[3]) - (trebleSampleL * trebleAL[5]) + trebleAL[8];
  trebleAL[8] = (inputSampleL * trebleAL[4]) - (trebleSampleL * trebleAL[6]);
  trebleSampleL = inputSampleL - trebleSampleL;

  bassSampleL = (inputSampleL * bassAL[2]) + bassAL[7];
  bassAL[7] = (inputSampleL * bassAL[3]) - (bassSampleL * bassAL[5]) + bassAL[8];
  bassAL[8] = (inputSampleL * bassAL[4]) - (bassSampleL * bassAL[6]);

  trebleSampleR = (inputSampleR * trebleAR[2]) + trebleAR[7];
  trebleAR[7] = (inputSampleR * trebleAR[3]) - (trebleSampleR * trebleAR[5]) + trebleAR[8];
  trebleAR[8] = (inputSampleR * trebleAR[4]) - (trebleSampleR * trebleAR[6]);
  trebleSampleR = inputSampleR - trebleSampleR;

  bassSampleR = (inputSampleR * bassAR[2]) + bassAR[7];
  bassAR[7] = (inputSampleR * bassAR[3]) - (bassSampleR * bassAR[5]) + bassAR[8];
  bassAR[8] = (inputSampleR * bassAR[4]) - (bassSampleR * bassAR[6]);
)
:
(
  trebleSampleL = (inputSampleL * trebleBL[2]) + trebleBL[7];
  trebleBL[7] = (inputSampleL * trebleBL[3]) - (trebleSampleL * trebleBL[5]) + trebleBL[8];
  trebleBL[8] = (inputSampleL * trebleBL[4]) - (trebleSampleL * trebleBL[6]);
  trebleSampleL = inputSampleL - trebleSampleL;

  bassSampleL = (inputSampleL * bassBL[2]) + bassBL[7];
  bassBL[7] = (inputSampleL * bassBL[3]) - (bassSampleL * bassBL[5]) + bassBL[8];
  bassBL[8] = (inputSampleL * bassBL[4]) - (bassSampleL * bassBL[6]);

  trebleSampleR = (inputSampleR * trebleBR[2]) + trebleBR[7];
  trebleBR[7] = (inputSampleR * trebleBR[3]) - (trebleSampleR * trebleBR[5]) + trebleBR[8];
  trebleBR[8] = (inputSampleR * trebleBR[4]) - (trebleSampleR * trebleBR[6]);
  trebleSampleR = inputSampleR - trebleSampleR;

  bassSampleR = (inputSampleR * bassBR[2]) + bassBR[7];
  bassBR[7] = (inputSampleR * bassBR[3]) - (bassSampleR * bassBR[5]) + bassBR[8];
  bassBR[8] = (inputSampleR * bassBR[4]) - (bassSampleR * bassBR[6]);
);
flip = !flip;

trebleSampleL *= trebleGain;
bassSampleL *= bassGain;
inputSampleL = bassSampleL + trebleSampleL; //interleaved biquad
trebleSampleR *= trebleGain;
bassSampleR *= bassGain;
inputSampleR = bassSampleR + trebleSampleR; //interleaved biquad

(inputSampleL > 1.0) ? inputSampleL = 1.0;
(inputSampleL < -1.0)? inputSampleL = -1.0;
inputSampleL = asin(inputSampleL);

(inputSampleR > 1.0) ? inputSampleR = 1.0;
(inputSampleR < -1.0)? inputSampleR = -1.0;
inputSampleR = asin(inputSampleR);

fpdL ~= fpdL << 13; fpdL ~= fpdL >> 17; fpdL ~= fpdL << 5;
fpdR ~= fpdR << 13; fpdR ~= fpdR >> 17; fpdR ~= fpdR << 5;
(fpdL < 0) ? fpdL += UINT32_MAX;
(fpdR < 0) ? fpdR += UINT32_MAX;

spl0 = inputSampleL;
spl1 = inputSampleR;
