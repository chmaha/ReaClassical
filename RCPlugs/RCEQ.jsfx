NoIndex: true
desc:RCEQ  (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Baxandall" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Baxandall (MIT License)

slider1:20<0,1000,10>HPF
slider2:20000<1000,22000,100>LPF
slider3:0.5<0,1,0.01>Treble
slider4:0.5<0,1,0.01>Bass
slider5:0<-20,20,0.1>Gain

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
trebleAL = freemem; freemem+=9;
trebleBL = freemem; freemem+=9;
bassAL = freemem; freemem+=9;
bassBL = freemem; freemem+=9;
trebleAR = freemem; freemem+=9;
trebleBR = freemem; freemem+=9;
bassAR = freemem; freemem+=9;
bassBR = freemem; freemem+=9;

A = 0.5;
B = 0.5;
C = 0.5;
CONST1 = 1.18*10^-23;
CONST2 = 1.18*10^-17;
x = 0; loop(9,
  trebleAL[x] = 0.0;
  trebleBL[x] = 0.0;
  bassAL[x] = 0.0;
  bassBL[x] = 0.0;
  trebleAR[x] = 0.0;
  trebleBR[x] = 0.0;
  bassAR[x] = 0.0;
  bassBR[x] = 0.0;
  x+=1;
);
flip = 0;

  ext_tail_size = -1;
  hpf = 0;
  gain1 = 0;
  freq1 = slider1;
  a1 = 1;
  s1 = 1;
  q1 = 1 / (sqrt((a1 + 1/a1)*(1/s1 - 1) + 2));
  w01 = 2 * $pi * freq1/srate;
  cosw01 = cos(w01);
  sinw01 = sin(w01);
  alpha1 = sinw01 / (2 * q1);

  b01 = (1 + cosw01)/2;
  b11 = -(1 + cosw01);
  b21 = (1 + cosw01)/2;
  a01 = 1 + alpha1;
  a11 = -2 * cosw01;
  a21 = 1 - alpha1;
  b01 /= a01;
  b11 /= a01;
  b21 /= a01;
  a11 /= a01;
  a21 /= a01;

  lpf = 0;
  gain3 = 0;
  freq3 = 22000;
  a3 = 10^(gain3/40);
  s3 = 2;
  q3 = 1 / (sqrt((a3 + 1/a3)*(1/s3 - 1) + 2));
  w03 = 2 * $pi * freq3/srate;
  cosw03 = cos(w03);
  sinw03 = sin(w03);
  alpha3 = sinw03 / (2 * q3);

  b03 = (1 - cosw03)/2;
  b13 = (1 - cosw03);
  b23 = (1 - cosw03)/2;
  a03 = 1 + alpha3;
  a13 = -2 * cosw03;
  a23 = 1 - alpha3;
  b03 /= a03;
  b13 /= a03;
  b23 /= a03;
  a13 /= a03;
  a23 /= a03;

  gain = 1;

@slider
freq1 = slider1;
freq3 = slider2;
A = slider3;
B = slider4;
C = slider5;
gain = 10^(slider5/20);

  slider1 == 0 ? hpf = 0 : hpf = 1;
  slider2 == 22000 ? lpf = 0 : lpf = 1;

  a1 = 1;
  s1 = 1;
  q1 = 1 / (sqrt((a1 + 1/a1)*(1/s1 - 1) + 2));
  w01 = 2 * $pi * freq1/srate;
  cosw01 = cos(w01);
  sinw01 = sin(w01);
  alpha1 = sinw01 / (2 * q1);

  b01 = (1 + cosw01)/2;
  b11 = -(1 + cosw01);
  b21 = (1 + cosw01)/2;
  a01 = 1 + alpha1;
  a11 = -2 * cosw01;
  a21 = 1 - alpha1;
  b01 /= a01;
  b11 /= a01;
  b21 /= a01;
  a11 /= a01;
  a21 /= a01;

  a3 = 1;
  s3 = 1;
  q3 = 1 / (sqrt((a3 + 1/a3)*(1/s3 - 1) + 2));
  w03 = 2 * $pi * freq3/srate;
  cosw03 = cos(w03);
  sinw03 = sin(w03);
  alpha3 = sinw03 / (2 * q3);

  b03 = (1 - cosw03)/2;
  b13 = (1 - cosw03);
  b23 = (1 - cosw03)/2;
  a03 = 1 + alpha3;
  a13 = -2 * cosw03;
  a23 = 1 - alpha3;
  b03 /= a03;
  b13 /= a03;
  b23 /= a03;
  a13 /= a03;
  a23 /= a03;

@block
trebleGain = pow(10.0,((A*30.0)-15.0)/20.0);
trebleFreq = (4410.0*trebleGain)/srate;
(trebleFreq > 0.45) ? trebleFreq = 0.45;
trebleAL[0] = trebleBL[0] = trebleAR[0] = trebleBR[0] = trebleFreq;
bassGain = pow(10.0,((B*30.0)-15.0)/20.0);
bassFreq = pow(10.0,-((B*30.0)-15.0)/20.0);
bassFreq = (8820.0*bassFreq)/srate;
(bassFreq > 0.45) ? bassFreq = 0.45;
bassAL[0] = bassBL[0] = bassAR[0] = bassBR[0] = bassFreq;
trebleAL[1] = trebleBL[1] = trebleAR[1] = trebleBR[1] = 0.4;
bassAL[1] = bassBL[1] = bassAR[1] = bassBR[1] = 0.2;
// output = pow(10.0,((C*30.0)-15.0)/20.0);

K = tan($pi * trebleAL[0]);
norm = 1.0 / (1.0 + K / trebleAL[1] + K * K);
trebleBL[2] = trebleAL[2] = trebleBR[2] = trebleAR[2] = K * K * norm;
trebleBL[3] = trebleAL[3] = trebleBR[3] = trebleAR[3] = 2.0 * trebleAL[2];
trebleBL[4] = trebleAL[4] = trebleBR[4] = trebleAR[4] = trebleAL[2];
trebleBL[5] = trebleAL[5] = trebleBR[5] = trebleAR[5] = 2.0 * (K * K - 1.0) * norm;
trebleBL[6] = trebleAL[6] = trebleBR[6] = trebleAR[6] = (1.0 - K / trebleAL[1] + K * K) * norm;

K = tan($pi * bassAL[0]);
norm = 1.0 / (1.0 + K / bassAL[1] + K * K);
bassBL[2] = bassAL[2] = bassBR[2] = bassAR[2] = K * K * norm;
bassBL[3] = bassAL[3] = bassBR[3] = bassAR[3] = 2.0 * bassAL[2];
bassBL[4] = bassAL[4] = bassBR[4] = bassAR[4] = bassAL[2];
bassBL[5] = bassAL[5] = bassBR[5] = bassAR[5] = 2.0 * (K * K - 1.0) * norm;
bassBL[6] = bassAL[6] = bassBR[6] = bassAR[6] = (1.0 - K / bassAL[1] + K * K) * norm;

@sample

 hpf != 0 ? (
  ospl0 = spl0;
  spl0 = b01 * spl0 + b11 * xl11 + b21 * xl21 - a11 * yl11 - a21 * yl21;
  xl21 = xl11;
  xl11 = ospl0;
  yl21 = yl11;
  yl11 = spl0;

  ospl1 = spl1;
  spl1 = b01 * spl1 + b11 * xr11 + b21 * xr21 - a11 * yr11 - a21 * yr21;
  xr21 = xr11;
  xr11 = ospl1;
  yr21 = yr11;
  yr11 = spl1;
  );

  lpf != 0 ? (
  ospl0 = spl0;
  spl0 = b03 * spl0 + b13 * xl13 + b23 * xl23 - a13 * yl13 - a23 * yl23;
  xl23 = xl13;
  xl13 = ospl0;
  yl23 = yl13;
  yl13 = spl0;

  ospl1 = spl1;
  spl1 = b03 * spl1 + b13 * xr13 + b23 * xr23 - a13 * yr13 - a23 * yr23;
  xr23 = xr13;
  xr13 = ospl1;
  yr23 = yr13;
  yr13 = spl1;
  );

inputSampleL = spl0;
inputSampleR = spl1;

(abs(inputSampleL)< CONST1) ? inputSampleL = spl0 * CONST2;
(abs(inputSampleR)< CONST1) ? inputSampleR = spl1 * CONST2;

(gain != 0.0) ? (
  inputSampleL *= gain;
  inputSampleR *= gain;
);

(A != 0.5) || (B != 0.5) ?
(
inputSampleL = sin(inputSampleL);
inputSampleR = sin(inputSampleR);

(flip) ? (
  trebleSampleL = (inputSampleL * trebleAL[2]) + trebleAL[7];
  trebleAL[7] = (inputSampleL * trebleAL[3]) - (trebleSampleL * trebleAL[5]) + trebleAL[8];
  trebleAL[8] = (inputSampleL * trebleAL[4]) - (trebleSampleL * trebleAL[6]);
  trebleSampleL = inputSampleL - trebleSampleL;

  bassSampleL = (inputSampleL * bassAL[2]) + bassAL[7];
  bassAL[7] = (inputSampleL * bassAL[3]) - (bassSampleL * bassAL[5]) + bassAL[8];
  bassAL[8] = (inputSampleL * bassAL[4]) - (bassSampleL * bassAL[6]);

  trebleSampleR = (inputSampleR * trebleAR[2]) + trebleAR[7];
  trebleAR[7] = (inputSampleR * trebleAR[3]) - (trebleSampleR * trebleAR[5]) + trebleAR[8];
  trebleAR[8] = (inputSampleR * trebleAR[4]) - (trebleSampleR * trebleAR[6]);
  trebleSampleR = inputSampleR - trebleSampleR;

  bassSampleR = (inputSampleR * bassAR[2]) + bassAR[7];
  bassAR[7] = (inputSampleR * bassAR[3]) - (bassSampleR * bassAR[5]) + bassAR[8];
  bassAR[8] = (inputSampleR * bassAR[4]) - (bassSampleR * bassAR[6]);
)
:
(
  trebleSampleL = (inputSampleL * trebleBL[2]) + trebleBL[7];
  trebleBL[7] = (inputSampleL * trebleBL[3]) - (trebleSampleL * trebleBL[5]) + trebleBL[8];
  trebleBL[8] = (inputSampleL * trebleBL[4]) - (trebleSampleL * trebleBL[6]);
  trebleSampleL = inputSampleL - trebleSampleL;

  bassSampleL = (inputSampleL * bassBL[2]) + bassBL[7];
  bassBL[7] = (inputSampleL * bassBL[3]) - (bassSampleL * bassBL[5]) + bassBL[8];
  bassBL[8] = (inputSampleL * bassBL[4]) - (bassSampleL * bassBL[6]);

  trebleSampleR = (inputSampleR * trebleBR[2]) + trebleBR[7];
  trebleBR[7] = (inputSampleR * trebleBR[3]) - (trebleSampleR * trebleBR[5]) + trebleBR[8];
  trebleBR[8] = (inputSampleR * trebleBR[4]) - (trebleSampleR * trebleBR[6]);
  trebleSampleR = inputSampleR - trebleSampleR;

  bassSampleR = (inputSampleR * bassBR[2]) + bassBR[7];
  bassBR[7] = (inputSampleR * bassBR[3]) - (bassSampleR * bassBR[5]) + bassBR[8];
  bassBR[8] = (inputSampleR * bassBR[4]) - (bassSampleR * bassBR[6]);
);
flip = !flip;

trebleSampleL *= trebleGain;
bassSampleL *= bassGain;
inputSampleL = bassSampleL + trebleSampleL; //interleaved biquad
trebleSampleR *= trebleGain;
bassSampleR *= bassGain;
inputSampleR = bassSampleR + trebleSampleR; //interleaved biquad

(inputSampleL > 1.0) ? inputSampleL = 1.0;
(inputSampleL < -1.0)? inputSampleL = -1.0;
inputSampleL = asin(inputSampleL);

(inputSampleR > 1.0) ? inputSampleR = 1.0;
(inputSampleR < -1.0)? inputSampleR = -1.0;
inputSampleR = asin(inputSampleR);
);

 


spl0 = inputSampleL;
spl1 = inputSampleR;

// LPF and HPF DSP from RBJ Highpass/Lowpass Filter (Stillwell)

// Copyright 2006, Thomas Scott Stillwell
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions
//and the following disclaimer.
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions
//and the following disclaimer in the documentation and/or other materials provided with the distribution.
//
//The name of Thomas Scott Stillwell may not be used to endorse or
//promote products derived from this software without specific prior written permission.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
