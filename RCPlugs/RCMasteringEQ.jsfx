NoIndex: true
desc:RCMasteringEQ (chmaha)
author: chmaha
about:
  Uses DSP from airwindows "Hull2" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/Hull2 (MIT License)
  JSFX version released under GPLv3 license

slider1:0<0,1,1{Classical,Full}>Range
slider2:0<-1,1,0.01>High
slider3:0<-1,1,0.01>Mid
slider4:0<-1,1,0.01>Low

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
freemem = 0;
hullL = freemem; freemem+=225;  
hullR = freemem; freemem+=225;  
hullbL = freemem; freemem+=5;
hullbR = freemem; freemem+=5;

hullp = 1;

@slider

D = slider1;
A = slider2;
B = slider3;
C = slider4;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

cycleEnd = floor(overallscale);
(cycleEnd < 1) ? cycleEnd = 1;
(cycleEnd > 4) ? cycleEnd = 4;

(D == 0) ? 
(
treble = A*0.3 + 1;
mid = B*0.3 + 1;
bass = C*0.3 + 1;
)
:
(
treble = A+1;
mid = B+1;
bass = C+1;
);

iirAmount = 0.125/cycleEnd;
limit = 4*cycleEnd;
divisor = 2.0/limit;

@sample
inputSampleL = spl0;
inputSampleR = spl1;

drySampleL = inputSampleL;
drySampleR = inputSampleR;

hullp-= 1; (hullp < 0) ? hullp += 60;

hullL[hullp] = hullL[hullp+60] = inputSampleL;
hullR[hullp] = hullR[hullp+60] = inputSampleR;
x = hullp;
midSampleL = 0.0;
midSampleR = 0.0;
while (x < hullp+(limit/2)) (
  midSampleL += hullL[x] * divisor;
  midSampleR += hullR[x] * divisor;
  x+=1;
);
midSampleL += midSampleL * 0.125;
midSampleR += midSampleR * 0.125;
while (x < hullp+limit) (
  midSampleL -= hullL[x] * 0.125 * divisor;
  midSampleR -= hullR[x] * 0.125 * divisor;
  x+=1;
);
hullL[hullp+20] = hullL[hullp+80] = midSampleL;
hullR[hullp+20] = hullR[hullp+80] = midSampleR;
x = hullp+20; 
midSampleL = midSampleR = 0.0;
while (x < hullp+20+(limit/2)) (
  midSampleL += hullL[x] * divisor;
  midSampleR += hullR[x] * divisor;
  x+=1;
);
midSampleL += midSampleL * 0.125;
midSampleR += midSampleR * 0.125;
while (x < hullp+20+limit) (
  midSampleL -= hullL[x] * 0.125 * divisor;
  midSampleR -= hullR[x] * 0.125 * divisor;
  x+=1;
);
hullL[hullp+40] = hullL[hullp+100] = midSampleL;
hullR[hullp+40] = hullR[hullp+100] = midSampleR;
x = hullp+40;
midSampleL = midSampleR = 0.0;
while (x < hullp+40+(limit/2)) (
  midSampleL += hullL[x] * divisor;
  midSampleR += hullR[x] * divisor;
  x+=1;
);
midSampleL += midSampleL * 0.125;
midSampleR += midSampleR * 0.125;
while (x < hullp+40+limit) (
  midSampleL -= hullL[x] * 0.125 * divisor;
  midSampleR -= hullR[x] * 0.125 * divisor;
  x+=1;
);
trebleSampleL = drySampleL - midSampleL;
trebleSampleR = drySampleR - midSampleR;


bassSampleL = midSampleL;
bassSampleR = midSampleR;
x = 0;
while (x < 3) (
  hullbL[x] = (hullbL[x] * (1.0 - iirAmount)) + (bassSampleL * iirAmount);
  hullbR[x] = (hullbR[x] * (1.0 - iirAmount)) + (bassSampleR * iirAmount);
  (abs(hullbL[x])<1.18*10^-37) ? hullbL[x] = 0.0;
  (abs(hullbR[x])<1.18*10^-37) ? hullbR[x] = 0.0;
  bassSampleL = hullbL[x];
  bassSampleR = hullbR[x];
  x+=1;
);
midSampleL -= bassSampleL;
midSampleR -= bassSampleR;

inputSampleL = (bassSampleL * bass) + (midSampleL * mid) + (trebleSampleL * treble);
inputSampleR = (bassSampleR * bass) + (midSampleR * mid) + (trebleSampleR * treble);


spl0 = inputSampleL;
spl1 = inputSampleR;
