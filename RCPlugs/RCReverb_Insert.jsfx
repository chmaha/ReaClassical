NoIndex: true
desc: RCReverb Insert (chmaha)
author: chmaha
about:
Uses DSP from airwindows "kBeyond" by Chris Johnson
https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/kBeyond (MIT License)
JSFX version released under GPLv3 license

slider1:50<0,100,1>Size
slider2:50<0,100,1>Early Reflections
slider3:20<0,200,1>Predelay (ms)
slider4:25<0,100,1>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

predelay = 15000;
d3A = 250;  d3B = 1174;  d3C = 305;  d3D = 1267;  d3E = 1240;  d3F = 1387;  d3G = 1461;  d3H = 1448;  d3I = 1564;
d6A = 2;  d6B = 3;  d6C = 536;  d6D = 190;  d6E = 504;  d6F = 609;  d6G = 8;  d6H = 574;  d6I = 558;  d6J = 516;  d6K = 12;  d6L = 13;  d6M = 488;  d6N = 560;  d6O = 416;  d6P = 585;  d6Q = 18;  d6R = 19;  d6S = 495;  d6T = 21;  d6U = 30;  d6V = 578;  d6W = 104;  d6X = 487;  d6Y = 157;  d6ZA = 27;  d6ZB = 280;  d6ZC = 360;  d6ZD = 452;  d6ZE = 31;  d6ZF = 537;  d6ZG = 291;  d6ZH = 34;  d6ZI = 483;  d6ZJ = 28;  d6ZK = 542;

freemem = 0;

a3AL = freemem; freemem += d3A+5;
a3BL = freemem; freemem += d3B+5;
a3CL = freemem; freemem += d3C+5;
a3DL = freemem; freemem += d3D+5;
a3EL = freemem; freemem += d3E+5;
a3FL = freemem; freemem += d3F+5;
a3GL = freemem; freemem += d3G+5;
a3HL = freemem; freemem += d3H+5;
a3IL = freemem; freemem += d3I+5;
a3AR = freemem; freemem += d3a+5;
a3BR = freemem; freemem += d3B+5;
a3CR = freemem; freemem += d3C+5;
a3DR = freemem; freemem += d3D+5;
a3ER = freemem; freemem += d3E+5;
a3FR = freemem; freemem += d3F+5;
a3GR = freemem; freemem += d3G+5;
a3HR = freemem; freemem += d3H+5;
a3IR = freemem; freemem += d3I+5;

a6AL = freemem; freemem += d6A+5;
a6BL = freemem; freemem += d6B+5;
a6CL= freemem; freemem += d6C+5;
a6DL= freemem; freemem += d6D+5;
a6EL= freemem; freemem += d6E+5;
a6FL= freemem; freemem += d6F+5;
a6GL= freemem; freemem += d6G+5;
a6HL= freemem; freemem += d6H+5;
a6IL= freemem; freemem += d6I+5;
a6JL= freemem; freemem += d6J+5;
a6KL= freemem; freemem += d6K+5;
a6LL= freemem; freemem += d6L+5;
a6ML= freemem; freemem += d6M+5;
a6NL= freemem; freemem += d6N+5;
a6OL= freemem; freemem += d6O+5;
a6PL= freemem; freemem += d6P+5;
a6QL= freemem; freemem += d6Q+5;
a6RL= freemem; freemem += d6R+5;
a6SL= freemem; freemem += d6S+5;
a6TL= freemem; freemem += d6T+5;
a6UL= freemem; freemem += d6U+5;
a6VL= freemem; freemem += d6V+5;
a6WL= freemem; freemem += d6W+5;
a6XL= freemem; freemem += d6X+5;
a6YL= freemem; freemem += d6Y+5;
a6ZAL= freemem; freemem += d6ZA+5;
a6ZBL= freemem; freemem += d6ZB+5;
a6ZCL= freemem; freemem += d6ZC+5;
a6ZDL= freemem; freemem += d6ZD+5;
a6ZEL= freemem; freemem += d6ZE+5;
a6ZFL= freemem; freemem += d6ZF+5;
a6ZGL= freemem; freemem += d6ZG+5;
a6ZHL= freemem; freemem += d6ZH+5;
a6ZIL= freemem; freemem += d6ZI+5;
a6ZJL= freemem; freemem += d6ZJ+5;
a6ZKL= freemem; freemem += d6ZK+5;
a6AR= freemem; freemem += d6A+5;
a6BR= freemem; freemem += d6B+5;
a6CR= freemem; freemem += d6C+5;
a6DR= freemem; freemem += d6D+5;
a6ER= freemem; freemem += d6E+5;
a6FR= freemem; freemem += d6F+5;
a6GR= freemem; freemem += d6G+5;
a6HR= freemem; freemem += d6H+5;
a6IR= freemem; freemem += d6I+5;
a6JR= freemem; freemem += d6J+5;
a6KR= freemem; freemem += d6K+5;
a6LR= freemem; freemem += d6L+5;
a6MR= freemem; freemem += d6M+5;
a6NR= freemem; freemem += d6N+5;
a6OR= freemem; freemem += d6O+5;
a6PR= freemem; freemem += d6P+5;
a6QR= freemem; freemem += d6Q+5;
a6RR= freemem; freemem += d6R+5;
a6SR= freemem; freemem += d6S+5;
a6TR= freemem; freemem += d6T+5;
a6UR= freemem; freemem += d6U+5;
a6VR= freemem; freemem += d6V+5;
a6WR= freemem; freemem += d6W+5;
a6XR= freemem; freemem += d6X+5;
a6YR= freemem; freemem += d6Y+5;
a6ZAR= freemem; freemem += d6ZA+5;
a6ZBR= freemem; freemem += d6ZB+5;
a6ZCR= freemem; freemem += d6ZC+5;
a6ZDR= freemem; freemem += d6ZD+5;
a6ZER= freemem; freemem += d6ZE+5;
a6ZFR= freemem; freemem += d6ZF+5;
a6ZGR= freemem; freemem += d6ZG+5;
a6ZHR= freemem; freemem += d6ZH+5;
a6ZIR= freemem; freemem += d6ZI+5;
a6ZJR= freemem; freemem += d6ZJ+5;
a6ZKR= freemem; freemem += d6ZK+5;

aZL= freemem; freemem += predelay+5;
aZR= freemem; freemem += predelay+5;

bez_AL = 0;
bez_AR = 1;
bez_BL = 2;
bez_BR = 3;
bez_CL = 4;
bez_CR = 5;
bez_InL = 6;
bez_InR = 7;
bez_UnInL = 8;
bez_UnInR = 9;
bez_SampL = 10;
bez_SampR = 11;
bez_cycle = 12;

bez = freemem; freemem += 13;

firBufferL= freemem; freemem += 32768;
firBufferR= freemem; freemem += 32768;

c3AL = c3BL = c3CL = c3DL = c3EL = c3FL = c3GL = c3HL = c3IL = 1;
c3AR = c3BR = c3CR = c3DR = c3ER = c3FR = c3GR = c3HR = c3IR = 1;
c6AL = c6BL = c6CL = c6DL = c6EL = c6FL = c6GL = c6HL = c6IL = 1;
c6JL = c6KL = c6LL = c6ML = c6NL = c6OL = c6PL = c6QL = c6RL = 1;
c6SL = c6TL = c6UL = c6VL = c6WL = c6XL = c6YL = c6ZAL = c6ZBL = 1;
c6ZCL = c6ZDL = c6ZEL = c6ZFL = c6ZGL = c6ZHL = c6ZIL = c6ZJL = c6ZKL = 1;
c6AR = c6BR = c6CR = c6DR = c6ER = c6FR = c6GR = c6HR = c6IR = 1;
c6JR = c6KR = c6LR = c6MR = c6NR = c6OR = c6PR = c6QR = c6RR = 1;
c6SR = c6TR = c6UR = c6VR = c6WR = c6XR = c6YR = c6ZAR = c6ZBR = 1;
c6ZCR = c6ZDR = c6ZER = c6ZFR = c6ZGR = c6ZHR = c6ZIR = c6ZJR = c6ZKR = 1;
countZ = 1;
bez[bez_cycle] = 1.0;

fir = freemem; freemem += 50;

// High-pass (200 Hz) and low-pass (2000 Hz) states
hp_a0 = 0; hp_b1 = 0; hp_z1L = 0; hp_z1R = 0;
lp_a0 = 0; lp_b1 = 0; lp_z1L = 0; lp_z1R = 0;

// Calculate coefficients once
twoPi = 2*$pi;

// base frequencies
freq1_base = 0.12;
freq2_base = 0.31;

// start with base freqs
freq1 = freq1_base;
freq2 = freq2_base;

// drift ranges (Â± % of base frequency)
drift_amt1 = 0.01;  // 1% drift
drift_amt2 = 0.02;  // 2% drift

// how often to refresh drift (in samples)
drift_interval = srate * 0.5; // every 0.5s
drift_counter = 0;

// phase accumulators
ph1 = 0;
ph2 = 0;

depth = 0.5;

// High-pass (200 Hz)
hp_cut = 200 / srate;
hp_x = exp(-twoPi*hp_cut);
hp_a0 = (1+hp_x)/2;
hp_b1 = hp_x;

// Low-pass (2000 Hz)
lp_cut = 2000 / srate;
lp_x = exp(-twoPi*lp_cut);
lp_a0 = 1 - lp_x;
lp_b1 = lp_x;

@slider

A = 0.4 + slider1 * 0.002;
B = 1;
C = 0.5;
D = slider2/100;
E = slider3/1000 * srate;
F = slider4/100;

@block
overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

fdb6ck = (0.0009765625+0.0009765625+0.001953125)*0.3333333;
reg6n = (1.0-pow(1.0-A,3.0))*fdb6ck;

derez = B/overallscale;
derez = 1.0 / (1.0/derez);
(derez < 0.0005) ? derez = 0.0005; (derez > 1.0) ? derez = 1.0;
freq = C*$pi/2; (freq < 0.5) ? freq = 0.5;
earlyLoudness = D;
adjPredelay = E;
wet = F;

fir[24] = 1.0;
fip = 0; while (fip < 24) (
    fir[fip] = (fip-24)*freq;
    fir[fip] = sin(fir[fip])/fir[fip];
    fip += 1;
);
fip = 25; while (fip < 48)  (
    fir[fip] = (fip-24)*freq;
    fir[fip] = sin(fir[fip])/fir[fip];
    fip += 1;
);

// update increments per sample
incr1 = twoPi*freq1/srate; 
incr2 = twoPi*freq2/srate;

// drift update counter
drift_counter += samplesblock;
drift_counter >= drift_interval ? (
    drift_counter = 0;
    
    // pick new freqs within drift range
    freq1 = freq1_base * (1 + (rand(2)-1) * drift_amt1);
    freq2 = freq2_base * (1 + (rand(2)-1) * drift_amt2);
);

@sample
inputSampleL = spl0;
inputSampleR = spl1;

drySampleL = inputSampleL;
drySampleR = inputSampleR;

bez[bez_cycle] += derez;
bez[bez_SampL] += ((inputSampleL+bez[bez_InL]) * derez);
bez[bez_SampR] += ((inputSampleR+bez[bez_InR]) * derez);
bez[bez_InL] = inputSampleL; bez[bez_InR] = inputSampleR;
(bez[bez_cycle] > 1.0) ? (
    bez[bez_cycle] = 0.0;

    aZL[countZ] = bez[bez_SampL];
    aZR[countZ] = bez[bez_SampR];
    countZ+=1; (countZ < 0 || countZ > adjPredelay) ? countZ = 0;
    bez[bez_SampL] = aZL[countZ-((countZ > adjPredelay)?adjPredelay+1:0)];
    bez[bez_SampR] = aZR[countZ-((countZ > adjPredelay)?adjPredelay+1:0)];

    inputSampleL = bez[bez_SampL];
    inputSampleR = bez[bez_SampR];

    a3AL[c3AL] = inputSampleL;
    a3BL[c3BL] = inputSampleL;
    a3CL[c3CL] = inputSampleL;

    a3CR[c3CR] = inputSampleR;
    a3FR[c3FR] = inputSampleR;
    a3IR[c3IR] = inputSampleR;

    c3AL+=1; (c3AL < 0 || c3AL > d3A) ? c3AL = 0;
    c3BL+=1; (c3BL < 0 || c3BL > d3B) ? c3BL = 0;
    c3CL+=1; (c3CL < 0 || c3CL > d3C) ? c3CL = 0;
    c3CR+=1; (c3CR < 0 || c3CR > d3C) ? c3CR = 0;
    c3FR+=1; (c3FR < 0 || c3FR > d3F) ? c3FR = 0;
    c3IR+=1; (c3IR < 0 || c3IR > d3I) ? c3IR = 0;

    o3AL = a3AL[c3AL-((c3AL > d3A)?c3AL+1:0)];
    o3BL = a3BL[c3BL-((c3BL > d3B)?c3BL+1:0)];
    o3CL = a3CL[c3CL-((c3CL > d3C)?c3CL+1:0)];
    o3CR = a3CR[c3CR-((c3CR > d3C)?c3CR+1:0)];
    o3FR = a3FR[c3FR-((c3FR > d3F)?c3FR+1:0)];
    o3IR = a3IR[c3IR-((c3IR > d3I)?c3IR+1:0)];

    a3DL[c3DL] = ((o3BL + o3CL) - o3AL);
    a3EL[c3EL] = ((o3AL + o3CL) - o3BL);
    a3FL[c3FL] = ((o3AL + o3BL) - o3CL);
    a3BR[c3BR] = ((o3FR + o3IR) - o3CR);
    a3ER[c3ER] = ((o3CR + o3IR) - o3FR);
    a3HR[c3HR] = ((o3CR + o3FR) - o3IR);

    c3DL+=1; (c3DL < 0 || c3DL > d3D) ? c3DL = 0;
    c3EL+=1; (c3EL < 0 || c3EL > d3E) ? c3EL = 0;
    c3FL+=1; (c3FL < 0 || c3FL > d3F) ? c3FL = 0;
    c3BR+=1; (c3BR < 0 || c3BR > d3B) ? c3BR = 0;
    c3ER+=1; (c3ER < 0 || c3ER > d3E) ? c3ER = 0;
    c3HR+=1; (c3HR < 0 || c3HR > d3H) ? c3HR = 0;

    o3DL = a3DL[c3DL-((c3DL > d3D)?c3DL+1:0)];
    o3EL = a3EL[c3EL-((c3EL > d3E)?c3EL+1:0)];
    o3FL = a3FL[c3FL-((c3FL > d3F)?c3FL+1:0)];
    o3BR = a3BR[c3BR-((c3BR > d3B)?c3BR+1:0)];
    o3ER = a3ER[c3ER-((c3ER > d3E)?c3ER+1:0)];
    o3HR = a3HR[c3HR-((c3HR > d3H)?c3HR+1:0)];

    a3GL[c3GL] = ((o3EL + o3FL) - o3DL);
    a3HL[c3HL] = ((o3DL + o3FL) - o3EL);
    a3IL[c3IL] = ((o3DL + o3EL) - o3FL);
    a3AR[c3AR] = ((o3ER + o3HR) - o3BR);
    a3DR[c3DR] = ((o3BR + o3HR) - o3ER);
    a3GR[c3GR] = ((o3BR + o3ER) - o3HR);

    c3GL+=1; (c3GL < 0 || c3GL > d3G) ? c3GL = 0;
    c3HL+=1; (c3HL < 0 || c3HL > d3H) ? c3HL = 0;
    c3IL+=1; (c3IL < 0 || c3IL > d3I) ? c3IL = 0;
    c3AR+=1; (c3AR < 0 || c3AR > d3A) ? c3AR = 0;
    c3DR+=1; (c3DR < 0 || c3DR > d3D) ? c3DR = 0;
    c3GR+=1; (c3GR < 0 || c3GR > d3G) ? c3GR = 0;

    o3GL = a3GL[c3GL-((c3GL > d3G)?c3GL+1:0)];
    o3HL = a3HL[c3HL-((c3HL > d3H)?c3HL+1:0)];
    o3IL = a3IL[c3IL-((c3IL > d3I)?c3IL+1:0)];
    o3AR = a3AR[c3AR-((c3AR > d3A)?c3AR+1:0)];
    o3DR = a3DR[c3DR-((c3DR > d3D)?c3DR+1:0)];
    o3GR = a3GR[c3GR-((c3GR > d3G)?c3GR+1:0)];

    inputSampleL = (o3GL + o3HL + o3IL)*0.125;
    inputSampleR = (o3AR + o3DR + o3GR)*0.125;

    earlyReflectionL = inputSampleL;
    earlyReflectionR = inputSampleR;

    (firPosition < 0 || firPosition > 32767) ? firPosition = 32767; firp = firPosition;
    firBufferL[firp] = inputSampleL; inputSampleL = 0.0;
    firBufferR[firp] = inputSampleR; inputSampleR = 0.0;
    (firp + 48 < 32767) ? (
        fip=1; while (fip < 48) (
            inputSampleL += firBufferL[firp+fip] * fir[fip];
            inputSampleR += firBufferR[firp+fip] * fir[fip];
            fip+=1;
        )
    ) : (
        fip=1; while (fip < 48) (
            inputSampleL += firBufferL[firp+fip - ((firp+fip > 32767)?32768:0)] * fir[fip];
            inputSampleR += firBufferR[firp+fip - ((firp+fip > 32767)?32768:0)] * fir[fip];
            fip+=1;
        )
    );
    inputSampleL *= 0.25; inputSampleR *= 0.25;
    inputSampleL *= sqrt(freq); inputSampleR *= sqrt(freq);
    firPosition-=1;

    a6AL[c6AL] = inputSampleL + (f6BL * reg6n);
    a6BL[c6BL] = inputSampleL + (f6CL * reg6n);
    a6CL[c6CL] = inputSampleL + (f6DL * reg6n);
    a6DL[c6DL] = inputSampleL + (f6EL * reg6n);
    a6EL[c6EL] = inputSampleL + (f6FL * reg6n);
    a6FL[c6FL] = inputSampleL + (f6AL * reg6n);

    c6AL+=1; (c6AL < 0 || c6AL > d6A) ? c6AL = 0;
    c6BL+=1; (c6BL < 0 || c6BL > d6B) ? c6BL = 0;
    c6CL+=1; (c6CL < 0 || c6CL > d6C) ? c6CL = 0;
    c6DL+=1; (c6DL < 0 || c6DL > d6D) ? c6DL = 0;
    c6EL+=1; (c6EL < 0 || c6EL > d6E) ? c6EL = 0;
    c6FL+=1; (c6FL < 0 || c6FL > d6F) ? c6FL = 0;

    o6AL = a6AL[c6AL-((c6AL > d6A)?d6A+1:0)];
    o6BL = a6BL[c6BL-((c6BL > d6B)?d6B+1:0)];
    o6CL = a6CL[c6CL-((c6CL > d6C)?d6C+1:0)];
    o6DL = a6DL[c6DL-((c6DL > d6D)?d6D+1:0)];
    o6EL = a6EL[c6EL-((c6EL > d6E)?d6E+1:0)];
    o6FL = a6FL[c6FL-((c6FL > d6F)?d6F+1:0)];

    a6FR[c6FR] = inputSampleR + (f6LR * reg6n);
    a6LR[c6LR] = inputSampleR + (f6RR * reg6n);
    a6RR[c6RR] = inputSampleR + (f6XR * reg6n);
    a6XR[c6XR] = inputSampleR + (f6ZER * reg6n);
    a6ZER[c6ZER] = inputSampleR + (f6ZKR * reg6n);
    a6ZKR[c6ZKR] = inputSampleR + (f6FR * reg6n);

    c6FR+=1; (c6FR < 0 || c6FR > d6F) ? c6FR = 0;
    c6LR+=1; (c6LR < 0 || c6LR > d6L) ? c6LR = 0;
    c6RR+=1; (c6RR < 0 || c6RR > d6R) ? c6RR = 0;
    c6XR+=1; (c6XR < 0 || c6XR > d6X) ? c6XR = 0;
    c6ZER+=1; (c6ZER < 0 || c6ZER > d6ZE) ? c6ZER = 0;
    c6ZKR+=1; (c6ZKR < 0 || c6ZKR > d6ZK) ? c6ZKR = 0;

    o6FR = a6FR[c6FR-((c6FR > d6F)?d6F+1:0)];
    o6LR = a6LR[c6LR-((c6LR > d6L)?d6L+1:0)];
    o6RR = a6RR[c6RR-((c6RR > d6R)?d6R+1:0)];
    o6XR = a6XR[c6XR-((c6XR > d6X)?d6X+1:0)];
    o6ZER = a6ZER[c6ZER-((c6ZER > d6ZE)?d6ZE+1:0)];
    o6ZKR = a6ZKR[c6ZKR-((c6ZKR > d6ZK)?d6ZK+1:0)];


    a6GL[c6GL] = ((o6AL*2.0) - (o6BL + o6CL + o6DL + o6EL + o6FL));
    a6HL[c6HL] = ((o6BL*2.0) - (o6AL + o6CL + o6DL + o6EL + o6FL));
    a6IL[c6IL] = ((o6CL*2.0) - (o6AL + o6BL + o6DL + o6EL + o6FL));
    a6JL[c6JL] = ((o6DL*2.0) - (o6AL + o6BL + o6CL + o6EL + o6FL));
    a6KL[c6KL] = ((o6EL*2.0) - (o6AL + o6BL + o6CL + o6DL + o6FL));
    a6LL[c6LL] = ((o6FL*2.0) - (o6AL + o6BL + o6CL + o6DL + o6EL));

    c6GL+=1; (c6GL < 0 || c6GL > d6G) ? c6GL = 0;
    c6HL+=1; (c6HL < 0 || c6HL > d6H) ? c6HL = 0;
    c6IL+=1; (c6IL < 0 || c6IL > d6I) ? c6IL = 0;
    c6JL+=1; (c6JL < 0 || c6JL > d6J) ? c6JL = 0;
    c6KL+=1; (c6KL < 0 || c6KL > d6K) ? c6KL = 0;
    c6LL+=1; (c6LL < 0 || c6LL > d6L) ? c6LL = 0;

    o6GL = a6GL[c6GL-((c6GL > d6G)?d6G+1:0)];
    o6HL = a6HL[c6HL-((c6HL > d6H)?d6H+1:0)];
    o6IL = a6IL[c6IL-((c6IL > d6I)?d6I+1:0)];
    o6JL = a6JL[c6JL-((c6JL > d6J)?d6J+1:0)];
    o6KL = a6KL[c6KL-((c6KL > d6K)?d6K+1:0)];
    o6LL = a6LL[c6LL-((c6LL > d6L)?d6L+1:0)];

    a6ER[c6ER] = ((o6FR*2.0) - (o6LR + o6RR + o6XR + o6ZER + o6ZKR));
    a6KR[c6KR] = ((o6LR*2.0) - (o6FR + o6RR + o6XR + o6ZER + o6ZKR));
    a6QR[c6QR] = ((o6RR*2.0) - (o6FR + o6LR + o6XR + o6ZER + o6ZKR));
    a6WR[c6WR] = ((o6XR*2.0) - (o6FR + o6LR + o6RR + o6ZER + o6ZKR));
    a6ZDR[c6ZDR] = ((o6ZER*2.0) - (o6FR + o6LR + o6RR + o6XR + o6ZKR));
    a6ZJR[c6ZJR] = ((o6ZKR*2.0) - (o6FR + o6LR + o6RR + o6XR + o6ZER));

    c6ER+=1; (c6ER < 0 || c6ER > d6E) ? c6ER = 0;
    c6KR+=1; (c6KR < 0 || c6KR > d6K) ? c6KR = 0;
    c6QR+=1; (c6QR < 0 || c6QR > d6Q) ? c6QR = 0;
    c6WR+=1; (c6WR < 0 || c6WR > d6W) ? c6WR = 0;
    c6ZDR+=1; (c6ZDR < 0 || c6ZDR > d6ZD) ? c6ZDR = 0;
    c6ZJR+=1; (c6ZJR < 0 || c6ZJR > d6ZJ) ? c6ZJR = 0;

    o6ER = a6ER[c6ER-((c6ER > d6E)?d6E+1:0)];
    o6KR = a6KR[c6KR-((c6KR > d6K)?d6K+1:0)];
    o6QR = a6QR[c6QR-((c6QR > d6Q)?d6Q+1:0)];
    o6WR = a6WR[c6WR-((c6WR > d6W)?d6W+1:0)];
    o6ZDR = a6ZDR[c6ZDR-((c6ZDR > d6ZD)?d6ZD+1:0)];
    o6ZJR = a6ZJR[c6ZJR-((c6ZJR > d6ZJ)?d6ZJ+1:0)];


    a6ML[c6ML] = ((o6GL*2.0) - (o6HL + o6IL + o6JL + o6KL + o6LL));
    a6NL[c6NL] = ((o6HL*2.0) - (o6GL + o6IL + o6JL + o6KL + o6LL));
    a6OL[c6OL] = ((o6IL*2.0) - (o6GL + o6HL + o6JL + o6KL + o6LL));
    a6PL[c6PL] = ((o6JL*2.0) - (o6GL + o6HL + o6IL + o6KL + o6LL));
    a6QL[c6QL] = ((o6KL*2.0) - (o6GL + o6HL + o6IL + o6JL + o6LL));
    a6RL[c6RL] = ((o6LL*2.0) - (o6GL + o6HL + o6IL + o6JL + o6KL));

    c6ML+=1; (c6ML < 0 || c6ML > d6M) ? c6ML = 0;
    c6NL+=1; (c6NL < 0 || c6NL > d6N) ? c6NL = 0;
    c6OL+=1; (c6OL < 0 || c6OL > d6O) ? c6OL = 0;
    c6PL+=1; (c6PL < 0 || c6PL > d6P) ? c6PL = 0;
    c6QL+=1; (c6QL < 0 || c6QL > d6Q) ? c6QL = 0;
    c6RL+=1; (c6RL < 0 || c6RL > d6R) ? c6RL = 0;

    o6ML = a6ML[c6ML-((c6ML > d6M)?d6M+1:0)];
    o6NL = a6NL[c6NL-((c6NL > d6N)?d6N+1:0)];
    o6OL = a6OL[c6OL-((c6OL > d6O)?d6O+1:0)];
    o6PL = a6PL[c6PL-((c6PL > d6P)?d6P+1:0)];
    o6QL = a6QL[c6QL-((c6QL > d6Q)?d6Q+1:0)];
    o6RL = a6RL[c6RL-((c6RL > d6R)?d6R+1:0)];

    a6DR[c6DR] = ((o6ER*2.0) - (o6KR + o6QR + o6WR + o6ZDR + o6ZJR));
    a6JR[c6JR] = ((o6KR*2.0) - (o6ER + o6QR + o6WR + o6ZDR + o6ZJR));
    a6PR[c6PR] = ((o6QR*2.0) - (o6ER + o6KR + o6WR + o6ZDR + o6ZJR));
    a6VR[c6VR] = ((o6WR*2.0) - (o6ER + o6KR + o6QR + o6ZDR + o6ZJR));
    a6ZCR[c6ZCR] = ((o6ZDR*2.0) - (o6ER + o6KR + o6QR + o6WR + o6ZJR));
    a6ZIR[c6ZIR] = ((o6ZJR*2.0) - (o6ER + o6KR + o6QR + o6WR + o6ZDR));

    c6DR+=1; (c6DR < 0 || c6DR > d6D) ? c6DR = 0;
    c6JR+=1; (c6JR < 0 || c6JR > d6J) ? c6JR = 0;
    c6PR+=1; (c6PR < 0 || c6PR > d6P) ? c6PR = 0;
    c6VR+=1; (c6VR < 0 || c6VR > d6V) ? c6VR = 0;
    c6ZCR+=1; (c6ZCR < 0 || c6ZCR > d6ZC) ? c6ZCR = 0;
    c6ZIR+=1; (c6ZIR < 0 || c6ZIR > d6ZI) ? c6ZIR = 0;

    o6DR = a6DR[c6DR-((c6DR > d6D)?d6D+1:0)];
    o6JR = a6JR[c6JR-((c6JR > d6J)?d6J+1:0)];
    o6PR = a6PR[c6PR-((c6PR > d6P)?d6P+1:0)];
    o6VR = a6VR[c6VR-((c6VR > d6V)?d6V+1:0)];
    o6ZCR = a6ZCR[c6ZCR-((c6ZCR > d6ZC)?d6ZC+1:0)];
    o6ZIR = a6ZIR[c6ZIR-((c6ZIR > d6ZI)?d6ZI+1:0)];


    a6SL[c6SL] = ((o6ML*2.0) - (o6NL + o6OL + o6PL + o6QL + o6RL));
    a6TL[c6TL] = ((o6NL*2.0) - (o6ML + o6OL + o6PL + o6QL + o6RL));
    a6UL[c6UL] = ((o6OL*2.0) - (o6ML + o6NL + o6PL + o6QL + o6RL));
    a6VL[c6VL] = ((o6PL*2.0) - (o6ML + o6NL + o6OL + o6QL + o6RL));
    a6WL[c6WL] = ((o6QL*2.0) - (o6ML + o6NL + o6OL + o6PL + o6RL));
    a6XL[c6XL] = ((o6RL*2.0) - (o6ML + o6NL + o6OL + o6PL + o6QL));

    c6SL+=1; (c6SL < 0 || c6SL > d6S) ? c6SL = 0;
    c6TL+=1; (c6TL < 0 || c6TL > d6T) ? c6TL = 0;
    c6UL+=1; (c6UL < 0 || c6UL > d6U) ? c6UL = 0;
    c6VL+=1; (c6VL < 0 || c6VL > d6V) ? c6VL = 0;
    c6WL+=1; (c6WL < 0 || c6WL > d6W) ? c6WL = 0;
    c6XL+=1; (c6XL < 0 || c6XL > d6X) ? c6XL = 0;

    o6SL = a6SL[c6SL-((c6SL > d6S)?d6S+1:0)];
    o6TL = a6TL[c6TL-((c6TL > d6T)?d6T+1:0)];
    o6UL = a6UL[c6UL-((c6UL > d6U)?d6U+1:0)];
    o6VL = a6VL[c6VL-((c6VL > d6V)?d6V+1:0)];
    o6WL = a6WL[c6WL-((c6WL > d6W)?d6W+1:0)];
    o6XL = a6XL[c6XL-((c6XL > d6X)?d6X+1:0)];

    a6CR[c6CR] = ((o6DR*2.0) - (o6JR + o6PR + o6VR + o6ZCR + o6ZIR));
    a6IR[c6IR] = ((o6JR*2.0) - (o6DR + o6PR + o6VR + o6ZCR + o6ZIR));
    a6OR[c6OR] = ((o6PR*2.0) - (o6DR + o6JR + o6VR + o6ZCR + o6ZIR));
    a6UR[c6UR] = ((o6VR*2.0) - (o6DR + o6JR + o6PR + o6ZCR + o6ZIR));
    a6ZBR[c6ZBR] = ((o6ZCR*2.0) - (o6DR + o6JR + o6PR + o6VR + o6ZIR));
    a6ZHR[c6ZHR] = ((o6ZIR*2.0) - (o6DR + o6JR + o6PR + o6VR + o6ZCR));

    c6CR+=1; (c6CR < 0 || c6CR > d6C) ? c6CR = 0;
    c6IR+=1; (c6IR < 0 || c6IR > d6I) ? c6IR = 0;
    c6OR+=1; (c6OR < 0 || c6OR > d6O) ? c6OR = 0;
    c6UR+=1; (c6UR < 0 || c6UR > d6U) ? c6UR = 0;
    c6ZBR+=1; (c6ZBR < 0 || c6ZBR > d6ZB) ? c6ZBR = 0;
    c6ZHR+=1; (c6ZHR < 0 || c6ZHR > d6ZH) ? c6ZHR = 0;

    o6CR = a6CR[c6CR-((c6CR > d6C)?d6C+1:0)];
    o6IR = a6IR[c6IR-((c6IR > d6I)?d6I+1:0)];
    o6OR = a6OR[c6OR-((c6OR > d6O)?d6O+1:0)];
    o6UR = a6UR[c6UR-((c6UR > d6U)?d6U+1:0)];
    o6ZBR = a6ZBR[c6ZBR-((c6ZBR > d6ZB)?d6ZB+1:0)];
    o6ZHR = a6ZHR[c6ZHR-((c6ZHR > d6ZH)?d6ZH+1:0)];


    a6YL[c6YL] = ((o6SL*2.0) - (o6TL + o6UL + o6VL + o6WL + o6XL));
    a6ZAL[c6ZAL] = ((o6TL*2.0) - (o6SL + o6UL + o6VL + o6WL + o6XL));
    a6ZBL[c6ZBL] = ((o6UL*2.0) - (o6SL + o6TL + o6VL + o6WL + o6XL));
    a6ZCL[c6ZCL] = ((o6VL*2.0) - (o6SL + o6TL + o6UL + o6WL + o6XL));
    a6ZDL[c6ZDL] = ((o6WL*2.0) - (o6SL + o6TL + o6UL + o6VL + o6XL));
    a6ZEL[c6ZEL] = ((o6XL*2.0) - (o6SL + o6TL + o6UL + o6VL + o6WL));

    c6YL+=1; (c6YL < 0 || c6YL > d6Y) ? c6YL = 0;
    c6ZAL+=1; (c6ZAL < 0 || c6ZAL > d6ZA) ? c6ZAL = 0;
    c6ZBL+=1; (c6ZBL < 0 || c6ZBL > d6ZB) ? c6ZBL = 0;
    c6ZCL+=1; (c6ZCL < 0 || c6ZCL > d6ZC) ? c6ZCL = 0;
    c6ZDL+=1; (c6ZDL < 0 || c6ZDL > d6ZD) ? c6ZDL = 0;
    c6ZEL+=1; (c6ZEL < 0 || c6ZEL > d6ZE) ? c6ZEL = 0;

    o6YL = a6YL[c6YL-((c6YL > d6Y)?d6Y+1:0)];
    o6ZAL = a6ZAL[c6ZAL-((c6ZAL > d6ZA)?d6ZA+1:0)];
    o6ZBL = a6ZBL[c6ZBL-((c6ZBL > d6ZB)?d6ZB+1:0)];
    o6ZCL = a6ZCL[c6ZCL-((c6ZCL > d6ZC)?d6ZC+1:0)];
    o6ZDL = a6ZDL[c6ZDL-((c6ZDL > d6ZD)?d6ZD+1:0)];
    o6ZEL = a6ZEL[c6ZEL-((c6ZEL > d6ZE)?d6ZE+1:0)];

    a6BR[c6BR] = ((o6CR*2.0) - (o6IR + o6OR + o6UR + o6ZBR + o6ZHR));
    a6HR[c6HR] = ((o6IR*2.0) - (o6CR + o6OR + o6UR + o6ZBR + o6ZHR));
    a6NR[c6NR] = ((o6OR*2.0) - (o6CR + o6IR + o6UR + o6ZBR + o6ZHR));
    a6TR[c6TR] = ((o6UR*2.0) - (o6CR + o6IR + o6OR + o6ZBR + o6ZHR));
    a6ZAR[c6ZAR] = ((o6ZBR*2.0) - (o6CR + o6IR + o6OR + o6UR + o6ZHR));
    a6ZGR[c6ZGR] = ((o6ZHR*2.0) - (o6CR + o6IR + o6OR + o6UR + o6ZBR));

    c6BR+=1; (c6BR < 0 || c6BR > d6B) ? c6BR = 0;
    c6HR+=1; (c6HR < 0 || c6HR > d6H) ? c6HR = 0;
    c6NR+=1; (c6NR < 0 || c6NR > d6N) ? c6NR = 0;
    c6TR+=1; (c6TR < 0 || c6TR > d6T) ? c6TR = 0;
    c6ZBR+=1; (c6ZBR < 0 || c6ZBR > d6ZB) ? c6ZBR = 0;
    c6ZGR+=1; (c6ZGR < 0 || c6ZGR > d6ZG) ? c6ZGR = 0;

    o6BR = a6BR[c6BR-((c6BR > d6B)?d6B+1:0)];
    o6HR = a6HR[c6HR-((c6HR > d6H)?d6H+1:0)];
    o6NR = a6NR[c6NR-((c6NR > d6N)?d6N+1:0)];
    o6TR = a6TR[c6TR-((c6TR > d6T)?d6T+1:0)];
    o6ZAR = a6ZAR[c6ZAR-((c6ZAR > d6ZA)?d6ZA+1:0)];
    o6ZGR = a6ZGR[c6ZGR-((c6ZGR > d6ZG)?d6ZG+1:0)];


    a6ZFL[c6ZFL] = ((o6YL*2.0) - (o6ZAL + o6ZBL + o6ZCL + o6ZDL + o6ZEL));
    a6ZGL[c6ZGL] = ((o6ZAL*2.0) - (o6YL + o6ZBL + o6ZCL + o6ZDL + o6ZEL));
    a6ZHL[c6ZHL] = ((o6ZBL*2.0) - (o6YL + o6ZAL + o6ZCL + o6ZDL + o6ZEL));
    a6ZIL[c6ZIL] = ((o6ZCL*2.0) - (o6YL + o6ZAL + o6ZBL + o6ZDL + o6ZEL));
    a6ZJL[c6ZJL] = ((o6ZDL*2.0) - (o6YL + o6ZAL + o6ZBL + o6ZCL + o6ZEL));
    a6ZKL[c6ZKL] = ((o6ZEL*2.0) - (o6YL + o6ZAL + o6ZBL + o6ZCL + o6ZDL));

    c6ZFL+=1; (c6ZFL < 0 || c6ZFL > d6ZF) ? c6ZFL = 0;
    c6ZGL+=1; (c6ZGL < 0 || c6ZGL > d6ZG) ? c6ZGL = 0;
    c6ZHL+=1; (c6ZHL < 0 || c6ZHL > d6ZH) ? c6ZHL = 0;
    c6ZIL+=1; (c6ZIL < 0 || c6ZIL > d6ZI) ? c6ZIL = 0;
    c6ZJL+=1; (c6ZJL < 0 || c6ZJL > d6ZJ) ? c6ZJL = 0;
    c6ZKL+=1; (c6ZKL < 0 || c6ZKL > d6ZK) ? c6ZKL = 0;

    o6ZFL = a6ZFL[c6ZFL-((c6ZFL > d6ZF)?d6ZF+1:0)];
    o6ZGL = a6ZGL[c6ZGL-((c6ZGL > d6ZG)?d6ZG+1:0)];
    o6ZHL = a6ZHL[c6ZHL-((c6ZHL > d6ZH)?d6ZH+1:0)];
    o6ZIL = a6ZIL[c6ZIL-((c6ZIL > d6ZI)?d6ZI+1:0)];
    o6ZJL = a6ZJL[c6ZJL-((c6ZJL > d6ZJ)?d6ZJ+1:0)];
    o6ZKL = a6ZKL[c6ZKL-((c6ZKL > d6ZK)?d6ZK+1:0)];

    a6AR[c6AR] = ((o6BR*2.0) - (o6HR + o6NR + o6TR + o6ZAR + o6ZGR));
    a6GR[c6GR] = ((o6HR*2.0) - (o6BR + o6NR + o6TR + o6ZAR + o6ZGR));
    a6MR[c6MR] = ((o6NR*2.0) - (o6BR + o6HR + o6TR + o6ZAR + o6ZGR));
    a6SR[c6SR] = ((o6TR*2.0) - (o6BR + o6HR + o6NR + o6ZAR + o6ZGR));
    a6YR[c6YR] = ((o6ZAR*2.0) - (o6BR + o6HR + o6NR + o6TR + o6ZGR));
    a6ZFR[c6ZFR] = ((o6ZGR*2.0) - (o6BR + o6HR + o6NR + o6TR + o6ZAR));

    c6AR+=1; (c6AR < 0 || c6AR > d6A) ? c6AR = 0;
    c6GR+=1; (c6GR < 0 || c6GR > d6G) ? c6GR = 0;
    c6MR+=1; (c6MR < 0 || c6MR > d6M) ? c6MR = 0;
    c6SR+=1; (c6SR < 0 || c6SR > d6S) ? c6SR = 0;
    c6YR+=1; (c6YR < 0 || c6YR > d6Y) ? c6YR = 0;
    c6ZFR+=1; (c6ZFR < 0 || c6ZFR > d6ZF) ? c6ZFR = 0;

    o6AR = a6AR[c6AR-((c6AR > d6A)?d6A+1:0)];
    o6GR = a6GR[c6GR-((c6GR > d6G)?d6G+1:0)];
    o6MR = a6MR[c6MR-((c6MR > d6M)?d6M+1:0)];
    o6SR = a6SR[c6SR-((c6SR > d6S)?d6S+1:0)];
    o6YR = a6YR[c6YR-((c6YR > d6Y)?d6Y+1:0)];
    o6ZFR = a6ZFR[c6ZFR-((c6ZFR > d6ZF)?d6ZF+1:0)];


    f6AL = ((o6AR*2.0) - (o6GR + o6MR + o6SR + o6YR + o6ZFR));
    f6BL = ((o6GR*2.0) - (o6AR + o6MR + o6SR + o6YR + o6ZFR));
    f6CL = ((o6MR*2.0) - (o6AR + o6GR + o6SR + o6YR + o6ZFR));
    f6DL = ((o6SR*2.0) - (o6AR + o6GR + o6MR + o6YR + o6ZFR));
    f6EL = ((o6YR*2.0) - (o6AR + o6GR + o6MR + o6SR + o6ZFR));
    f6FL = ((o6ZFR*2.0) - (o6AR + o6GR + o6MR + o6SR + o6YR));

    f6FR = ((o6ZFL*2.0) - (o6ZGL + o6ZHL + o6ZIL + o6ZJL + o6ZKL));
    f6LR = ((o6ZGL*2.0) - (o6ZFL + o6ZHL + o6ZIL + o6ZJL + o6ZKL));
    f6RR = ((o6ZHL*2.0) - (o6ZFL + o6ZGL + o6ZIL + o6ZJL + o6ZKL));
    f6XR = ((o6ZIL*2.0) - (o6ZFL + o6ZGL + o6ZHL + o6ZJL + o6ZKL));
    f6ZER = ((o6ZJL*2.0) - (o6ZFL + o6ZGL + o6ZHL + o6ZIL + o6ZKL));
    f6ZKR = ((o6ZKL*2.0) - (o6ZFL + o6ZGL + o6ZHL + o6ZIL + o6ZJL));

    inputSampleL = (o6ZFL + o6ZGL + o6ZHL + o6ZIL + o6ZJL + o6ZKL)*0.001953125;
    inputSampleR = (o6AR + o6GR + o6MR + o6SR + o6YR + o6ZFR)*0.001953125;

    f6AL = (f6AL+f6AL+f6AL+avg6L)*0.25; avg6L = f6AL;
    f6FR = (f6FR+f6FR+f6FR+avg6R)*0.25; avg6R = f6FR;

    inputSampleL += (earlyReflectionL * earlyLoudness);
    inputSampleR += (earlyReflectionR * earlyLoudness);

    bez[bez_CL] = bez[bez_BL];
    bez[bez_BL] = bez[bez_AL];
    bez[bez_AL] = inputSampleL;
    bez[bez_SampL] = 0.0;

    bez[bez_CR] = bez[bez_BR];
    bez[bez_BR] = bez[bez_AR];
    bez[bez_AR] = inputSampleR;
    bez[bez_SampR] = 0.0;
);
CBL = (bez[bez_CL]*(1.0-bez[bez_cycle]))+(bez[bez_BL]*bez[bez_cycle]);
CBR = (bez[bez_CR]*(1.0-bez[bez_cycle]))+(bez[bez_BR]*bez[bez_cycle]);
BAL = (bez[bez_BL]*(1.0-bez[bez_cycle]))+(bez[bez_AL]*bez[bez_cycle]);
BAR = (bez[bez_BR]*(1.0-bez[bez_cycle]))+(bez[bez_AR]*bez[bez_cycle]);
CBAL = (bez[bez_BL]+(CBL*(1.0-bez[bez_cycle]))+(BAL*bez[bez_cycle]))*0.125;
CBAR = (bez[bez_BR]+(CBR*(1.0-bez[bez_cycle]))+(BAR*bez[bez_cycle]))*0.125;
inputSampleL = CBAL;
inputSampleR = CBAR;

// High-pass filter
inputSampleL = hp_a0*(inputSampleL - hp_z1L) + hp_b1*hp_z1L;
hp_z1L = inputSampleL;
inputSampleR = hp_a0*(inputSampleR - hp_z1R) + hp_b1*hp_z1R;
hp_z1R = inputSampleR;

// Low-pass filter
inputSampleL = lp_a0*inputSampleL + lp_b1*lp_z1L;
lp_z1L = inputSampleL;
inputSampleR = lp_a0*inputSampleR + lp_b1*lp_z1R;
lp_z1R = inputSampleR;

// advance phases
ph1 += incr1;
ph2 += incr2;

// wrap to 0..2pi
ph1 >= twoPi ? ph1 -= twoPi;
ph2 >= twoPi ? ph2 -= twoPi;

// calculate LFOs (sine waves)
lfo1 = sin(ph1);
lfo2 = sin(ph2);

// mix equally
lfo_left  = (lfo1 + lfo2) * 0.5;
lfo_right = (lfo1 + sin(ph2 + $pi/2)) * 0.5; // 90Â° phase offset for right channel

// map to gain: unity with Â±0.5*depth swing
gain_left  = 1 + lfo_left  * depth * 0.5;
gain_right = 1 + lfo_right * depth * 0.5;

// apply to audio
inputSampleL *= gain_left;
inputSampleR *= gain_right;

inputSampleL = (inputSampleL * wet)+(drySampleL * (1.0-wet));
inputSampleR = (inputSampleR * wet)+(drySampleR * (1.0-wet));

spl0 = inputSampleL;
spl1 = inputSampleR;
